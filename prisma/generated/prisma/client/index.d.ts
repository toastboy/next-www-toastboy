
/**
 * Client
**/

import * as runtime from './runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model Arse
 * 
 */
export type Arse = $Result.DefaultSelection<Prisma.$ArsePayload>
/**
 * Model Club
 * 
 */
export type Club = $Result.DefaultSelection<Prisma.$ClubPayload>
/**
 * Model ClubSupporter
 * 
 */
export type ClubSupporter = $Result.DefaultSelection<Prisma.$ClubSupporterPayload>
/**
 * Model Country
 * 
 */
export type Country = $Result.DefaultSelection<Prisma.$CountryPayload>
/**
 * Model CountrySupporter
 * 
 */
export type CountrySupporter = $Result.DefaultSelection<Prisma.$CountrySupporterPayload>
/**
 * Model Diffs
 * 
 */
export type Diffs = $Result.DefaultSelection<Prisma.$DiffsPayload>
/**
 * Model GameChat
 * 
 */
export type GameChat = $Result.DefaultSelection<Prisma.$GameChatPayload>
/**
 * Model GameDay
 * 
 */
export type GameDay = $Result.DefaultSelection<Prisma.$GameDayPayload>
/**
 * Model Invitation
 * 
 */
export type Invitation = $Result.DefaultSelection<Prisma.$InvitationPayload>
/**
 * Model Outcome
 * 
 */
export type Outcome = $Result.DefaultSelection<Prisma.$OutcomePayload>
/**
 * Model Picker
 * 
 */
export type Picker = $Result.DefaultSelection<Prisma.$PickerPayload>
/**
 * Model PickerTeams
 * 
 */
export type PickerTeams = $Result.DefaultSelection<Prisma.$PickerTeamsPayload>
/**
 * Model Player
 * 
 */
export type Player = $Result.DefaultSelection<Prisma.$PlayerPayload>
/**
 * Model PlayerRecord
 * 
 */
export type PlayerRecord = $Result.DefaultSelection<Prisma.$PlayerRecordPayload>
/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model Session
 * 
 */
export type Session = $Result.DefaultSelection<Prisma.$SessionPayload>
/**
 * Model Account
 * 
 */
export type Account = $Result.DefaultSelection<Prisma.$AccountPayload>
/**
 * Model Verification
 * 
 */
export type Verification = $Result.DefaultSelection<Prisma.$VerificationPayload>

/**
 * Enums
 */
export namespace $Enums {
  export const TeamName: {
  A: 'A',
  B: 'B'
};

export type TeamName = (typeof TeamName)[keyof typeof TeamName]


export const PlayerResponse: {
  Yes: 'Yes',
  No: 'No',
  Dunno: 'Dunno',
  Excused: 'Excused',
  Flaked: 'Flaked',
  Injured: 'Injured'
};

export type PlayerResponse = (typeof PlayerResponse)[keyof typeof PlayerResponse]


export const TableName: {
  points: 'points',
  averages: 'averages',
  stalwart: 'stalwart',
  speedy: 'speedy',
  pub: 'pub'
};

export type TableName = (typeof TableName)[keyof typeof TableName]

}

export type TeamName = $Enums.TeamName

export const TeamName: typeof $Enums.TeamName

export type PlayerResponse = $Enums.PlayerResponse

export const PlayerResponse: typeof $Enums.PlayerResponse

export type TableName = $Enums.TableName

export const TableName: typeof $Enums.TableName

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Arses
 * const arses = await prisma.arse.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Arses
   * const arses = await prisma.arse.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): PrismaClient;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb<ClientOptions>, ExtArgs, $Utils.Call<Prisma.TypeMapCb<ClientOptions>, {
    extArgs: ExtArgs
  }>>

      /**
   * `prisma.arse`: Exposes CRUD operations for the **Arse** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Arses
    * const arses = await prisma.arse.findMany()
    * ```
    */
  get arse(): Prisma.ArseDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.club`: Exposes CRUD operations for the **Club** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Clubs
    * const clubs = await prisma.club.findMany()
    * ```
    */
  get club(): Prisma.ClubDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.clubSupporter`: Exposes CRUD operations for the **ClubSupporter** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ClubSupporters
    * const clubSupporters = await prisma.clubSupporter.findMany()
    * ```
    */
  get clubSupporter(): Prisma.ClubSupporterDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.country`: Exposes CRUD operations for the **Country** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Countries
    * const countries = await prisma.country.findMany()
    * ```
    */
  get country(): Prisma.CountryDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.countrySupporter`: Exposes CRUD operations for the **CountrySupporter** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more CountrySupporters
    * const countrySupporters = await prisma.countrySupporter.findMany()
    * ```
    */
  get countrySupporter(): Prisma.CountrySupporterDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.diffs`: Exposes CRUD operations for the **Diffs** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Diffs
    * const diffs = await prisma.diffs.findMany()
    * ```
    */
  get diffs(): Prisma.DiffsDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.gameChat`: Exposes CRUD operations for the **GameChat** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more GameChats
    * const gameChats = await prisma.gameChat.findMany()
    * ```
    */
  get gameChat(): Prisma.GameChatDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.gameDay`: Exposes CRUD operations for the **GameDay** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more GameDays
    * const gameDays = await prisma.gameDay.findMany()
    * ```
    */
  get gameDay(): Prisma.GameDayDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.invitation`: Exposes CRUD operations for the **Invitation** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Invitations
    * const invitations = await prisma.invitation.findMany()
    * ```
    */
  get invitation(): Prisma.InvitationDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.outcome`: Exposes CRUD operations for the **Outcome** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Outcomes
    * const outcomes = await prisma.outcome.findMany()
    * ```
    */
  get outcome(): Prisma.OutcomeDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.picker`: Exposes CRUD operations for the **Picker** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Pickers
    * const pickers = await prisma.picker.findMany()
    * ```
    */
  get picker(): Prisma.PickerDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.pickerTeams`: Exposes CRUD operations for the **PickerTeams** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more PickerTeams
    * const pickerTeams = await prisma.pickerTeams.findMany()
    * ```
    */
  get pickerTeams(): Prisma.PickerTeamsDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.player`: Exposes CRUD operations for the **Player** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Players
    * const players = await prisma.player.findMany()
    * ```
    */
  get player(): Prisma.PlayerDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.playerRecord`: Exposes CRUD operations for the **PlayerRecord** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more PlayerRecords
    * const playerRecords = await prisma.playerRecord.findMany()
    * ```
    */
  get playerRecord(): Prisma.PlayerRecordDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.session`: Exposes CRUD operations for the **Session** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Sessions
    * const sessions = await prisma.session.findMany()
    * ```
    */
  get session(): Prisma.SessionDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.account`: Exposes CRUD operations for the **Account** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Accounts
    * const accounts = await prisma.account.findMany()
    * ```
    */
  get account(): Prisma.AccountDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.verification`: Exposes CRUD operations for the **Verification** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Verifications
    * const verifications = await prisma.verification.findMany()
    * ```
    */
  get verification(): Prisma.VerificationDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.6.0
   * Query Engine version: f676762280b54cd07c770017ed3711ddde35f37a
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Arse: 'Arse',
    Club: 'Club',
    ClubSupporter: 'ClubSupporter',
    Country: 'Country',
    CountrySupporter: 'CountrySupporter',
    Diffs: 'Diffs',
    GameChat: 'GameChat',
    GameDay: 'GameDay',
    Invitation: 'Invitation',
    Outcome: 'Outcome',
    Picker: 'Picker',
    PickerTeams: 'PickerTeams',
    Player: 'Player',
    PlayerRecord: 'PlayerRecord',
    User: 'User',
    Session: 'Session',
    Account: 'Account',
    Verification: 'Verification'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb<ClientOptions = {}> extends $Utils.Fn<{extArgs: $Extensions.InternalArgs }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
    globalOmitOptions: {
      omit: GlobalOmitOptions
    }
    meta: {
      modelProps: "arse" | "club" | "clubSupporter" | "country" | "countrySupporter" | "diffs" | "gameChat" | "gameDay" | "invitation" | "outcome" | "picker" | "pickerTeams" | "player" | "playerRecord" | "user" | "session" | "account" | "verification"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      Arse: {
        payload: Prisma.$ArsePayload<ExtArgs>
        fields: Prisma.ArseFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ArseFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ArsePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ArseFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ArsePayload>
          }
          findFirst: {
            args: Prisma.ArseFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ArsePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ArseFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ArsePayload>
          }
          findMany: {
            args: Prisma.ArseFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ArsePayload>[]
          }
          create: {
            args: Prisma.ArseCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ArsePayload>
          }
          createMany: {
            args: Prisma.ArseCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.ArseDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ArsePayload>
          }
          update: {
            args: Prisma.ArseUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ArsePayload>
          }
          deleteMany: {
            args: Prisma.ArseDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ArseUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ArseUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ArsePayload>
          }
          aggregate: {
            args: Prisma.ArseAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateArse>
          }
          groupBy: {
            args: Prisma.ArseGroupByArgs<ExtArgs>
            result: $Utils.Optional<ArseGroupByOutputType>[]
          }
          count: {
            args: Prisma.ArseCountArgs<ExtArgs>
            result: $Utils.Optional<ArseCountAggregateOutputType> | number
          }
        }
      }
      Club: {
        payload: Prisma.$ClubPayload<ExtArgs>
        fields: Prisma.ClubFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ClubFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClubPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ClubFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClubPayload>
          }
          findFirst: {
            args: Prisma.ClubFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClubPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ClubFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClubPayload>
          }
          findMany: {
            args: Prisma.ClubFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClubPayload>[]
          }
          create: {
            args: Prisma.ClubCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClubPayload>
          }
          createMany: {
            args: Prisma.ClubCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.ClubDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClubPayload>
          }
          update: {
            args: Prisma.ClubUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClubPayload>
          }
          deleteMany: {
            args: Prisma.ClubDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ClubUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ClubUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClubPayload>
          }
          aggregate: {
            args: Prisma.ClubAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateClub>
          }
          groupBy: {
            args: Prisma.ClubGroupByArgs<ExtArgs>
            result: $Utils.Optional<ClubGroupByOutputType>[]
          }
          count: {
            args: Prisma.ClubCountArgs<ExtArgs>
            result: $Utils.Optional<ClubCountAggregateOutputType> | number
          }
        }
      }
      ClubSupporter: {
        payload: Prisma.$ClubSupporterPayload<ExtArgs>
        fields: Prisma.ClubSupporterFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ClubSupporterFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClubSupporterPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ClubSupporterFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClubSupporterPayload>
          }
          findFirst: {
            args: Prisma.ClubSupporterFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClubSupporterPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ClubSupporterFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClubSupporterPayload>
          }
          findMany: {
            args: Prisma.ClubSupporterFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClubSupporterPayload>[]
          }
          create: {
            args: Prisma.ClubSupporterCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClubSupporterPayload>
          }
          createMany: {
            args: Prisma.ClubSupporterCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.ClubSupporterDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClubSupporterPayload>
          }
          update: {
            args: Prisma.ClubSupporterUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClubSupporterPayload>
          }
          deleteMany: {
            args: Prisma.ClubSupporterDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ClubSupporterUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ClubSupporterUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClubSupporterPayload>
          }
          aggregate: {
            args: Prisma.ClubSupporterAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateClubSupporter>
          }
          groupBy: {
            args: Prisma.ClubSupporterGroupByArgs<ExtArgs>
            result: $Utils.Optional<ClubSupporterGroupByOutputType>[]
          }
          count: {
            args: Prisma.ClubSupporterCountArgs<ExtArgs>
            result: $Utils.Optional<ClubSupporterCountAggregateOutputType> | number
          }
        }
      }
      Country: {
        payload: Prisma.$CountryPayload<ExtArgs>
        fields: Prisma.CountryFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CountryFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CountryPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CountryFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CountryPayload>
          }
          findFirst: {
            args: Prisma.CountryFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CountryPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CountryFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CountryPayload>
          }
          findMany: {
            args: Prisma.CountryFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CountryPayload>[]
          }
          create: {
            args: Prisma.CountryCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CountryPayload>
          }
          createMany: {
            args: Prisma.CountryCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.CountryDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CountryPayload>
          }
          update: {
            args: Prisma.CountryUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CountryPayload>
          }
          deleteMany: {
            args: Prisma.CountryDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CountryUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.CountryUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CountryPayload>
          }
          aggregate: {
            args: Prisma.CountryAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCountry>
          }
          groupBy: {
            args: Prisma.CountryGroupByArgs<ExtArgs>
            result: $Utils.Optional<CountryGroupByOutputType>[]
          }
          count: {
            args: Prisma.CountryCountArgs<ExtArgs>
            result: $Utils.Optional<CountryCountAggregateOutputType> | number
          }
        }
      }
      CountrySupporter: {
        payload: Prisma.$CountrySupporterPayload<ExtArgs>
        fields: Prisma.CountrySupporterFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CountrySupporterFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CountrySupporterPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CountrySupporterFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CountrySupporterPayload>
          }
          findFirst: {
            args: Prisma.CountrySupporterFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CountrySupporterPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CountrySupporterFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CountrySupporterPayload>
          }
          findMany: {
            args: Prisma.CountrySupporterFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CountrySupporterPayload>[]
          }
          create: {
            args: Prisma.CountrySupporterCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CountrySupporterPayload>
          }
          createMany: {
            args: Prisma.CountrySupporterCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.CountrySupporterDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CountrySupporterPayload>
          }
          update: {
            args: Prisma.CountrySupporterUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CountrySupporterPayload>
          }
          deleteMany: {
            args: Prisma.CountrySupporterDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CountrySupporterUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.CountrySupporterUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CountrySupporterPayload>
          }
          aggregate: {
            args: Prisma.CountrySupporterAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCountrySupporter>
          }
          groupBy: {
            args: Prisma.CountrySupporterGroupByArgs<ExtArgs>
            result: $Utils.Optional<CountrySupporterGroupByOutputType>[]
          }
          count: {
            args: Prisma.CountrySupporterCountArgs<ExtArgs>
            result: $Utils.Optional<CountrySupporterCountAggregateOutputType> | number
          }
        }
      }
      Diffs: {
        payload: Prisma.$DiffsPayload<ExtArgs>
        fields: Prisma.DiffsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.DiffsFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DiffsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.DiffsFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DiffsPayload>
          }
          findFirst: {
            args: Prisma.DiffsFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DiffsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.DiffsFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DiffsPayload>
          }
          findMany: {
            args: Prisma.DiffsFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DiffsPayload>[]
          }
          create: {
            args: Prisma.DiffsCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DiffsPayload>
          }
          createMany: {
            args: Prisma.DiffsCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.DiffsDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DiffsPayload>
          }
          update: {
            args: Prisma.DiffsUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DiffsPayload>
          }
          deleteMany: {
            args: Prisma.DiffsDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.DiffsUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.DiffsUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DiffsPayload>
          }
          aggregate: {
            args: Prisma.DiffsAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateDiffs>
          }
          groupBy: {
            args: Prisma.DiffsGroupByArgs<ExtArgs>
            result: $Utils.Optional<DiffsGroupByOutputType>[]
          }
          count: {
            args: Prisma.DiffsCountArgs<ExtArgs>
            result: $Utils.Optional<DiffsCountAggregateOutputType> | number
          }
        }
      }
      GameChat: {
        payload: Prisma.$GameChatPayload<ExtArgs>
        fields: Prisma.GameChatFieldRefs
        operations: {
          findUnique: {
            args: Prisma.GameChatFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GameChatPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.GameChatFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GameChatPayload>
          }
          findFirst: {
            args: Prisma.GameChatFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GameChatPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.GameChatFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GameChatPayload>
          }
          findMany: {
            args: Prisma.GameChatFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GameChatPayload>[]
          }
          create: {
            args: Prisma.GameChatCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GameChatPayload>
          }
          createMany: {
            args: Prisma.GameChatCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.GameChatDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GameChatPayload>
          }
          update: {
            args: Prisma.GameChatUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GameChatPayload>
          }
          deleteMany: {
            args: Prisma.GameChatDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.GameChatUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.GameChatUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GameChatPayload>
          }
          aggregate: {
            args: Prisma.GameChatAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateGameChat>
          }
          groupBy: {
            args: Prisma.GameChatGroupByArgs<ExtArgs>
            result: $Utils.Optional<GameChatGroupByOutputType>[]
          }
          count: {
            args: Prisma.GameChatCountArgs<ExtArgs>
            result: $Utils.Optional<GameChatCountAggregateOutputType> | number
          }
        }
      }
      GameDay: {
        payload: Prisma.$GameDayPayload<ExtArgs>
        fields: Prisma.GameDayFieldRefs
        operations: {
          findUnique: {
            args: Prisma.GameDayFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GameDayPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.GameDayFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GameDayPayload>
          }
          findFirst: {
            args: Prisma.GameDayFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GameDayPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.GameDayFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GameDayPayload>
          }
          findMany: {
            args: Prisma.GameDayFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GameDayPayload>[]
          }
          create: {
            args: Prisma.GameDayCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GameDayPayload>
          }
          createMany: {
            args: Prisma.GameDayCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.GameDayDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GameDayPayload>
          }
          update: {
            args: Prisma.GameDayUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GameDayPayload>
          }
          deleteMany: {
            args: Prisma.GameDayDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.GameDayUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.GameDayUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GameDayPayload>
          }
          aggregate: {
            args: Prisma.GameDayAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateGameDay>
          }
          groupBy: {
            args: Prisma.GameDayGroupByArgs<ExtArgs>
            result: $Utils.Optional<GameDayGroupByOutputType>[]
          }
          count: {
            args: Prisma.GameDayCountArgs<ExtArgs>
            result: $Utils.Optional<GameDayCountAggregateOutputType> | number
          }
        }
      }
      Invitation: {
        payload: Prisma.$InvitationPayload<ExtArgs>
        fields: Prisma.InvitationFieldRefs
        operations: {
          findUnique: {
            args: Prisma.InvitationFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InvitationPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.InvitationFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InvitationPayload>
          }
          findFirst: {
            args: Prisma.InvitationFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InvitationPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.InvitationFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InvitationPayload>
          }
          findMany: {
            args: Prisma.InvitationFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InvitationPayload>[]
          }
          create: {
            args: Prisma.InvitationCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InvitationPayload>
          }
          createMany: {
            args: Prisma.InvitationCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.InvitationDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InvitationPayload>
          }
          update: {
            args: Prisma.InvitationUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InvitationPayload>
          }
          deleteMany: {
            args: Prisma.InvitationDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.InvitationUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.InvitationUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InvitationPayload>
          }
          aggregate: {
            args: Prisma.InvitationAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateInvitation>
          }
          groupBy: {
            args: Prisma.InvitationGroupByArgs<ExtArgs>
            result: $Utils.Optional<InvitationGroupByOutputType>[]
          }
          count: {
            args: Prisma.InvitationCountArgs<ExtArgs>
            result: $Utils.Optional<InvitationCountAggregateOutputType> | number
          }
        }
      }
      Outcome: {
        payload: Prisma.$OutcomePayload<ExtArgs>
        fields: Prisma.OutcomeFieldRefs
        operations: {
          findUnique: {
            args: Prisma.OutcomeFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OutcomePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.OutcomeFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OutcomePayload>
          }
          findFirst: {
            args: Prisma.OutcomeFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OutcomePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.OutcomeFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OutcomePayload>
          }
          findMany: {
            args: Prisma.OutcomeFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OutcomePayload>[]
          }
          create: {
            args: Prisma.OutcomeCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OutcomePayload>
          }
          createMany: {
            args: Prisma.OutcomeCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.OutcomeDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OutcomePayload>
          }
          update: {
            args: Prisma.OutcomeUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OutcomePayload>
          }
          deleteMany: {
            args: Prisma.OutcomeDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.OutcomeUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.OutcomeUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OutcomePayload>
          }
          aggregate: {
            args: Prisma.OutcomeAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateOutcome>
          }
          groupBy: {
            args: Prisma.OutcomeGroupByArgs<ExtArgs>
            result: $Utils.Optional<OutcomeGroupByOutputType>[]
          }
          count: {
            args: Prisma.OutcomeCountArgs<ExtArgs>
            result: $Utils.Optional<OutcomeCountAggregateOutputType> | number
          }
        }
      }
      Picker: {
        payload: Prisma.$PickerPayload<ExtArgs>
        fields: Prisma.PickerFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PickerFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PickerPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PickerFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PickerPayload>
          }
          findFirst: {
            args: Prisma.PickerFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PickerPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PickerFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PickerPayload>
          }
          findMany: {
            args: Prisma.PickerFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PickerPayload>[]
          }
          create: {
            args: Prisma.PickerCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PickerPayload>
          }
          createMany: {
            args: Prisma.PickerCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.PickerDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PickerPayload>
          }
          update: {
            args: Prisma.PickerUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PickerPayload>
          }
          deleteMany: {
            args: Prisma.PickerDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PickerUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.PickerUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PickerPayload>
          }
          aggregate: {
            args: Prisma.PickerAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePicker>
          }
          groupBy: {
            args: Prisma.PickerGroupByArgs<ExtArgs>
            result: $Utils.Optional<PickerGroupByOutputType>[]
          }
          count: {
            args: Prisma.PickerCountArgs<ExtArgs>
            result: $Utils.Optional<PickerCountAggregateOutputType> | number
          }
        }
      }
      PickerTeams: {
        payload: Prisma.$PickerTeamsPayload<ExtArgs>
        fields: Prisma.PickerTeamsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PickerTeamsFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PickerTeamsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PickerTeamsFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PickerTeamsPayload>
          }
          findFirst: {
            args: Prisma.PickerTeamsFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PickerTeamsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PickerTeamsFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PickerTeamsPayload>
          }
          findMany: {
            args: Prisma.PickerTeamsFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PickerTeamsPayload>[]
          }
          create: {
            args: Prisma.PickerTeamsCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PickerTeamsPayload>
          }
          createMany: {
            args: Prisma.PickerTeamsCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.PickerTeamsDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PickerTeamsPayload>
          }
          update: {
            args: Prisma.PickerTeamsUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PickerTeamsPayload>
          }
          deleteMany: {
            args: Prisma.PickerTeamsDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PickerTeamsUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.PickerTeamsUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PickerTeamsPayload>
          }
          aggregate: {
            args: Prisma.PickerTeamsAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePickerTeams>
          }
          groupBy: {
            args: Prisma.PickerTeamsGroupByArgs<ExtArgs>
            result: $Utils.Optional<PickerTeamsGroupByOutputType>[]
          }
          count: {
            args: Prisma.PickerTeamsCountArgs<ExtArgs>
            result: $Utils.Optional<PickerTeamsCountAggregateOutputType> | number
          }
        }
      }
      Player: {
        payload: Prisma.$PlayerPayload<ExtArgs>
        fields: Prisma.PlayerFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PlayerFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlayerPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PlayerFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlayerPayload>
          }
          findFirst: {
            args: Prisma.PlayerFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlayerPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PlayerFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlayerPayload>
          }
          findMany: {
            args: Prisma.PlayerFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlayerPayload>[]
          }
          create: {
            args: Prisma.PlayerCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlayerPayload>
          }
          createMany: {
            args: Prisma.PlayerCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.PlayerDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlayerPayload>
          }
          update: {
            args: Prisma.PlayerUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlayerPayload>
          }
          deleteMany: {
            args: Prisma.PlayerDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PlayerUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.PlayerUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlayerPayload>
          }
          aggregate: {
            args: Prisma.PlayerAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePlayer>
          }
          groupBy: {
            args: Prisma.PlayerGroupByArgs<ExtArgs>
            result: $Utils.Optional<PlayerGroupByOutputType>[]
          }
          count: {
            args: Prisma.PlayerCountArgs<ExtArgs>
            result: $Utils.Optional<PlayerCountAggregateOutputType> | number
          }
        }
      }
      PlayerRecord: {
        payload: Prisma.$PlayerRecordPayload<ExtArgs>
        fields: Prisma.PlayerRecordFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PlayerRecordFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlayerRecordPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PlayerRecordFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlayerRecordPayload>
          }
          findFirst: {
            args: Prisma.PlayerRecordFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlayerRecordPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PlayerRecordFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlayerRecordPayload>
          }
          findMany: {
            args: Prisma.PlayerRecordFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlayerRecordPayload>[]
          }
          create: {
            args: Prisma.PlayerRecordCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlayerRecordPayload>
          }
          createMany: {
            args: Prisma.PlayerRecordCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.PlayerRecordDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlayerRecordPayload>
          }
          update: {
            args: Prisma.PlayerRecordUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlayerRecordPayload>
          }
          deleteMany: {
            args: Prisma.PlayerRecordDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PlayerRecordUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.PlayerRecordUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlayerRecordPayload>
          }
          aggregate: {
            args: Prisma.PlayerRecordAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePlayerRecord>
          }
          groupBy: {
            args: Prisma.PlayerRecordGroupByArgs<ExtArgs>
            result: $Utils.Optional<PlayerRecordGroupByOutputType>[]
          }
          count: {
            args: Prisma.PlayerRecordCountArgs<ExtArgs>
            result: $Utils.Optional<PlayerRecordCountAggregateOutputType> | number
          }
        }
      }
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      Session: {
        payload: Prisma.$SessionPayload<ExtArgs>
        fields: Prisma.SessionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SessionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SessionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          findFirst: {
            args: Prisma.SessionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SessionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          findMany: {
            args: Prisma.SessionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>[]
          }
          create: {
            args: Prisma.SessionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          createMany: {
            args: Prisma.SessionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.SessionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          update: {
            args: Prisma.SessionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          deleteMany: {
            args: Prisma.SessionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SessionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.SessionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          aggregate: {
            args: Prisma.SessionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSession>
          }
          groupBy: {
            args: Prisma.SessionGroupByArgs<ExtArgs>
            result: $Utils.Optional<SessionGroupByOutputType>[]
          }
          count: {
            args: Prisma.SessionCountArgs<ExtArgs>
            result: $Utils.Optional<SessionCountAggregateOutputType> | number
          }
        }
      }
      Account: {
        payload: Prisma.$AccountPayload<ExtArgs>
        fields: Prisma.AccountFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AccountFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AccountFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>
          }
          findFirst: {
            args: Prisma.AccountFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AccountFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>
          }
          findMany: {
            args: Prisma.AccountFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>[]
          }
          create: {
            args: Prisma.AccountCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>
          }
          createMany: {
            args: Prisma.AccountCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.AccountDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>
          }
          update: {
            args: Prisma.AccountUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>
          }
          deleteMany: {
            args: Prisma.AccountDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AccountUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.AccountUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>
          }
          aggregate: {
            args: Prisma.AccountAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAccount>
          }
          groupBy: {
            args: Prisma.AccountGroupByArgs<ExtArgs>
            result: $Utils.Optional<AccountGroupByOutputType>[]
          }
          count: {
            args: Prisma.AccountCountArgs<ExtArgs>
            result: $Utils.Optional<AccountCountAggregateOutputType> | number
          }
        }
      }
      Verification: {
        payload: Prisma.$VerificationPayload<ExtArgs>
        fields: Prisma.VerificationFieldRefs
        operations: {
          findUnique: {
            args: Prisma.VerificationFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.VerificationFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationPayload>
          }
          findFirst: {
            args: Prisma.VerificationFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.VerificationFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationPayload>
          }
          findMany: {
            args: Prisma.VerificationFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationPayload>[]
          }
          create: {
            args: Prisma.VerificationCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationPayload>
          }
          createMany: {
            args: Prisma.VerificationCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.VerificationDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationPayload>
          }
          update: {
            args: Prisma.VerificationUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationPayload>
          }
          deleteMany: {
            args: Prisma.VerificationDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.VerificationUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.VerificationUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationPayload>
          }
          aggregate: {
            args: Prisma.VerificationAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateVerification>
          }
          groupBy: {
            args: Prisma.VerificationGroupByArgs<ExtArgs>
            result: $Utils.Optional<VerificationGroupByOutputType>[]
          }
          count: {
            args: Prisma.VerificationCountArgs<ExtArgs>
            result: $Utils.Optional<VerificationCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    arse?: ArseOmit
    club?: ClubOmit
    clubSupporter?: ClubSupporterOmit
    country?: CountryOmit
    countrySupporter?: CountrySupporterOmit
    diffs?: DiffsOmit
    gameChat?: GameChatOmit
    gameDay?: GameDayOmit
    invitation?: InvitationOmit
    outcome?: OutcomeOmit
    picker?: PickerOmit
    pickerTeams?: PickerTeamsOmit
    player?: PlayerOmit
    playerRecord?: PlayerRecordOmit
    user?: UserOmit
    session?: SessionOmit
    account?: AccountOmit
    verification?: VerificationOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type ClubCountOutputType
   */

  export type ClubCountOutputType = {
    supporters: number
  }

  export type ClubCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    supporters?: boolean | ClubCountOutputTypeCountSupportersArgs
  }

  // Custom InputTypes
  /**
   * ClubCountOutputType without action
   */
  export type ClubCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClubCountOutputType
     */
    select?: ClubCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ClubCountOutputType without action
   */
  export type ClubCountOutputTypeCountSupportersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ClubSupporterWhereInput
  }


  /**
   * Count Type CountryCountOutputType
   */

  export type CountryCountOutputType = {
    supporters: number
  }

  export type CountryCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    supporters?: boolean | CountryCountOutputTypeCountSupportersArgs
  }

  // Custom InputTypes
  /**
   * CountryCountOutputType without action
   */
  export type CountryCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CountryCountOutputType
     */
    select?: CountryCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * CountryCountOutputType without action
   */
  export type CountryCountOutputTypeCountSupportersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CountrySupporterWhereInput
  }


  /**
   * Count Type GameDayCountOutputType
   */

  export type GameDayCountOutputType = {
    outcomes: number
    playerRecords: number
  }

  export type GameDayCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    outcomes?: boolean | GameDayCountOutputTypeCountOutcomesArgs
    playerRecords?: boolean | GameDayCountOutputTypeCountPlayerRecordsArgs
  }

  // Custom InputTypes
  /**
   * GameDayCountOutputType without action
   */
  export type GameDayCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameDayCountOutputType
     */
    select?: GameDayCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * GameDayCountOutputType without action
   */
  export type GameDayCountOutputTypeCountOutcomesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: OutcomeWhereInput
  }

  /**
   * GameDayCountOutputType without action
   */
  export type GameDayCountOutputTypeCountPlayerRecordsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PlayerRecordWhereInput
  }


  /**
   * Count Type PlayerCountOutputType
   */

  export type PlayerCountOutputType = {
    arsesOfPlayer: number
    arsesByPlayer: number
    clubs: number
    countries: number
    outcomes: number
    playerRecords: number
  }

  export type PlayerCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    arsesOfPlayer?: boolean | PlayerCountOutputTypeCountArsesOfPlayerArgs
    arsesByPlayer?: boolean | PlayerCountOutputTypeCountArsesByPlayerArgs
    clubs?: boolean | PlayerCountOutputTypeCountClubsArgs
    countries?: boolean | PlayerCountOutputTypeCountCountriesArgs
    outcomes?: boolean | PlayerCountOutputTypeCountOutcomesArgs
    playerRecords?: boolean | PlayerCountOutputTypeCountPlayerRecordsArgs
  }

  // Custom InputTypes
  /**
   * PlayerCountOutputType without action
   */
  export type PlayerCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlayerCountOutputType
     */
    select?: PlayerCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * PlayerCountOutputType without action
   */
  export type PlayerCountOutputTypeCountArsesOfPlayerArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ArseWhereInput
  }

  /**
   * PlayerCountOutputType without action
   */
  export type PlayerCountOutputTypeCountArsesByPlayerArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ArseWhereInput
  }

  /**
   * PlayerCountOutputType without action
   */
  export type PlayerCountOutputTypeCountClubsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ClubSupporterWhereInput
  }

  /**
   * PlayerCountOutputType without action
   */
  export type PlayerCountOutputTypeCountCountriesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CountrySupporterWhereInput
  }

  /**
   * PlayerCountOutputType without action
   */
  export type PlayerCountOutputTypeCountOutcomesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: OutcomeWhereInput
  }

  /**
   * PlayerCountOutputType without action
   */
  export type PlayerCountOutputTypeCountPlayerRecordsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PlayerRecordWhereInput
  }


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    sessions: number
    accounts: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    sessions?: boolean | UserCountOutputTypeCountSessionsArgs
    accounts?: boolean | UserCountOutputTypeCountAccountsArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountSessionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SessionWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountAccountsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AccountWhereInput
  }


  /**
   * Models
   */

  /**
   * Model Arse
   */

  export type AggregateArse = {
    _count: ArseCountAggregateOutputType | null
    _avg: ArseAvgAggregateOutputType | null
    _sum: ArseSumAggregateOutputType | null
    _min: ArseMinAggregateOutputType | null
    _max: ArseMaxAggregateOutputType | null
  }

  export type ArseAvgAggregateOutputType = {
    id: number | null
    inGoal: number | null
    running: number | null
    shooting: number | null
    passing: number | null
    ballSkill: number | null
    attacking: number | null
    defending: number | null
    playerId: number | null
    raterId: number | null
  }

  export type ArseSumAggregateOutputType = {
    id: number | null
    inGoal: number | null
    running: number | null
    shooting: number | null
    passing: number | null
    ballSkill: number | null
    attacking: number | null
    defending: number | null
    playerId: number | null
    raterId: number | null
  }

  export type ArseMinAggregateOutputType = {
    id: number | null
    stamp: Date | null
    inGoal: number | null
    running: number | null
    shooting: number | null
    passing: number | null
    ballSkill: number | null
    attacking: number | null
    defending: number | null
    playerId: number | null
    raterId: number | null
  }

  export type ArseMaxAggregateOutputType = {
    id: number | null
    stamp: Date | null
    inGoal: number | null
    running: number | null
    shooting: number | null
    passing: number | null
    ballSkill: number | null
    attacking: number | null
    defending: number | null
    playerId: number | null
    raterId: number | null
  }

  export type ArseCountAggregateOutputType = {
    id: number
    stamp: number
    inGoal: number
    running: number
    shooting: number
    passing: number
    ballSkill: number
    attacking: number
    defending: number
    playerId: number
    raterId: number
    _all: number
  }


  export type ArseAvgAggregateInputType = {
    id?: true
    inGoal?: true
    running?: true
    shooting?: true
    passing?: true
    ballSkill?: true
    attacking?: true
    defending?: true
    playerId?: true
    raterId?: true
  }

  export type ArseSumAggregateInputType = {
    id?: true
    inGoal?: true
    running?: true
    shooting?: true
    passing?: true
    ballSkill?: true
    attacking?: true
    defending?: true
    playerId?: true
    raterId?: true
  }

  export type ArseMinAggregateInputType = {
    id?: true
    stamp?: true
    inGoal?: true
    running?: true
    shooting?: true
    passing?: true
    ballSkill?: true
    attacking?: true
    defending?: true
    playerId?: true
    raterId?: true
  }

  export type ArseMaxAggregateInputType = {
    id?: true
    stamp?: true
    inGoal?: true
    running?: true
    shooting?: true
    passing?: true
    ballSkill?: true
    attacking?: true
    defending?: true
    playerId?: true
    raterId?: true
  }

  export type ArseCountAggregateInputType = {
    id?: true
    stamp?: true
    inGoal?: true
    running?: true
    shooting?: true
    passing?: true
    ballSkill?: true
    attacking?: true
    defending?: true
    playerId?: true
    raterId?: true
    _all?: true
  }

  export type ArseAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Arse to aggregate.
     */
    where?: ArseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Arses to fetch.
     */
    orderBy?: ArseOrderByWithRelationInput | ArseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ArseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Arses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Arses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Arses
    **/
    _count?: true | ArseCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ArseAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ArseSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ArseMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ArseMaxAggregateInputType
  }

  export type GetArseAggregateType<T extends ArseAggregateArgs> = {
        [P in keyof T & keyof AggregateArse]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateArse[P]>
      : GetScalarType<T[P], AggregateArse[P]>
  }




  export type ArseGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ArseWhereInput
    orderBy?: ArseOrderByWithAggregationInput | ArseOrderByWithAggregationInput[]
    by: ArseScalarFieldEnum[] | ArseScalarFieldEnum
    having?: ArseScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ArseCountAggregateInputType | true
    _avg?: ArseAvgAggregateInputType
    _sum?: ArseSumAggregateInputType
    _min?: ArseMinAggregateInputType
    _max?: ArseMaxAggregateInputType
  }

  export type ArseGroupByOutputType = {
    id: number
    stamp: Date
    inGoal: number | null
    running: number | null
    shooting: number | null
    passing: number | null
    ballSkill: number | null
    attacking: number | null
    defending: number | null
    playerId: number
    raterId: number
    _count: ArseCountAggregateOutputType | null
    _avg: ArseAvgAggregateOutputType | null
    _sum: ArseSumAggregateOutputType | null
    _min: ArseMinAggregateOutputType | null
    _max: ArseMaxAggregateOutputType | null
  }

  type GetArseGroupByPayload<T extends ArseGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ArseGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ArseGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ArseGroupByOutputType[P]>
            : GetScalarType<T[P], ArseGroupByOutputType[P]>
        }
      >
    >


  export type ArseSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    stamp?: boolean
    inGoal?: boolean
    running?: boolean
    shooting?: boolean
    passing?: boolean
    ballSkill?: boolean
    attacking?: boolean
    defending?: boolean
    playerId?: boolean
    raterId?: boolean
    player?: boolean | PlayerDefaultArgs<ExtArgs>
    rater?: boolean | PlayerDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["arse"]>



  export type ArseSelectScalar = {
    id?: boolean
    stamp?: boolean
    inGoal?: boolean
    running?: boolean
    shooting?: boolean
    passing?: boolean
    ballSkill?: boolean
    attacking?: boolean
    defending?: boolean
    playerId?: boolean
    raterId?: boolean
  }

  export type ArseOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "stamp" | "inGoal" | "running" | "shooting" | "passing" | "ballSkill" | "attacking" | "defending" | "playerId" | "raterId", ExtArgs["result"]["arse"]>
  export type ArseInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    player?: boolean | PlayerDefaultArgs<ExtArgs>
    rater?: boolean | PlayerDefaultArgs<ExtArgs>
  }

  export type $ArsePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Arse"
    objects: {
      player: Prisma.$PlayerPayload<ExtArgs>
      rater: Prisma.$PlayerPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      stamp: Date
      inGoal: number | null
      running: number | null
      shooting: number | null
      passing: number | null
      ballSkill: number | null
      attacking: number | null
      defending: number | null
      playerId: number
      raterId: number
    }, ExtArgs["result"]["arse"]>
    composites: {}
  }

  type ArseGetPayload<S extends boolean | null | undefined | ArseDefaultArgs> = $Result.GetResult<Prisma.$ArsePayload, S>

  type ArseCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ArseFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ArseCountAggregateInputType | true
    }

  export interface ArseDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Arse'], meta: { name: 'Arse' } }
    /**
     * Find zero or one Arse that matches the filter.
     * @param {ArseFindUniqueArgs} args - Arguments to find a Arse
     * @example
     * // Get one Arse
     * const arse = await prisma.arse.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ArseFindUniqueArgs>(args: SelectSubset<T, ArseFindUniqueArgs<ExtArgs>>): Prisma__ArseClient<$Result.GetResult<Prisma.$ArsePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Arse that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ArseFindUniqueOrThrowArgs} args - Arguments to find a Arse
     * @example
     * // Get one Arse
     * const arse = await prisma.arse.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ArseFindUniqueOrThrowArgs>(args: SelectSubset<T, ArseFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ArseClient<$Result.GetResult<Prisma.$ArsePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Arse that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ArseFindFirstArgs} args - Arguments to find a Arse
     * @example
     * // Get one Arse
     * const arse = await prisma.arse.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ArseFindFirstArgs>(args?: SelectSubset<T, ArseFindFirstArgs<ExtArgs>>): Prisma__ArseClient<$Result.GetResult<Prisma.$ArsePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Arse that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ArseFindFirstOrThrowArgs} args - Arguments to find a Arse
     * @example
     * // Get one Arse
     * const arse = await prisma.arse.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ArseFindFirstOrThrowArgs>(args?: SelectSubset<T, ArseFindFirstOrThrowArgs<ExtArgs>>): Prisma__ArseClient<$Result.GetResult<Prisma.$ArsePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Arses that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ArseFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Arses
     * const arses = await prisma.arse.findMany()
     * 
     * // Get first 10 Arses
     * const arses = await prisma.arse.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const arseWithIdOnly = await prisma.arse.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ArseFindManyArgs>(args?: SelectSubset<T, ArseFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ArsePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Arse.
     * @param {ArseCreateArgs} args - Arguments to create a Arse.
     * @example
     * // Create one Arse
     * const Arse = await prisma.arse.create({
     *   data: {
     *     // ... data to create a Arse
     *   }
     * })
     * 
     */
    create<T extends ArseCreateArgs>(args: SelectSubset<T, ArseCreateArgs<ExtArgs>>): Prisma__ArseClient<$Result.GetResult<Prisma.$ArsePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Arses.
     * @param {ArseCreateManyArgs} args - Arguments to create many Arses.
     * @example
     * // Create many Arses
     * const arse = await prisma.arse.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ArseCreateManyArgs>(args?: SelectSubset<T, ArseCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Arse.
     * @param {ArseDeleteArgs} args - Arguments to delete one Arse.
     * @example
     * // Delete one Arse
     * const Arse = await prisma.arse.delete({
     *   where: {
     *     // ... filter to delete one Arse
     *   }
     * })
     * 
     */
    delete<T extends ArseDeleteArgs>(args: SelectSubset<T, ArseDeleteArgs<ExtArgs>>): Prisma__ArseClient<$Result.GetResult<Prisma.$ArsePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Arse.
     * @param {ArseUpdateArgs} args - Arguments to update one Arse.
     * @example
     * // Update one Arse
     * const arse = await prisma.arse.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ArseUpdateArgs>(args: SelectSubset<T, ArseUpdateArgs<ExtArgs>>): Prisma__ArseClient<$Result.GetResult<Prisma.$ArsePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Arses.
     * @param {ArseDeleteManyArgs} args - Arguments to filter Arses to delete.
     * @example
     * // Delete a few Arses
     * const { count } = await prisma.arse.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ArseDeleteManyArgs>(args?: SelectSubset<T, ArseDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Arses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ArseUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Arses
     * const arse = await prisma.arse.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ArseUpdateManyArgs>(args: SelectSubset<T, ArseUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Arse.
     * @param {ArseUpsertArgs} args - Arguments to update or create a Arse.
     * @example
     * // Update or create a Arse
     * const arse = await prisma.arse.upsert({
     *   create: {
     *     // ... data to create a Arse
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Arse we want to update
     *   }
     * })
     */
    upsert<T extends ArseUpsertArgs>(args: SelectSubset<T, ArseUpsertArgs<ExtArgs>>): Prisma__ArseClient<$Result.GetResult<Prisma.$ArsePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Arses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ArseCountArgs} args - Arguments to filter Arses to count.
     * @example
     * // Count the number of Arses
     * const count = await prisma.arse.count({
     *   where: {
     *     // ... the filter for the Arses we want to count
     *   }
     * })
    **/
    count<T extends ArseCountArgs>(
      args?: Subset<T, ArseCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ArseCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Arse.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ArseAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ArseAggregateArgs>(args: Subset<T, ArseAggregateArgs>): Prisma.PrismaPromise<GetArseAggregateType<T>>

    /**
     * Group by Arse.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ArseGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ArseGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ArseGroupByArgs['orderBy'] }
        : { orderBy?: ArseGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ArseGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetArseGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Arse model
   */
  readonly fields: ArseFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Arse.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ArseClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    player<T extends PlayerDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PlayerDefaultArgs<ExtArgs>>): Prisma__PlayerClient<$Result.GetResult<Prisma.$PlayerPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    rater<T extends PlayerDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PlayerDefaultArgs<ExtArgs>>): Prisma__PlayerClient<$Result.GetResult<Prisma.$PlayerPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Arse model
   */
  interface ArseFieldRefs {
    readonly id: FieldRef<"Arse", 'Int'>
    readonly stamp: FieldRef<"Arse", 'DateTime'>
    readonly inGoal: FieldRef<"Arse", 'Int'>
    readonly running: FieldRef<"Arse", 'Int'>
    readonly shooting: FieldRef<"Arse", 'Int'>
    readonly passing: FieldRef<"Arse", 'Int'>
    readonly ballSkill: FieldRef<"Arse", 'Int'>
    readonly attacking: FieldRef<"Arse", 'Int'>
    readonly defending: FieldRef<"Arse", 'Int'>
    readonly playerId: FieldRef<"Arse", 'Int'>
    readonly raterId: FieldRef<"Arse", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Arse findUnique
   */
  export type ArseFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Arse
     */
    select?: ArseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Arse
     */
    omit?: ArseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ArseInclude<ExtArgs> | null
    /**
     * Filter, which Arse to fetch.
     */
    where: ArseWhereUniqueInput
  }

  /**
   * Arse findUniqueOrThrow
   */
  export type ArseFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Arse
     */
    select?: ArseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Arse
     */
    omit?: ArseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ArseInclude<ExtArgs> | null
    /**
     * Filter, which Arse to fetch.
     */
    where: ArseWhereUniqueInput
  }

  /**
   * Arse findFirst
   */
  export type ArseFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Arse
     */
    select?: ArseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Arse
     */
    omit?: ArseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ArseInclude<ExtArgs> | null
    /**
     * Filter, which Arse to fetch.
     */
    where?: ArseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Arses to fetch.
     */
    orderBy?: ArseOrderByWithRelationInput | ArseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Arses.
     */
    cursor?: ArseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Arses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Arses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Arses.
     */
    distinct?: ArseScalarFieldEnum | ArseScalarFieldEnum[]
  }

  /**
   * Arse findFirstOrThrow
   */
  export type ArseFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Arse
     */
    select?: ArseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Arse
     */
    omit?: ArseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ArseInclude<ExtArgs> | null
    /**
     * Filter, which Arse to fetch.
     */
    where?: ArseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Arses to fetch.
     */
    orderBy?: ArseOrderByWithRelationInput | ArseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Arses.
     */
    cursor?: ArseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Arses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Arses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Arses.
     */
    distinct?: ArseScalarFieldEnum | ArseScalarFieldEnum[]
  }

  /**
   * Arse findMany
   */
  export type ArseFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Arse
     */
    select?: ArseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Arse
     */
    omit?: ArseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ArseInclude<ExtArgs> | null
    /**
     * Filter, which Arses to fetch.
     */
    where?: ArseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Arses to fetch.
     */
    orderBy?: ArseOrderByWithRelationInput | ArseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Arses.
     */
    cursor?: ArseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Arses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Arses.
     */
    skip?: number
    distinct?: ArseScalarFieldEnum | ArseScalarFieldEnum[]
  }

  /**
   * Arse create
   */
  export type ArseCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Arse
     */
    select?: ArseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Arse
     */
    omit?: ArseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ArseInclude<ExtArgs> | null
    /**
     * The data needed to create a Arse.
     */
    data: XOR<ArseCreateInput, ArseUncheckedCreateInput>
  }

  /**
   * Arse createMany
   */
  export type ArseCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Arses.
     */
    data: ArseCreateManyInput | ArseCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Arse update
   */
  export type ArseUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Arse
     */
    select?: ArseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Arse
     */
    omit?: ArseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ArseInclude<ExtArgs> | null
    /**
     * The data needed to update a Arse.
     */
    data: XOR<ArseUpdateInput, ArseUncheckedUpdateInput>
    /**
     * Choose, which Arse to update.
     */
    where: ArseWhereUniqueInput
  }

  /**
   * Arse updateMany
   */
  export type ArseUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Arses.
     */
    data: XOR<ArseUpdateManyMutationInput, ArseUncheckedUpdateManyInput>
    /**
     * Filter which Arses to update
     */
    where?: ArseWhereInput
    /**
     * Limit how many Arses to update.
     */
    limit?: number
  }

  /**
   * Arse upsert
   */
  export type ArseUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Arse
     */
    select?: ArseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Arse
     */
    omit?: ArseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ArseInclude<ExtArgs> | null
    /**
     * The filter to search for the Arse to update in case it exists.
     */
    where: ArseWhereUniqueInput
    /**
     * In case the Arse found by the `where` argument doesn't exist, create a new Arse with this data.
     */
    create: XOR<ArseCreateInput, ArseUncheckedCreateInput>
    /**
     * In case the Arse was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ArseUpdateInput, ArseUncheckedUpdateInput>
  }

  /**
   * Arse delete
   */
  export type ArseDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Arse
     */
    select?: ArseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Arse
     */
    omit?: ArseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ArseInclude<ExtArgs> | null
    /**
     * Filter which Arse to delete.
     */
    where: ArseWhereUniqueInput
  }

  /**
   * Arse deleteMany
   */
  export type ArseDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Arses to delete
     */
    where?: ArseWhereInput
    /**
     * Limit how many Arses to delete.
     */
    limit?: number
  }

  /**
   * Arse without action
   */
  export type ArseDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Arse
     */
    select?: ArseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Arse
     */
    omit?: ArseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ArseInclude<ExtArgs> | null
  }


  /**
   * Model Club
   */

  export type AggregateClub = {
    _count: ClubCountAggregateOutputType | null
    _avg: ClubAvgAggregateOutputType | null
    _sum: ClubSumAggregateOutputType | null
    _min: ClubMinAggregateOutputType | null
    _max: ClubMaxAggregateOutputType | null
  }

  export type ClubAvgAggregateOutputType = {
    id: number | null
    soccerwayId: number | null
  }

  export type ClubSumAggregateOutputType = {
    id: number | null
    soccerwayId: number | null
  }

  export type ClubMinAggregateOutputType = {
    id: number | null
    soccerwayId: number | null
    clubName: string | null
    uri: string | null
    country: string | null
  }

  export type ClubMaxAggregateOutputType = {
    id: number | null
    soccerwayId: number | null
    clubName: string | null
    uri: string | null
    country: string | null
  }

  export type ClubCountAggregateOutputType = {
    id: number
    soccerwayId: number
    clubName: number
    uri: number
    country: number
    _all: number
  }


  export type ClubAvgAggregateInputType = {
    id?: true
    soccerwayId?: true
  }

  export type ClubSumAggregateInputType = {
    id?: true
    soccerwayId?: true
  }

  export type ClubMinAggregateInputType = {
    id?: true
    soccerwayId?: true
    clubName?: true
    uri?: true
    country?: true
  }

  export type ClubMaxAggregateInputType = {
    id?: true
    soccerwayId?: true
    clubName?: true
    uri?: true
    country?: true
  }

  export type ClubCountAggregateInputType = {
    id?: true
    soccerwayId?: true
    clubName?: true
    uri?: true
    country?: true
    _all?: true
  }

  export type ClubAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Club to aggregate.
     */
    where?: ClubWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Clubs to fetch.
     */
    orderBy?: ClubOrderByWithRelationInput | ClubOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ClubWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Clubs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Clubs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Clubs
    **/
    _count?: true | ClubCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ClubAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ClubSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ClubMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ClubMaxAggregateInputType
  }

  export type GetClubAggregateType<T extends ClubAggregateArgs> = {
        [P in keyof T & keyof AggregateClub]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateClub[P]>
      : GetScalarType<T[P], AggregateClub[P]>
  }




  export type ClubGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ClubWhereInput
    orderBy?: ClubOrderByWithAggregationInput | ClubOrderByWithAggregationInput[]
    by: ClubScalarFieldEnum[] | ClubScalarFieldEnum
    having?: ClubScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ClubCountAggregateInputType | true
    _avg?: ClubAvgAggregateInputType
    _sum?: ClubSumAggregateInputType
    _min?: ClubMinAggregateInputType
    _max?: ClubMaxAggregateInputType
  }

  export type ClubGroupByOutputType = {
    id: number
    soccerwayId: number | null
    clubName: string
    uri: string | null
    country: string | null
    _count: ClubCountAggregateOutputType | null
    _avg: ClubAvgAggregateOutputType | null
    _sum: ClubSumAggregateOutputType | null
    _min: ClubMinAggregateOutputType | null
    _max: ClubMaxAggregateOutputType | null
  }

  type GetClubGroupByPayload<T extends ClubGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ClubGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ClubGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ClubGroupByOutputType[P]>
            : GetScalarType<T[P], ClubGroupByOutputType[P]>
        }
      >
    >


  export type ClubSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    soccerwayId?: boolean
    clubName?: boolean
    uri?: boolean
    country?: boolean
    supporters?: boolean | Club$supportersArgs<ExtArgs>
    _count?: boolean | ClubCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["club"]>



  export type ClubSelectScalar = {
    id?: boolean
    soccerwayId?: boolean
    clubName?: boolean
    uri?: boolean
    country?: boolean
  }

  export type ClubOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "soccerwayId" | "clubName" | "uri" | "country", ExtArgs["result"]["club"]>
  export type ClubInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    supporters?: boolean | Club$supportersArgs<ExtArgs>
    _count?: boolean | ClubCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $ClubPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Club"
    objects: {
      supporters: Prisma.$ClubSupporterPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      soccerwayId: number | null
      clubName: string
      uri: string | null
      country: string | null
    }, ExtArgs["result"]["club"]>
    composites: {}
  }

  type ClubGetPayload<S extends boolean | null | undefined | ClubDefaultArgs> = $Result.GetResult<Prisma.$ClubPayload, S>

  type ClubCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ClubFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ClubCountAggregateInputType | true
    }

  export interface ClubDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Club'], meta: { name: 'Club' } }
    /**
     * Find zero or one Club that matches the filter.
     * @param {ClubFindUniqueArgs} args - Arguments to find a Club
     * @example
     * // Get one Club
     * const club = await prisma.club.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ClubFindUniqueArgs>(args: SelectSubset<T, ClubFindUniqueArgs<ExtArgs>>): Prisma__ClubClient<$Result.GetResult<Prisma.$ClubPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Club that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ClubFindUniqueOrThrowArgs} args - Arguments to find a Club
     * @example
     * // Get one Club
     * const club = await prisma.club.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ClubFindUniqueOrThrowArgs>(args: SelectSubset<T, ClubFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ClubClient<$Result.GetResult<Prisma.$ClubPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Club that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClubFindFirstArgs} args - Arguments to find a Club
     * @example
     * // Get one Club
     * const club = await prisma.club.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ClubFindFirstArgs>(args?: SelectSubset<T, ClubFindFirstArgs<ExtArgs>>): Prisma__ClubClient<$Result.GetResult<Prisma.$ClubPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Club that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClubFindFirstOrThrowArgs} args - Arguments to find a Club
     * @example
     * // Get one Club
     * const club = await prisma.club.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ClubFindFirstOrThrowArgs>(args?: SelectSubset<T, ClubFindFirstOrThrowArgs<ExtArgs>>): Prisma__ClubClient<$Result.GetResult<Prisma.$ClubPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Clubs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClubFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Clubs
     * const clubs = await prisma.club.findMany()
     * 
     * // Get first 10 Clubs
     * const clubs = await prisma.club.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const clubWithIdOnly = await prisma.club.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ClubFindManyArgs>(args?: SelectSubset<T, ClubFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ClubPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Club.
     * @param {ClubCreateArgs} args - Arguments to create a Club.
     * @example
     * // Create one Club
     * const Club = await prisma.club.create({
     *   data: {
     *     // ... data to create a Club
     *   }
     * })
     * 
     */
    create<T extends ClubCreateArgs>(args: SelectSubset<T, ClubCreateArgs<ExtArgs>>): Prisma__ClubClient<$Result.GetResult<Prisma.$ClubPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Clubs.
     * @param {ClubCreateManyArgs} args - Arguments to create many Clubs.
     * @example
     * // Create many Clubs
     * const club = await prisma.club.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ClubCreateManyArgs>(args?: SelectSubset<T, ClubCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Club.
     * @param {ClubDeleteArgs} args - Arguments to delete one Club.
     * @example
     * // Delete one Club
     * const Club = await prisma.club.delete({
     *   where: {
     *     // ... filter to delete one Club
     *   }
     * })
     * 
     */
    delete<T extends ClubDeleteArgs>(args: SelectSubset<T, ClubDeleteArgs<ExtArgs>>): Prisma__ClubClient<$Result.GetResult<Prisma.$ClubPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Club.
     * @param {ClubUpdateArgs} args - Arguments to update one Club.
     * @example
     * // Update one Club
     * const club = await prisma.club.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ClubUpdateArgs>(args: SelectSubset<T, ClubUpdateArgs<ExtArgs>>): Prisma__ClubClient<$Result.GetResult<Prisma.$ClubPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Clubs.
     * @param {ClubDeleteManyArgs} args - Arguments to filter Clubs to delete.
     * @example
     * // Delete a few Clubs
     * const { count } = await prisma.club.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ClubDeleteManyArgs>(args?: SelectSubset<T, ClubDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Clubs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClubUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Clubs
     * const club = await prisma.club.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ClubUpdateManyArgs>(args: SelectSubset<T, ClubUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Club.
     * @param {ClubUpsertArgs} args - Arguments to update or create a Club.
     * @example
     * // Update or create a Club
     * const club = await prisma.club.upsert({
     *   create: {
     *     // ... data to create a Club
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Club we want to update
     *   }
     * })
     */
    upsert<T extends ClubUpsertArgs>(args: SelectSubset<T, ClubUpsertArgs<ExtArgs>>): Prisma__ClubClient<$Result.GetResult<Prisma.$ClubPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Clubs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClubCountArgs} args - Arguments to filter Clubs to count.
     * @example
     * // Count the number of Clubs
     * const count = await prisma.club.count({
     *   where: {
     *     // ... the filter for the Clubs we want to count
     *   }
     * })
    **/
    count<T extends ClubCountArgs>(
      args?: Subset<T, ClubCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ClubCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Club.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClubAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ClubAggregateArgs>(args: Subset<T, ClubAggregateArgs>): Prisma.PrismaPromise<GetClubAggregateType<T>>

    /**
     * Group by Club.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClubGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ClubGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ClubGroupByArgs['orderBy'] }
        : { orderBy?: ClubGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ClubGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetClubGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Club model
   */
  readonly fields: ClubFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Club.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ClubClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    supporters<T extends Club$supportersArgs<ExtArgs> = {}>(args?: Subset<T, Club$supportersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ClubSupporterPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Club model
   */
  interface ClubFieldRefs {
    readonly id: FieldRef<"Club", 'Int'>
    readonly soccerwayId: FieldRef<"Club", 'Int'>
    readonly clubName: FieldRef<"Club", 'String'>
    readonly uri: FieldRef<"Club", 'String'>
    readonly country: FieldRef<"Club", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Club findUnique
   */
  export type ClubFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Club
     */
    select?: ClubSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Club
     */
    omit?: ClubOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClubInclude<ExtArgs> | null
    /**
     * Filter, which Club to fetch.
     */
    where: ClubWhereUniqueInput
  }

  /**
   * Club findUniqueOrThrow
   */
  export type ClubFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Club
     */
    select?: ClubSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Club
     */
    omit?: ClubOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClubInclude<ExtArgs> | null
    /**
     * Filter, which Club to fetch.
     */
    where: ClubWhereUniqueInput
  }

  /**
   * Club findFirst
   */
  export type ClubFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Club
     */
    select?: ClubSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Club
     */
    omit?: ClubOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClubInclude<ExtArgs> | null
    /**
     * Filter, which Club to fetch.
     */
    where?: ClubWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Clubs to fetch.
     */
    orderBy?: ClubOrderByWithRelationInput | ClubOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Clubs.
     */
    cursor?: ClubWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Clubs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Clubs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Clubs.
     */
    distinct?: ClubScalarFieldEnum | ClubScalarFieldEnum[]
  }

  /**
   * Club findFirstOrThrow
   */
  export type ClubFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Club
     */
    select?: ClubSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Club
     */
    omit?: ClubOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClubInclude<ExtArgs> | null
    /**
     * Filter, which Club to fetch.
     */
    where?: ClubWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Clubs to fetch.
     */
    orderBy?: ClubOrderByWithRelationInput | ClubOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Clubs.
     */
    cursor?: ClubWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Clubs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Clubs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Clubs.
     */
    distinct?: ClubScalarFieldEnum | ClubScalarFieldEnum[]
  }

  /**
   * Club findMany
   */
  export type ClubFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Club
     */
    select?: ClubSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Club
     */
    omit?: ClubOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClubInclude<ExtArgs> | null
    /**
     * Filter, which Clubs to fetch.
     */
    where?: ClubWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Clubs to fetch.
     */
    orderBy?: ClubOrderByWithRelationInput | ClubOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Clubs.
     */
    cursor?: ClubWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Clubs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Clubs.
     */
    skip?: number
    distinct?: ClubScalarFieldEnum | ClubScalarFieldEnum[]
  }

  /**
   * Club create
   */
  export type ClubCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Club
     */
    select?: ClubSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Club
     */
    omit?: ClubOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClubInclude<ExtArgs> | null
    /**
     * The data needed to create a Club.
     */
    data: XOR<ClubCreateInput, ClubUncheckedCreateInput>
  }

  /**
   * Club createMany
   */
  export type ClubCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Clubs.
     */
    data: ClubCreateManyInput | ClubCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Club update
   */
  export type ClubUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Club
     */
    select?: ClubSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Club
     */
    omit?: ClubOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClubInclude<ExtArgs> | null
    /**
     * The data needed to update a Club.
     */
    data: XOR<ClubUpdateInput, ClubUncheckedUpdateInput>
    /**
     * Choose, which Club to update.
     */
    where: ClubWhereUniqueInput
  }

  /**
   * Club updateMany
   */
  export type ClubUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Clubs.
     */
    data: XOR<ClubUpdateManyMutationInput, ClubUncheckedUpdateManyInput>
    /**
     * Filter which Clubs to update
     */
    where?: ClubWhereInput
    /**
     * Limit how many Clubs to update.
     */
    limit?: number
  }

  /**
   * Club upsert
   */
  export type ClubUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Club
     */
    select?: ClubSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Club
     */
    omit?: ClubOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClubInclude<ExtArgs> | null
    /**
     * The filter to search for the Club to update in case it exists.
     */
    where: ClubWhereUniqueInput
    /**
     * In case the Club found by the `where` argument doesn't exist, create a new Club with this data.
     */
    create: XOR<ClubCreateInput, ClubUncheckedCreateInput>
    /**
     * In case the Club was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ClubUpdateInput, ClubUncheckedUpdateInput>
  }

  /**
   * Club delete
   */
  export type ClubDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Club
     */
    select?: ClubSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Club
     */
    omit?: ClubOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClubInclude<ExtArgs> | null
    /**
     * Filter which Club to delete.
     */
    where: ClubWhereUniqueInput
  }

  /**
   * Club deleteMany
   */
  export type ClubDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Clubs to delete
     */
    where?: ClubWhereInput
    /**
     * Limit how many Clubs to delete.
     */
    limit?: number
  }

  /**
   * Club.supporters
   */
  export type Club$supportersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClubSupporter
     */
    select?: ClubSupporterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ClubSupporter
     */
    omit?: ClubSupporterOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClubSupporterInclude<ExtArgs> | null
    where?: ClubSupporterWhereInput
    orderBy?: ClubSupporterOrderByWithRelationInput | ClubSupporterOrderByWithRelationInput[]
    cursor?: ClubSupporterWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ClubSupporterScalarFieldEnum | ClubSupporterScalarFieldEnum[]
  }

  /**
   * Club without action
   */
  export type ClubDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Club
     */
    select?: ClubSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Club
     */
    omit?: ClubOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClubInclude<ExtArgs> | null
  }


  /**
   * Model ClubSupporter
   */

  export type AggregateClubSupporter = {
    _count: ClubSupporterCountAggregateOutputType | null
    _avg: ClubSupporterAvgAggregateOutputType | null
    _sum: ClubSupporterSumAggregateOutputType | null
    _min: ClubSupporterMinAggregateOutputType | null
    _max: ClubSupporterMaxAggregateOutputType | null
  }

  export type ClubSupporterAvgAggregateOutputType = {
    playerId: number | null
    clubId: number | null
  }

  export type ClubSupporterSumAggregateOutputType = {
    playerId: number | null
    clubId: number | null
  }

  export type ClubSupporterMinAggregateOutputType = {
    playerId: number | null
    clubId: number | null
  }

  export type ClubSupporterMaxAggregateOutputType = {
    playerId: number | null
    clubId: number | null
  }

  export type ClubSupporterCountAggregateOutputType = {
    playerId: number
    clubId: number
    _all: number
  }


  export type ClubSupporterAvgAggregateInputType = {
    playerId?: true
    clubId?: true
  }

  export type ClubSupporterSumAggregateInputType = {
    playerId?: true
    clubId?: true
  }

  export type ClubSupporterMinAggregateInputType = {
    playerId?: true
    clubId?: true
  }

  export type ClubSupporterMaxAggregateInputType = {
    playerId?: true
    clubId?: true
  }

  export type ClubSupporterCountAggregateInputType = {
    playerId?: true
    clubId?: true
    _all?: true
  }

  export type ClubSupporterAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ClubSupporter to aggregate.
     */
    where?: ClubSupporterWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ClubSupporters to fetch.
     */
    orderBy?: ClubSupporterOrderByWithRelationInput | ClubSupporterOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ClubSupporterWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ClubSupporters from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ClubSupporters.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ClubSupporters
    **/
    _count?: true | ClubSupporterCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ClubSupporterAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ClubSupporterSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ClubSupporterMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ClubSupporterMaxAggregateInputType
  }

  export type GetClubSupporterAggregateType<T extends ClubSupporterAggregateArgs> = {
        [P in keyof T & keyof AggregateClubSupporter]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateClubSupporter[P]>
      : GetScalarType<T[P], AggregateClubSupporter[P]>
  }




  export type ClubSupporterGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ClubSupporterWhereInput
    orderBy?: ClubSupporterOrderByWithAggregationInput | ClubSupporterOrderByWithAggregationInput[]
    by: ClubSupporterScalarFieldEnum[] | ClubSupporterScalarFieldEnum
    having?: ClubSupporterScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ClubSupporterCountAggregateInputType | true
    _avg?: ClubSupporterAvgAggregateInputType
    _sum?: ClubSupporterSumAggregateInputType
    _min?: ClubSupporterMinAggregateInputType
    _max?: ClubSupporterMaxAggregateInputType
  }

  export type ClubSupporterGroupByOutputType = {
    playerId: number
    clubId: number
    _count: ClubSupporterCountAggregateOutputType | null
    _avg: ClubSupporterAvgAggregateOutputType | null
    _sum: ClubSupporterSumAggregateOutputType | null
    _min: ClubSupporterMinAggregateOutputType | null
    _max: ClubSupporterMaxAggregateOutputType | null
  }

  type GetClubSupporterGroupByPayload<T extends ClubSupporterGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ClubSupporterGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ClubSupporterGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ClubSupporterGroupByOutputType[P]>
            : GetScalarType<T[P], ClubSupporterGroupByOutputType[P]>
        }
      >
    >


  export type ClubSupporterSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    playerId?: boolean
    clubId?: boolean
    player?: boolean | PlayerDefaultArgs<ExtArgs>
    club?: boolean | ClubDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["clubSupporter"]>



  export type ClubSupporterSelectScalar = {
    playerId?: boolean
    clubId?: boolean
  }

  export type ClubSupporterOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"playerId" | "clubId", ExtArgs["result"]["clubSupporter"]>
  export type ClubSupporterInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    player?: boolean | PlayerDefaultArgs<ExtArgs>
    club?: boolean | ClubDefaultArgs<ExtArgs>
  }

  export type $ClubSupporterPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ClubSupporter"
    objects: {
      player: Prisma.$PlayerPayload<ExtArgs>
      club: Prisma.$ClubPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      playerId: number
      clubId: number
    }, ExtArgs["result"]["clubSupporter"]>
    composites: {}
  }

  type ClubSupporterGetPayload<S extends boolean | null | undefined | ClubSupporterDefaultArgs> = $Result.GetResult<Prisma.$ClubSupporterPayload, S>

  type ClubSupporterCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ClubSupporterFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ClubSupporterCountAggregateInputType | true
    }

  export interface ClubSupporterDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ClubSupporter'], meta: { name: 'ClubSupporter' } }
    /**
     * Find zero or one ClubSupporter that matches the filter.
     * @param {ClubSupporterFindUniqueArgs} args - Arguments to find a ClubSupporter
     * @example
     * // Get one ClubSupporter
     * const clubSupporter = await prisma.clubSupporter.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ClubSupporterFindUniqueArgs>(args: SelectSubset<T, ClubSupporterFindUniqueArgs<ExtArgs>>): Prisma__ClubSupporterClient<$Result.GetResult<Prisma.$ClubSupporterPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one ClubSupporter that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ClubSupporterFindUniqueOrThrowArgs} args - Arguments to find a ClubSupporter
     * @example
     * // Get one ClubSupporter
     * const clubSupporter = await prisma.clubSupporter.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ClubSupporterFindUniqueOrThrowArgs>(args: SelectSubset<T, ClubSupporterFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ClubSupporterClient<$Result.GetResult<Prisma.$ClubSupporterPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ClubSupporter that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClubSupporterFindFirstArgs} args - Arguments to find a ClubSupporter
     * @example
     * // Get one ClubSupporter
     * const clubSupporter = await prisma.clubSupporter.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ClubSupporterFindFirstArgs>(args?: SelectSubset<T, ClubSupporterFindFirstArgs<ExtArgs>>): Prisma__ClubSupporterClient<$Result.GetResult<Prisma.$ClubSupporterPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ClubSupporter that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClubSupporterFindFirstOrThrowArgs} args - Arguments to find a ClubSupporter
     * @example
     * // Get one ClubSupporter
     * const clubSupporter = await prisma.clubSupporter.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ClubSupporterFindFirstOrThrowArgs>(args?: SelectSubset<T, ClubSupporterFindFirstOrThrowArgs<ExtArgs>>): Prisma__ClubSupporterClient<$Result.GetResult<Prisma.$ClubSupporterPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more ClubSupporters that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClubSupporterFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ClubSupporters
     * const clubSupporters = await prisma.clubSupporter.findMany()
     * 
     * // Get first 10 ClubSupporters
     * const clubSupporters = await prisma.clubSupporter.findMany({ take: 10 })
     * 
     * // Only select the `playerId`
     * const clubSupporterWithPlayerIdOnly = await prisma.clubSupporter.findMany({ select: { playerId: true } })
     * 
     */
    findMany<T extends ClubSupporterFindManyArgs>(args?: SelectSubset<T, ClubSupporterFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ClubSupporterPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a ClubSupporter.
     * @param {ClubSupporterCreateArgs} args - Arguments to create a ClubSupporter.
     * @example
     * // Create one ClubSupporter
     * const ClubSupporter = await prisma.clubSupporter.create({
     *   data: {
     *     // ... data to create a ClubSupporter
     *   }
     * })
     * 
     */
    create<T extends ClubSupporterCreateArgs>(args: SelectSubset<T, ClubSupporterCreateArgs<ExtArgs>>): Prisma__ClubSupporterClient<$Result.GetResult<Prisma.$ClubSupporterPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many ClubSupporters.
     * @param {ClubSupporterCreateManyArgs} args - Arguments to create many ClubSupporters.
     * @example
     * // Create many ClubSupporters
     * const clubSupporter = await prisma.clubSupporter.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ClubSupporterCreateManyArgs>(args?: SelectSubset<T, ClubSupporterCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a ClubSupporter.
     * @param {ClubSupporterDeleteArgs} args - Arguments to delete one ClubSupporter.
     * @example
     * // Delete one ClubSupporter
     * const ClubSupporter = await prisma.clubSupporter.delete({
     *   where: {
     *     // ... filter to delete one ClubSupporter
     *   }
     * })
     * 
     */
    delete<T extends ClubSupporterDeleteArgs>(args: SelectSubset<T, ClubSupporterDeleteArgs<ExtArgs>>): Prisma__ClubSupporterClient<$Result.GetResult<Prisma.$ClubSupporterPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one ClubSupporter.
     * @param {ClubSupporterUpdateArgs} args - Arguments to update one ClubSupporter.
     * @example
     * // Update one ClubSupporter
     * const clubSupporter = await prisma.clubSupporter.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ClubSupporterUpdateArgs>(args: SelectSubset<T, ClubSupporterUpdateArgs<ExtArgs>>): Prisma__ClubSupporterClient<$Result.GetResult<Prisma.$ClubSupporterPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more ClubSupporters.
     * @param {ClubSupporterDeleteManyArgs} args - Arguments to filter ClubSupporters to delete.
     * @example
     * // Delete a few ClubSupporters
     * const { count } = await prisma.clubSupporter.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ClubSupporterDeleteManyArgs>(args?: SelectSubset<T, ClubSupporterDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ClubSupporters.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClubSupporterUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ClubSupporters
     * const clubSupporter = await prisma.clubSupporter.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ClubSupporterUpdateManyArgs>(args: SelectSubset<T, ClubSupporterUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one ClubSupporter.
     * @param {ClubSupporterUpsertArgs} args - Arguments to update or create a ClubSupporter.
     * @example
     * // Update or create a ClubSupporter
     * const clubSupporter = await prisma.clubSupporter.upsert({
     *   create: {
     *     // ... data to create a ClubSupporter
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ClubSupporter we want to update
     *   }
     * })
     */
    upsert<T extends ClubSupporterUpsertArgs>(args: SelectSubset<T, ClubSupporterUpsertArgs<ExtArgs>>): Prisma__ClubSupporterClient<$Result.GetResult<Prisma.$ClubSupporterPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of ClubSupporters.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClubSupporterCountArgs} args - Arguments to filter ClubSupporters to count.
     * @example
     * // Count the number of ClubSupporters
     * const count = await prisma.clubSupporter.count({
     *   where: {
     *     // ... the filter for the ClubSupporters we want to count
     *   }
     * })
    **/
    count<T extends ClubSupporterCountArgs>(
      args?: Subset<T, ClubSupporterCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ClubSupporterCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ClubSupporter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClubSupporterAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ClubSupporterAggregateArgs>(args: Subset<T, ClubSupporterAggregateArgs>): Prisma.PrismaPromise<GetClubSupporterAggregateType<T>>

    /**
     * Group by ClubSupporter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClubSupporterGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ClubSupporterGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ClubSupporterGroupByArgs['orderBy'] }
        : { orderBy?: ClubSupporterGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ClubSupporterGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetClubSupporterGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ClubSupporter model
   */
  readonly fields: ClubSupporterFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ClubSupporter.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ClubSupporterClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    player<T extends PlayerDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PlayerDefaultArgs<ExtArgs>>): Prisma__PlayerClient<$Result.GetResult<Prisma.$PlayerPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    club<T extends ClubDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ClubDefaultArgs<ExtArgs>>): Prisma__ClubClient<$Result.GetResult<Prisma.$ClubPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ClubSupporter model
   */
  interface ClubSupporterFieldRefs {
    readonly playerId: FieldRef<"ClubSupporter", 'Int'>
    readonly clubId: FieldRef<"ClubSupporter", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * ClubSupporter findUnique
   */
  export type ClubSupporterFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClubSupporter
     */
    select?: ClubSupporterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ClubSupporter
     */
    omit?: ClubSupporterOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClubSupporterInclude<ExtArgs> | null
    /**
     * Filter, which ClubSupporter to fetch.
     */
    where: ClubSupporterWhereUniqueInput
  }

  /**
   * ClubSupporter findUniqueOrThrow
   */
  export type ClubSupporterFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClubSupporter
     */
    select?: ClubSupporterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ClubSupporter
     */
    omit?: ClubSupporterOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClubSupporterInclude<ExtArgs> | null
    /**
     * Filter, which ClubSupporter to fetch.
     */
    where: ClubSupporterWhereUniqueInput
  }

  /**
   * ClubSupporter findFirst
   */
  export type ClubSupporterFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClubSupporter
     */
    select?: ClubSupporterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ClubSupporter
     */
    omit?: ClubSupporterOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClubSupporterInclude<ExtArgs> | null
    /**
     * Filter, which ClubSupporter to fetch.
     */
    where?: ClubSupporterWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ClubSupporters to fetch.
     */
    orderBy?: ClubSupporterOrderByWithRelationInput | ClubSupporterOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ClubSupporters.
     */
    cursor?: ClubSupporterWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ClubSupporters from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ClubSupporters.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ClubSupporters.
     */
    distinct?: ClubSupporterScalarFieldEnum | ClubSupporterScalarFieldEnum[]
  }

  /**
   * ClubSupporter findFirstOrThrow
   */
  export type ClubSupporterFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClubSupporter
     */
    select?: ClubSupporterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ClubSupporter
     */
    omit?: ClubSupporterOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClubSupporterInclude<ExtArgs> | null
    /**
     * Filter, which ClubSupporter to fetch.
     */
    where?: ClubSupporterWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ClubSupporters to fetch.
     */
    orderBy?: ClubSupporterOrderByWithRelationInput | ClubSupporterOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ClubSupporters.
     */
    cursor?: ClubSupporterWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ClubSupporters from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ClubSupporters.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ClubSupporters.
     */
    distinct?: ClubSupporterScalarFieldEnum | ClubSupporterScalarFieldEnum[]
  }

  /**
   * ClubSupporter findMany
   */
  export type ClubSupporterFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClubSupporter
     */
    select?: ClubSupporterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ClubSupporter
     */
    omit?: ClubSupporterOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClubSupporterInclude<ExtArgs> | null
    /**
     * Filter, which ClubSupporters to fetch.
     */
    where?: ClubSupporterWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ClubSupporters to fetch.
     */
    orderBy?: ClubSupporterOrderByWithRelationInput | ClubSupporterOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ClubSupporters.
     */
    cursor?: ClubSupporterWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ClubSupporters from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ClubSupporters.
     */
    skip?: number
    distinct?: ClubSupporterScalarFieldEnum | ClubSupporterScalarFieldEnum[]
  }

  /**
   * ClubSupporter create
   */
  export type ClubSupporterCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClubSupporter
     */
    select?: ClubSupporterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ClubSupporter
     */
    omit?: ClubSupporterOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClubSupporterInclude<ExtArgs> | null
    /**
     * The data needed to create a ClubSupporter.
     */
    data: XOR<ClubSupporterCreateInput, ClubSupporterUncheckedCreateInput>
  }

  /**
   * ClubSupporter createMany
   */
  export type ClubSupporterCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ClubSupporters.
     */
    data: ClubSupporterCreateManyInput | ClubSupporterCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ClubSupporter update
   */
  export type ClubSupporterUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClubSupporter
     */
    select?: ClubSupporterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ClubSupporter
     */
    omit?: ClubSupporterOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClubSupporterInclude<ExtArgs> | null
    /**
     * The data needed to update a ClubSupporter.
     */
    data: XOR<ClubSupporterUpdateInput, ClubSupporterUncheckedUpdateInput>
    /**
     * Choose, which ClubSupporter to update.
     */
    where: ClubSupporterWhereUniqueInput
  }

  /**
   * ClubSupporter updateMany
   */
  export type ClubSupporterUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ClubSupporters.
     */
    data: XOR<ClubSupporterUpdateManyMutationInput, ClubSupporterUncheckedUpdateManyInput>
    /**
     * Filter which ClubSupporters to update
     */
    where?: ClubSupporterWhereInput
    /**
     * Limit how many ClubSupporters to update.
     */
    limit?: number
  }

  /**
   * ClubSupporter upsert
   */
  export type ClubSupporterUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClubSupporter
     */
    select?: ClubSupporterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ClubSupporter
     */
    omit?: ClubSupporterOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClubSupporterInclude<ExtArgs> | null
    /**
     * The filter to search for the ClubSupporter to update in case it exists.
     */
    where: ClubSupporterWhereUniqueInput
    /**
     * In case the ClubSupporter found by the `where` argument doesn't exist, create a new ClubSupporter with this data.
     */
    create: XOR<ClubSupporterCreateInput, ClubSupporterUncheckedCreateInput>
    /**
     * In case the ClubSupporter was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ClubSupporterUpdateInput, ClubSupporterUncheckedUpdateInput>
  }

  /**
   * ClubSupporter delete
   */
  export type ClubSupporterDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClubSupporter
     */
    select?: ClubSupporterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ClubSupporter
     */
    omit?: ClubSupporterOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClubSupporterInclude<ExtArgs> | null
    /**
     * Filter which ClubSupporter to delete.
     */
    where: ClubSupporterWhereUniqueInput
  }

  /**
   * ClubSupporter deleteMany
   */
  export type ClubSupporterDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ClubSupporters to delete
     */
    where?: ClubSupporterWhereInput
    /**
     * Limit how many ClubSupporters to delete.
     */
    limit?: number
  }

  /**
   * ClubSupporter without action
   */
  export type ClubSupporterDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClubSupporter
     */
    select?: ClubSupporterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ClubSupporter
     */
    omit?: ClubSupporterOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClubSupporterInclude<ExtArgs> | null
  }


  /**
   * Model Country
   */

  export type AggregateCountry = {
    _count: CountryCountAggregateOutputType | null
    _min: CountryMinAggregateOutputType | null
    _max: CountryMaxAggregateOutputType | null
  }

  export type CountryMinAggregateOutputType = {
    isoCode: string | null
    name: string | null
  }

  export type CountryMaxAggregateOutputType = {
    isoCode: string | null
    name: string | null
  }

  export type CountryCountAggregateOutputType = {
    isoCode: number
    name: number
    _all: number
  }


  export type CountryMinAggregateInputType = {
    isoCode?: true
    name?: true
  }

  export type CountryMaxAggregateInputType = {
    isoCode?: true
    name?: true
  }

  export type CountryCountAggregateInputType = {
    isoCode?: true
    name?: true
    _all?: true
  }

  export type CountryAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Country to aggregate.
     */
    where?: CountryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Countries to fetch.
     */
    orderBy?: CountryOrderByWithRelationInput | CountryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CountryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Countries from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Countries.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Countries
    **/
    _count?: true | CountryCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CountryMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CountryMaxAggregateInputType
  }

  export type GetCountryAggregateType<T extends CountryAggregateArgs> = {
        [P in keyof T & keyof AggregateCountry]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCountry[P]>
      : GetScalarType<T[P], AggregateCountry[P]>
  }




  export type CountryGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CountryWhereInput
    orderBy?: CountryOrderByWithAggregationInput | CountryOrderByWithAggregationInput[]
    by: CountryScalarFieldEnum[] | CountryScalarFieldEnum
    having?: CountryScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CountryCountAggregateInputType | true
    _min?: CountryMinAggregateInputType
    _max?: CountryMaxAggregateInputType
  }

  export type CountryGroupByOutputType = {
    isoCode: string
    name: string
    _count: CountryCountAggregateOutputType | null
    _min: CountryMinAggregateOutputType | null
    _max: CountryMaxAggregateOutputType | null
  }

  type GetCountryGroupByPayload<T extends CountryGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CountryGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CountryGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CountryGroupByOutputType[P]>
            : GetScalarType<T[P], CountryGroupByOutputType[P]>
        }
      >
    >


  export type CountrySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    isoCode?: boolean
    name?: boolean
    supporters?: boolean | Country$supportersArgs<ExtArgs>
    _count?: boolean | CountryCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["country"]>



  export type CountrySelectScalar = {
    isoCode?: boolean
    name?: boolean
  }

  export type CountryOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"isoCode" | "name", ExtArgs["result"]["country"]>
  export type CountryInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    supporters?: boolean | Country$supportersArgs<ExtArgs>
    _count?: boolean | CountryCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $CountryPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Country"
    objects: {
      supporters: Prisma.$CountrySupporterPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      isoCode: string
      name: string
    }, ExtArgs["result"]["country"]>
    composites: {}
  }

  type CountryGetPayload<S extends boolean | null | undefined | CountryDefaultArgs> = $Result.GetResult<Prisma.$CountryPayload, S>

  type CountryCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<CountryFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: CountryCountAggregateInputType | true
    }

  export interface CountryDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Country'], meta: { name: 'Country' } }
    /**
     * Find zero or one Country that matches the filter.
     * @param {CountryFindUniqueArgs} args - Arguments to find a Country
     * @example
     * // Get one Country
     * const country = await prisma.country.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CountryFindUniqueArgs>(args: SelectSubset<T, CountryFindUniqueArgs<ExtArgs>>): Prisma__CountryClient<$Result.GetResult<Prisma.$CountryPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Country that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {CountryFindUniqueOrThrowArgs} args - Arguments to find a Country
     * @example
     * // Get one Country
     * const country = await prisma.country.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CountryFindUniqueOrThrowArgs>(args: SelectSubset<T, CountryFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CountryClient<$Result.GetResult<Prisma.$CountryPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Country that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CountryFindFirstArgs} args - Arguments to find a Country
     * @example
     * // Get one Country
     * const country = await prisma.country.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CountryFindFirstArgs>(args?: SelectSubset<T, CountryFindFirstArgs<ExtArgs>>): Prisma__CountryClient<$Result.GetResult<Prisma.$CountryPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Country that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CountryFindFirstOrThrowArgs} args - Arguments to find a Country
     * @example
     * // Get one Country
     * const country = await prisma.country.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CountryFindFirstOrThrowArgs>(args?: SelectSubset<T, CountryFindFirstOrThrowArgs<ExtArgs>>): Prisma__CountryClient<$Result.GetResult<Prisma.$CountryPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Countries that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CountryFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Countries
     * const countries = await prisma.country.findMany()
     * 
     * // Get first 10 Countries
     * const countries = await prisma.country.findMany({ take: 10 })
     * 
     * // Only select the `isoCode`
     * const countryWithIsoCodeOnly = await prisma.country.findMany({ select: { isoCode: true } })
     * 
     */
    findMany<T extends CountryFindManyArgs>(args?: SelectSubset<T, CountryFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CountryPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Country.
     * @param {CountryCreateArgs} args - Arguments to create a Country.
     * @example
     * // Create one Country
     * const Country = await prisma.country.create({
     *   data: {
     *     // ... data to create a Country
     *   }
     * })
     * 
     */
    create<T extends CountryCreateArgs>(args: SelectSubset<T, CountryCreateArgs<ExtArgs>>): Prisma__CountryClient<$Result.GetResult<Prisma.$CountryPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Countries.
     * @param {CountryCreateManyArgs} args - Arguments to create many Countries.
     * @example
     * // Create many Countries
     * const country = await prisma.country.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CountryCreateManyArgs>(args?: SelectSubset<T, CountryCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Country.
     * @param {CountryDeleteArgs} args - Arguments to delete one Country.
     * @example
     * // Delete one Country
     * const Country = await prisma.country.delete({
     *   where: {
     *     // ... filter to delete one Country
     *   }
     * })
     * 
     */
    delete<T extends CountryDeleteArgs>(args: SelectSubset<T, CountryDeleteArgs<ExtArgs>>): Prisma__CountryClient<$Result.GetResult<Prisma.$CountryPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Country.
     * @param {CountryUpdateArgs} args - Arguments to update one Country.
     * @example
     * // Update one Country
     * const country = await prisma.country.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CountryUpdateArgs>(args: SelectSubset<T, CountryUpdateArgs<ExtArgs>>): Prisma__CountryClient<$Result.GetResult<Prisma.$CountryPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Countries.
     * @param {CountryDeleteManyArgs} args - Arguments to filter Countries to delete.
     * @example
     * // Delete a few Countries
     * const { count } = await prisma.country.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CountryDeleteManyArgs>(args?: SelectSubset<T, CountryDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Countries.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CountryUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Countries
     * const country = await prisma.country.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CountryUpdateManyArgs>(args: SelectSubset<T, CountryUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Country.
     * @param {CountryUpsertArgs} args - Arguments to update or create a Country.
     * @example
     * // Update or create a Country
     * const country = await prisma.country.upsert({
     *   create: {
     *     // ... data to create a Country
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Country we want to update
     *   }
     * })
     */
    upsert<T extends CountryUpsertArgs>(args: SelectSubset<T, CountryUpsertArgs<ExtArgs>>): Prisma__CountryClient<$Result.GetResult<Prisma.$CountryPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Countries.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CountryCountArgs} args - Arguments to filter Countries to count.
     * @example
     * // Count the number of Countries
     * const count = await prisma.country.count({
     *   where: {
     *     // ... the filter for the Countries we want to count
     *   }
     * })
    **/
    count<T extends CountryCountArgs>(
      args?: Subset<T, CountryCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CountryCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Country.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CountryAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CountryAggregateArgs>(args: Subset<T, CountryAggregateArgs>): Prisma.PrismaPromise<GetCountryAggregateType<T>>

    /**
     * Group by Country.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CountryGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CountryGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CountryGroupByArgs['orderBy'] }
        : { orderBy?: CountryGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CountryGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCountryGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Country model
   */
  readonly fields: CountryFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Country.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CountryClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    supporters<T extends Country$supportersArgs<ExtArgs> = {}>(args?: Subset<T, Country$supportersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CountrySupporterPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Country model
   */
  interface CountryFieldRefs {
    readonly isoCode: FieldRef<"Country", 'String'>
    readonly name: FieldRef<"Country", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Country findUnique
   */
  export type CountryFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Country
     */
    select?: CountrySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Country
     */
    omit?: CountryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CountryInclude<ExtArgs> | null
    /**
     * Filter, which Country to fetch.
     */
    where: CountryWhereUniqueInput
  }

  /**
   * Country findUniqueOrThrow
   */
  export type CountryFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Country
     */
    select?: CountrySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Country
     */
    omit?: CountryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CountryInclude<ExtArgs> | null
    /**
     * Filter, which Country to fetch.
     */
    where: CountryWhereUniqueInput
  }

  /**
   * Country findFirst
   */
  export type CountryFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Country
     */
    select?: CountrySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Country
     */
    omit?: CountryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CountryInclude<ExtArgs> | null
    /**
     * Filter, which Country to fetch.
     */
    where?: CountryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Countries to fetch.
     */
    orderBy?: CountryOrderByWithRelationInput | CountryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Countries.
     */
    cursor?: CountryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Countries from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Countries.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Countries.
     */
    distinct?: CountryScalarFieldEnum | CountryScalarFieldEnum[]
  }

  /**
   * Country findFirstOrThrow
   */
  export type CountryFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Country
     */
    select?: CountrySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Country
     */
    omit?: CountryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CountryInclude<ExtArgs> | null
    /**
     * Filter, which Country to fetch.
     */
    where?: CountryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Countries to fetch.
     */
    orderBy?: CountryOrderByWithRelationInput | CountryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Countries.
     */
    cursor?: CountryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Countries from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Countries.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Countries.
     */
    distinct?: CountryScalarFieldEnum | CountryScalarFieldEnum[]
  }

  /**
   * Country findMany
   */
  export type CountryFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Country
     */
    select?: CountrySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Country
     */
    omit?: CountryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CountryInclude<ExtArgs> | null
    /**
     * Filter, which Countries to fetch.
     */
    where?: CountryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Countries to fetch.
     */
    orderBy?: CountryOrderByWithRelationInput | CountryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Countries.
     */
    cursor?: CountryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Countries from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Countries.
     */
    skip?: number
    distinct?: CountryScalarFieldEnum | CountryScalarFieldEnum[]
  }

  /**
   * Country create
   */
  export type CountryCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Country
     */
    select?: CountrySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Country
     */
    omit?: CountryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CountryInclude<ExtArgs> | null
    /**
     * The data needed to create a Country.
     */
    data: XOR<CountryCreateInput, CountryUncheckedCreateInput>
  }

  /**
   * Country createMany
   */
  export type CountryCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Countries.
     */
    data: CountryCreateManyInput | CountryCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Country update
   */
  export type CountryUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Country
     */
    select?: CountrySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Country
     */
    omit?: CountryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CountryInclude<ExtArgs> | null
    /**
     * The data needed to update a Country.
     */
    data: XOR<CountryUpdateInput, CountryUncheckedUpdateInput>
    /**
     * Choose, which Country to update.
     */
    where: CountryWhereUniqueInput
  }

  /**
   * Country updateMany
   */
  export type CountryUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Countries.
     */
    data: XOR<CountryUpdateManyMutationInput, CountryUncheckedUpdateManyInput>
    /**
     * Filter which Countries to update
     */
    where?: CountryWhereInput
    /**
     * Limit how many Countries to update.
     */
    limit?: number
  }

  /**
   * Country upsert
   */
  export type CountryUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Country
     */
    select?: CountrySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Country
     */
    omit?: CountryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CountryInclude<ExtArgs> | null
    /**
     * The filter to search for the Country to update in case it exists.
     */
    where: CountryWhereUniqueInput
    /**
     * In case the Country found by the `where` argument doesn't exist, create a new Country with this data.
     */
    create: XOR<CountryCreateInput, CountryUncheckedCreateInput>
    /**
     * In case the Country was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CountryUpdateInput, CountryUncheckedUpdateInput>
  }

  /**
   * Country delete
   */
  export type CountryDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Country
     */
    select?: CountrySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Country
     */
    omit?: CountryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CountryInclude<ExtArgs> | null
    /**
     * Filter which Country to delete.
     */
    where: CountryWhereUniqueInput
  }

  /**
   * Country deleteMany
   */
  export type CountryDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Countries to delete
     */
    where?: CountryWhereInput
    /**
     * Limit how many Countries to delete.
     */
    limit?: number
  }

  /**
   * Country.supporters
   */
  export type Country$supportersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CountrySupporter
     */
    select?: CountrySupporterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CountrySupporter
     */
    omit?: CountrySupporterOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CountrySupporterInclude<ExtArgs> | null
    where?: CountrySupporterWhereInput
    orderBy?: CountrySupporterOrderByWithRelationInput | CountrySupporterOrderByWithRelationInput[]
    cursor?: CountrySupporterWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CountrySupporterScalarFieldEnum | CountrySupporterScalarFieldEnum[]
  }

  /**
   * Country without action
   */
  export type CountryDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Country
     */
    select?: CountrySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Country
     */
    omit?: CountryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CountryInclude<ExtArgs> | null
  }


  /**
   * Model CountrySupporter
   */

  export type AggregateCountrySupporter = {
    _count: CountrySupporterCountAggregateOutputType | null
    _avg: CountrySupporterAvgAggregateOutputType | null
    _sum: CountrySupporterSumAggregateOutputType | null
    _min: CountrySupporterMinAggregateOutputType | null
    _max: CountrySupporterMaxAggregateOutputType | null
  }

  export type CountrySupporterAvgAggregateOutputType = {
    playerId: number | null
  }

  export type CountrySupporterSumAggregateOutputType = {
    playerId: number | null
  }

  export type CountrySupporterMinAggregateOutputType = {
    playerId: number | null
    countryISOCode: string | null
  }

  export type CountrySupporterMaxAggregateOutputType = {
    playerId: number | null
    countryISOCode: string | null
  }

  export type CountrySupporterCountAggregateOutputType = {
    playerId: number
    countryISOCode: number
    _all: number
  }


  export type CountrySupporterAvgAggregateInputType = {
    playerId?: true
  }

  export type CountrySupporterSumAggregateInputType = {
    playerId?: true
  }

  export type CountrySupporterMinAggregateInputType = {
    playerId?: true
    countryISOCode?: true
  }

  export type CountrySupporterMaxAggregateInputType = {
    playerId?: true
    countryISOCode?: true
  }

  export type CountrySupporterCountAggregateInputType = {
    playerId?: true
    countryISOCode?: true
    _all?: true
  }

  export type CountrySupporterAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CountrySupporter to aggregate.
     */
    where?: CountrySupporterWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CountrySupporters to fetch.
     */
    orderBy?: CountrySupporterOrderByWithRelationInput | CountrySupporterOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CountrySupporterWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CountrySupporters from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CountrySupporters.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned CountrySupporters
    **/
    _count?: true | CountrySupporterCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CountrySupporterAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CountrySupporterSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CountrySupporterMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CountrySupporterMaxAggregateInputType
  }

  export type GetCountrySupporterAggregateType<T extends CountrySupporterAggregateArgs> = {
        [P in keyof T & keyof AggregateCountrySupporter]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCountrySupporter[P]>
      : GetScalarType<T[P], AggregateCountrySupporter[P]>
  }




  export type CountrySupporterGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CountrySupporterWhereInput
    orderBy?: CountrySupporterOrderByWithAggregationInput | CountrySupporterOrderByWithAggregationInput[]
    by: CountrySupporterScalarFieldEnum[] | CountrySupporterScalarFieldEnum
    having?: CountrySupporterScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CountrySupporterCountAggregateInputType | true
    _avg?: CountrySupporterAvgAggregateInputType
    _sum?: CountrySupporterSumAggregateInputType
    _min?: CountrySupporterMinAggregateInputType
    _max?: CountrySupporterMaxAggregateInputType
  }

  export type CountrySupporterGroupByOutputType = {
    playerId: number
    countryISOCode: string
    _count: CountrySupporterCountAggregateOutputType | null
    _avg: CountrySupporterAvgAggregateOutputType | null
    _sum: CountrySupporterSumAggregateOutputType | null
    _min: CountrySupporterMinAggregateOutputType | null
    _max: CountrySupporterMaxAggregateOutputType | null
  }

  type GetCountrySupporterGroupByPayload<T extends CountrySupporterGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CountrySupporterGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CountrySupporterGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CountrySupporterGroupByOutputType[P]>
            : GetScalarType<T[P], CountrySupporterGroupByOutputType[P]>
        }
      >
    >


  export type CountrySupporterSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    playerId?: boolean
    countryISOCode?: boolean
    country?: boolean | CountryDefaultArgs<ExtArgs>
    player?: boolean | PlayerDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["countrySupporter"]>



  export type CountrySupporterSelectScalar = {
    playerId?: boolean
    countryISOCode?: boolean
  }

  export type CountrySupporterOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"playerId" | "countryISOCode", ExtArgs["result"]["countrySupporter"]>
  export type CountrySupporterInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    country?: boolean | CountryDefaultArgs<ExtArgs>
    player?: boolean | PlayerDefaultArgs<ExtArgs>
  }

  export type $CountrySupporterPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "CountrySupporter"
    objects: {
      country: Prisma.$CountryPayload<ExtArgs>
      player: Prisma.$PlayerPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      playerId: number
      countryISOCode: string
    }, ExtArgs["result"]["countrySupporter"]>
    composites: {}
  }

  type CountrySupporterGetPayload<S extends boolean | null | undefined | CountrySupporterDefaultArgs> = $Result.GetResult<Prisma.$CountrySupporterPayload, S>

  type CountrySupporterCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<CountrySupporterFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: CountrySupporterCountAggregateInputType | true
    }

  export interface CountrySupporterDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['CountrySupporter'], meta: { name: 'CountrySupporter' } }
    /**
     * Find zero or one CountrySupporter that matches the filter.
     * @param {CountrySupporterFindUniqueArgs} args - Arguments to find a CountrySupporter
     * @example
     * // Get one CountrySupporter
     * const countrySupporter = await prisma.countrySupporter.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CountrySupporterFindUniqueArgs>(args: SelectSubset<T, CountrySupporterFindUniqueArgs<ExtArgs>>): Prisma__CountrySupporterClient<$Result.GetResult<Prisma.$CountrySupporterPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one CountrySupporter that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {CountrySupporterFindUniqueOrThrowArgs} args - Arguments to find a CountrySupporter
     * @example
     * // Get one CountrySupporter
     * const countrySupporter = await prisma.countrySupporter.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CountrySupporterFindUniqueOrThrowArgs>(args: SelectSubset<T, CountrySupporterFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CountrySupporterClient<$Result.GetResult<Prisma.$CountrySupporterPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first CountrySupporter that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CountrySupporterFindFirstArgs} args - Arguments to find a CountrySupporter
     * @example
     * // Get one CountrySupporter
     * const countrySupporter = await prisma.countrySupporter.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CountrySupporterFindFirstArgs>(args?: SelectSubset<T, CountrySupporterFindFirstArgs<ExtArgs>>): Prisma__CountrySupporterClient<$Result.GetResult<Prisma.$CountrySupporterPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first CountrySupporter that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CountrySupporterFindFirstOrThrowArgs} args - Arguments to find a CountrySupporter
     * @example
     * // Get one CountrySupporter
     * const countrySupporter = await prisma.countrySupporter.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CountrySupporterFindFirstOrThrowArgs>(args?: SelectSubset<T, CountrySupporterFindFirstOrThrowArgs<ExtArgs>>): Prisma__CountrySupporterClient<$Result.GetResult<Prisma.$CountrySupporterPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more CountrySupporters that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CountrySupporterFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all CountrySupporters
     * const countrySupporters = await prisma.countrySupporter.findMany()
     * 
     * // Get first 10 CountrySupporters
     * const countrySupporters = await prisma.countrySupporter.findMany({ take: 10 })
     * 
     * // Only select the `playerId`
     * const countrySupporterWithPlayerIdOnly = await prisma.countrySupporter.findMany({ select: { playerId: true } })
     * 
     */
    findMany<T extends CountrySupporterFindManyArgs>(args?: SelectSubset<T, CountrySupporterFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CountrySupporterPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a CountrySupporter.
     * @param {CountrySupporterCreateArgs} args - Arguments to create a CountrySupporter.
     * @example
     * // Create one CountrySupporter
     * const CountrySupporter = await prisma.countrySupporter.create({
     *   data: {
     *     // ... data to create a CountrySupporter
     *   }
     * })
     * 
     */
    create<T extends CountrySupporterCreateArgs>(args: SelectSubset<T, CountrySupporterCreateArgs<ExtArgs>>): Prisma__CountrySupporterClient<$Result.GetResult<Prisma.$CountrySupporterPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many CountrySupporters.
     * @param {CountrySupporterCreateManyArgs} args - Arguments to create many CountrySupporters.
     * @example
     * // Create many CountrySupporters
     * const countrySupporter = await prisma.countrySupporter.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CountrySupporterCreateManyArgs>(args?: SelectSubset<T, CountrySupporterCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a CountrySupporter.
     * @param {CountrySupporterDeleteArgs} args - Arguments to delete one CountrySupporter.
     * @example
     * // Delete one CountrySupporter
     * const CountrySupporter = await prisma.countrySupporter.delete({
     *   where: {
     *     // ... filter to delete one CountrySupporter
     *   }
     * })
     * 
     */
    delete<T extends CountrySupporterDeleteArgs>(args: SelectSubset<T, CountrySupporterDeleteArgs<ExtArgs>>): Prisma__CountrySupporterClient<$Result.GetResult<Prisma.$CountrySupporterPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one CountrySupporter.
     * @param {CountrySupporterUpdateArgs} args - Arguments to update one CountrySupporter.
     * @example
     * // Update one CountrySupporter
     * const countrySupporter = await prisma.countrySupporter.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CountrySupporterUpdateArgs>(args: SelectSubset<T, CountrySupporterUpdateArgs<ExtArgs>>): Prisma__CountrySupporterClient<$Result.GetResult<Prisma.$CountrySupporterPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more CountrySupporters.
     * @param {CountrySupporterDeleteManyArgs} args - Arguments to filter CountrySupporters to delete.
     * @example
     * // Delete a few CountrySupporters
     * const { count } = await prisma.countrySupporter.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CountrySupporterDeleteManyArgs>(args?: SelectSubset<T, CountrySupporterDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CountrySupporters.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CountrySupporterUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many CountrySupporters
     * const countrySupporter = await prisma.countrySupporter.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CountrySupporterUpdateManyArgs>(args: SelectSubset<T, CountrySupporterUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one CountrySupporter.
     * @param {CountrySupporterUpsertArgs} args - Arguments to update or create a CountrySupporter.
     * @example
     * // Update or create a CountrySupporter
     * const countrySupporter = await prisma.countrySupporter.upsert({
     *   create: {
     *     // ... data to create a CountrySupporter
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the CountrySupporter we want to update
     *   }
     * })
     */
    upsert<T extends CountrySupporterUpsertArgs>(args: SelectSubset<T, CountrySupporterUpsertArgs<ExtArgs>>): Prisma__CountrySupporterClient<$Result.GetResult<Prisma.$CountrySupporterPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of CountrySupporters.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CountrySupporterCountArgs} args - Arguments to filter CountrySupporters to count.
     * @example
     * // Count the number of CountrySupporters
     * const count = await prisma.countrySupporter.count({
     *   where: {
     *     // ... the filter for the CountrySupporters we want to count
     *   }
     * })
    **/
    count<T extends CountrySupporterCountArgs>(
      args?: Subset<T, CountrySupporterCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CountrySupporterCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a CountrySupporter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CountrySupporterAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CountrySupporterAggregateArgs>(args: Subset<T, CountrySupporterAggregateArgs>): Prisma.PrismaPromise<GetCountrySupporterAggregateType<T>>

    /**
     * Group by CountrySupporter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CountrySupporterGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CountrySupporterGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CountrySupporterGroupByArgs['orderBy'] }
        : { orderBy?: CountrySupporterGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CountrySupporterGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCountrySupporterGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the CountrySupporter model
   */
  readonly fields: CountrySupporterFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for CountrySupporter.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CountrySupporterClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    country<T extends CountryDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CountryDefaultArgs<ExtArgs>>): Prisma__CountryClient<$Result.GetResult<Prisma.$CountryPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    player<T extends PlayerDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PlayerDefaultArgs<ExtArgs>>): Prisma__PlayerClient<$Result.GetResult<Prisma.$PlayerPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the CountrySupporter model
   */
  interface CountrySupporterFieldRefs {
    readonly playerId: FieldRef<"CountrySupporter", 'Int'>
    readonly countryISOCode: FieldRef<"CountrySupporter", 'String'>
  }
    

  // Custom InputTypes
  /**
   * CountrySupporter findUnique
   */
  export type CountrySupporterFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CountrySupporter
     */
    select?: CountrySupporterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CountrySupporter
     */
    omit?: CountrySupporterOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CountrySupporterInclude<ExtArgs> | null
    /**
     * Filter, which CountrySupporter to fetch.
     */
    where: CountrySupporterWhereUniqueInput
  }

  /**
   * CountrySupporter findUniqueOrThrow
   */
  export type CountrySupporterFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CountrySupporter
     */
    select?: CountrySupporterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CountrySupporter
     */
    omit?: CountrySupporterOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CountrySupporterInclude<ExtArgs> | null
    /**
     * Filter, which CountrySupporter to fetch.
     */
    where: CountrySupporterWhereUniqueInput
  }

  /**
   * CountrySupporter findFirst
   */
  export type CountrySupporterFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CountrySupporter
     */
    select?: CountrySupporterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CountrySupporter
     */
    omit?: CountrySupporterOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CountrySupporterInclude<ExtArgs> | null
    /**
     * Filter, which CountrySupporter to fetch.
     */
    where?: CountrySupporterWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CountrySupporters to fetch.
     */
    orderBy?: CountrySupporterOrderByWithRelationInput | CountrySupporterOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CountrySupporters.
     */
    cursor?: CountrySupporterWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CountrySupporters from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CountrySupporters.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CountrySupporters.
     */
    distinct?: CountrySupporterScalarFieldEnum | CountrySupporterScalarFieldEnum[]
  }

  /**
   * CountrySupporter findFirstOrThrow
   */
  export type CountrySupporterFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CountrySupporter
     */
    select?: CountrySupporterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CountrySupporter
     */
    omit?: CountrySupporterOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CountrySupporterInclude<ExtArgs> | null
    /**
     * Filter, which CountrySupporter to fetch.
     */
    where?: CountrySupporterWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CountrySupporters to fetch.
     */
    orderBy?: CountrySupporterOrderByWithRelationInput | CountrySupporterOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CountrySupporters.
     */
    cursor?: CountrySupporterWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CountrySupporters from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CountrySupporters.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CountrySupporters.
     */
    distinct?: CountrySupporterScalarFieldEnum | CountrySupporterScalarFieldEnum[]
  }

  /**
   * CountrySupporter findMany
   */
  export type CountrySupporterFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CountrySupporter
     */
    select?: CountrySupporterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CountrySupporter
     */
    omit?: CountrySupporterOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CountrySupporterInclude<ExtArgs> | null
    /**
     * Filter, which CountrySupporters to fetch.
     */
    where?: CountrySupporterWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CountrySupporters to fetch.
     */
    orderBy?: CountrySupporterOrderByWithRelationInput | CountrySupporterOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing CountrySupporters.
     */
    cursor?: CountrySupporterWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CountrySupporters from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CountrySupporters.
     */
    skip?: number
    distinct?: CountrySupporterScalarFieldEnum | CountrySupporterScalarFieldEnum[]
  }

  /**
   * CountrySupporter create
   */
  export type CountrySupporterCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CountrySupporter
     */
    select?: CountrySupporterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CountrySupporter
     */
    omit?: CountrySupporterOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CountrySupporterInclude<ExtArgs> | null
    /**
     * The data needed to create a CountrySupporter.
     */
    data: XOR<CountrySupporterCreateInput, CountrySupporterUncheckedCreateInput>
  }

  /**
   * CountrySupporter createMany
   */
  export type CountrySupporterCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many CountrySupporters.
     */
    data: CountrySupporterCreateManyInput | CountrySupporterCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * CountrySupporter update
   */
  export type CountrySupporterUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CountrySupporter
     */
    select?: CountrySupporterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CountrySupporter
     */
    omit?: CountrySupporterOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CountrySupporterInclude<ExtArgs> | null
    /**
     * The data needed to update a CountrySupporter.
     */
    data: XOR<CountrySupporterUpdateInput, CountrySupporterUncheckedUpdateInput>
    /**
     * Choose, which CountrySupporter to update.
     */
    where: CountrySupporterWhereUniqueInput
  }

  /**
   * CountrySupporter updateMany
   */
  export type CountrySupporterUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update CountrySupporters.
     */
    data: XOR<CountrySupporterUpdateManyMutationInput, CountrySupporterUncheckedUpdateManyInput>
    /**
     * Filter which CountrySupporters to update
     */
    where?: CountrySupporterWhereInput
    /**
     * Limit how many CountrySupporters to update.
     */
    limit?: number
  }

  /**
   * CountrySupporter upsert
   */
  export type CountrySupporterUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CountrySupporter
     */
    select?: CountrySupporterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CountrySupporter
     */
    omit?: CountrySupporterOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CountrySupporterInclude<ExtArgs> | null
    /**
     * The filter to search for the CountrySupporter to update in case it exists.
     */
    where: CountrySupporterWhereUniqueInput
    /**
     * In case the CountrySupporter found by the `where` argument doesn't exist, create a new CountrySupporter with this data.
     */
    create: XOR<CountrySupporterCreateInput, CountrySupporterUncheckedCreateInput>
    /**
     * In case the CountrySupporter was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CountrySupporterUpdateInput, CountrySupporterUncheckedUpdateInput>
  }

  /**
   * CountrySupporter delete
   */
  export type CountrySupporterDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CountrySupporter
     */
    select?: CountrySupporterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CountrySupporter
     */
    omit?: CountrySupporterOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CountrySupporterInclude<ExtArgs> | null
    /**
     * Filter which CountrySupporter to delete.
     */
    where: CountrySupporterWhereUniqueInput
  }

  /**
   * CountrySupporter deleteMany
   */
  export type CountrySupporterDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CountrySupporters to delete
     */
    where?: CountrySupporterWhereInput
    /**
     * Limit how many CountrySupporters to delete.
     */
    limit?: number
  }

  /**
   * CountrySupporter without action
   */
  export type CountrySupporterDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CountrySupporter
     */
    select?: CountrySupporterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CountrySupporter
     */
    omit?: CountrySupporterOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CountrySupporterInclude<ExtArgs> | null
  }


  /**
   * Model Diffs
   */

  export type AggregateDiffs = {
    _count: DiffsCountAggregateOutputType | null
    _avg: DiffsAvgAggregateOutputType | null
    _sum: DiffsSumAggregateOutputType | null
    _min: DiffsMinAggregateOutputType | null
    _max: DiffsMaxAggregateOutputType | null
  }

  export type DiffsAvgAggregateOutputType = {
    id: number | null
    diffAge: number | null
    diffUnknownAge: number | null
    diffGoalies: number | null
    diffAverage: number | null
    diffPlayed: number | null
  }

  export type DiffsSumAggregateOutputType = {
    id: number | null
    diffAge: number | null
    diffUnknownAge: number | null
    diffGoalies: number | null
    diffAverage: number | null
    diffPlayed: number | null
  }

  export type DiffsMinAggregateOutputType = {
    id: number | null
    a: string | null
    b: string | null
    diffAge: number | null
    diffUnknownAge: number | null
    diffGoalies: number | null
    diffAverage: number | null
    diffPlayed: number | null
  }

  export type DiffsMaxAggregateOutputType = {
    id: number | null
    a: string | null
    b: string | null
    diffAge: number | null
    diffUnknownAge: number | null
    diffGoalies: number | null
    diffAverage: number | null
    diffPlayed: number | null
  }

  export type DiffsCountAggregateOutputType = {
    id: number
    a: number
    b: number
    diffAge: number
    diffUnknownAge: number
    diffGoalies: number
    diffAverage: number
    diffPlayed: number
    _all: number
  }


  export type DiffsAvgAggregateInputType = {
    id?: true
    diffAge?: true
    diffUnknownAge?: true
    diffGoalies?: true
    diffAverage?: true
    diffPlayed?: true
  }

  export type DiffsSumAggregateInputType = {
    id?: true
    diffAge?: true
    diffUnknownAge?: true
    diffGoalies?: true
    diffAverage?: true
    diffPlayed?: true
  }

  export type DiffsMinAggregateInputType = {
    id?: true
    a?: true
    b?: true
    diffAge?: true
    diffUnknownAge?: true
    diffGoalies?: true
    diffAverage?: true
    diffPlayed?: true
  }

  export type DiffsMaxAggregateInputType = {
    id?: true
    a?: true
    b?: true
    diffAge?: true
    diffUnknownAge?: true
    diffGoalies?: true
    diffAverage?: true
    diffPlayed?: true
  }

  export type DiffsCountAggregateInputType = {
    id?: true
    a?: true
    b?: true
    diffAge?: true
    diffUnknownAge?: true
    diffGoalies?: true
    diffAverage?: true
    diffPlayed?: true
    _all?: true
  }

  export type DiffsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Diffs to aggregate.
     */
    where?: DiffsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Diffs to fetch.
     */
    orderBy?: DiffsOrderByWithRelationInput | DiffsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: DiffsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Diffs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Diffs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Diffs
    **/
    _count?: true | DiffsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: DiffsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: DiffsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DiffsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DiffsMaxAggregateInputType
  }

  export type GetDiffsAggregateType<T extends DiffsAggregateArgs> = {
        [P in keyof T & keyof AggregateDiffs]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDiffs[P]>
      : GetScalarType<T[P], AggregateDiffs[P]>
  }




  export type DiffsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DiffsWhereInput
    orderBy?: DiffsOrderByWithAggregationInput | DiffsOrderByWithAggregationInput[]
    by: DiffsScalarFieldEnum[] | DiffsScalarFieldEnum
    having?: DiffsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DiffsCountAggregateInputType | true
    _avg?: DiffsAvgAggregateInputType
    _sum?: DiffsSumAggregateInputType
    _min?: DiffsMinAggregateInputType
    _max?: DiffsMaxAggregateInputType
  }

  export type DiffsGroupByOutputType = {
    id: number
    a: string | null
    b: string | null
    diffAge: number | null
    diffUnknownAge: number | null
    diffGoalies: number | null
    diffAverage: number | null
    diffPlayed: number | null
    _count: DiffsCountAggregateOutputType | null
    _avg: DiffsAvgAggregateOutputType | null
    _sum: DiffsSumAggregateOutputType | null
    _min: DiffsMinAggregateOutputType | null
    _max: DiffsMaxAggregateOutputType | null
  }

  type GetDiffsGroupByPayload<T extends DiffsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<DiffsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DiffsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DiffsGroupByOutputType[P]>
            : GetScalarType<T[P], DiffsGroupByOutputType[P]>
        }
      >
    >


  export type DiffsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    a?: boolean
    b?: boolean
    diffAge?: boolean
    diffUnknownAge?: boolean
    diffGoalies?: boolean
    diffAverage?: boolean
    diffPlayed?: boolean
  }, ExtArgs["result"]["diffs"]>



  export type DiffsSelectScalar = {
    id?: boolean
    a?: boolean
    b?: boolean
    diffAge?: boolean
    diffUnknownAge?: boolean
    diffGoalies?: boolean
    diffAverage?: boolean
    diffPlayed?: boolean
  }

  export type DiffsOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "a" | "b" | "diffAge" | "diffUnknownAge" | "diffGoalies" | "diffAverage" | "diffPlayed", ExtArgs["result"]["diffs"]>

  export type $DiffsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Diffs"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: number
      a: string | null
      b: string | null
      diffAge: number | null
      diffUnknownAge: number | null
      diffGoalies: number | null
      diffAverage: number | null
      diffPlayed: number | null
    }, ExtArgs["result"]["diffs"]>
    composites: {}
  }

  type DiffsGetPayload<S extends boolean | null | undefined | DiffsDefaultArgs> = $Result.GetResult<Prisma.$DiffsPayload, S>

  type DiffsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<DiffsFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: DiffsCountAggregateInputType | true
    }

  export interface DiffsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Diffs'], meta: { name: 'Diffs' } }
    /**
     * Find zero or one Diffs that matches the filter.
     * @param {DiffsFindUniqueArgs} args - Arguments to find a Diffs
     * @example
     * // Get one Diffs
     * const diffs = await prisma.diffs.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends DiffsFindUniqueArgs>(args: SelectSubset<T, DiffsFindUniqueArgs<ExtArgs>>): Prisma__DiffsClient<$Result.GetResult<Prisma.$DiffsPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Diffs that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {DiffsFindUniqueOrThrowArgs} args - Arguments to find a Diffs
     * @example
     * // Get one Diffs
     * const diffs = await prisma.diffs.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends DiffsFindUniqueOrThrowArgs>(args: SelectSubset<T, DiffsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__DiffsClient<$Result.GetResult<Prisma.$DiffsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Diffs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DiffsFindFirstArgs} args - Arguments to find a Diffs
     * @example
     * // Get one Diffs
     * const diffs = await prisma.diffs.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends DiffsFindFirstArgs>(args?: SelectSubset<T, DiffsFindFirstArgs<ExtArgs>>): Prisma__DiffsClient<$Result.GetResult<Prisma.$DiffsPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Diffs that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DiffsFindFirstOrThrowArgs} args - Arguments to find a Diffs
     * @example
     * // Get one Diffs
     * const diffs = await prisma.diffs.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends DiffsFindFirstOrThrowArgs>(args?: SelectSubset<T, DiffsFindFirstOrThrowArgs<ExtArgs>>): Prisma__DiffsClient<$Result.GetResult<Prisma.$DiffsPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Diffs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DiffsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Diffs
     * const diffs = await prisma.diffs.findMany()
     * 
     * // Get first 10 Diffs
     * const diffs = await prisma.diffs.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const diffsWithIdOnly = await prisma.diffs.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends DiffsFindManyArgs>(args?: SelectSubset<T, DiffsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DiffsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Diffs.
     * @param {DiffsCreateArgs} args - Arguments to create a Diffs.
     * @example
     * // Create one Diffs
     * const Diffs = await prisma.diffs.create({
     *   data: {
     *     // ... data to create a Diffs
     *   }
     * })
     * 
     */
    create<T extends DiffsCreateArgs>(args: SelectSubset<T, DiffsCreateArgs<ExtArgs>>): Prisma__DiffsClient<$Result.GetResult<Prisma.$DiffsPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Diffs.
     * @param {DiffsCreateManyArgs} args - Arguments to create many Diffs.
     * @example
     * // Create many Diffs
     * const diffs = await prisma.diffs.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends DiffsCreateManyArgs>(args?: SelectSubset<T, DiffsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Diffs.
     * @param {DiffsDeleteArgs} args - Arguments to delete one Diffs.
     * @example
     * // Delete one Diffs
     * const Diffs = await prisma.diffs.delete({
     *   where: {
     *     // ... filter to delete one Diffs
     *   }
     * })
     * 
     */
    delete<T extends DiffsDeleteArgs>(args: SelectSubset<T, DiffsDeleteArgs<ExtArgs>>): Prisma__DiffsClient<$Result.GetResult<Prisma.$DiffsPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Diffs.
     * @param {DiffsUpdateArgs} args - Arguments to update one Diffs.
     * @example
     * // Update one Diffs
     * const diffs = await prisma.diffs.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends DiffsUpdateArgs>(args: SelectSubset<T, DiffsUpdateArgs<ExtArgs>>): Prisma__DiffsClient<$Result.GetResult<Prisma.$DiffsPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Diffs.
     * @param {DiffsDeleteManyArgs} args - Arguments to filter Diffs to delete.
     * @example
     * // Delete a few Diffs
     * const { count } = await prisma.diffs.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends DiffsDeleteManyArgs>(args?: SelectSubset<T, DiffsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Diffs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DiffsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Diffs
     * const diffs = await prisma.diffs.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends DiffsUpdateManyArgs>(args: SelectSubset<T, DiffsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Diffs.
     * @param {DiffsUpsertArgs} args - Arguments to update or create a Diffs.
     * @example
     * // Update or create a Diffs
     * const diffs = await prisma.diffs.upsert({
     *   create: {
     *     // ... data to create a Diffs
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Diffs we want to update
     *   }
     * })
     */
    upsert<T extends DiffsUpsertArgs>(args: SelectSubset<T, DiffsUpsertArgs<ExtArgs>>): Prisma__DiffsClient<$Result.GetResult<Prisma.$DiffsPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Diffs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DiffsCountArgs} args - Arguments to filter Diffs to count.
     * @example
     * // Count the number of Diffs
     * const count = await prisma.diffs.count({
     *   where: {
     *     // ... the filter for the Diffs we want to count
     *   }
     * })
    **/
    count<T extends DiffsCountArgs>(
      args?: Subset<T, DiffsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DiffsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Diffs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DiffsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DiffsAggregateArgs>(args: Subset<T, DiffsAggregateArgs>): Prisma.PrismaPromise<GetDiffsAggregateType<T>>

    /**
     * Group by Diffs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DiffsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends DiffsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: DiffsGroupByArgs['orderBy'] }
        : { orderBy?: DiffsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, DiffsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDiffsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Diffs model
   */
  readonly fields: DiffsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Diffs.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__DiffsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Diffs model
   */
  interface DiffsFieldRefs {
    readonly id: FieldRef<"Diffs", 'Int'>
    readonly a: FieldRef<"Diffs", 'String'>
    readonly b: FieldRef<"Diffs", 'String'>
    readonly diffAge: FieldRef<"Diffs", 'Float'>
    readonly diffUnknownAge: FieldRef<"Diffs", 'Int'>
    readonly diffGoalies: FieldRef<"Diffs", 'Int'>
    readonly diffAverage: FieldRef<"Diffs", 'Float'>
    readonly diffPlayed: FieldRef<"Diffs", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Diffs findUnique
   */
  export type DiffsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Diffs
     */
    select?: DiffsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Diffs
     */
    omit?: DiffsOmit<ExtArgs> | null
    /**
     * Filter, which Diffs to fetch.
     */
    where: DiffsWhereUniqueInput
  }

  /**
   * Diffs findUniqueOrThrow
   */
  export type DiffsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Diffs
     */
    select?: DiffsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Diffs
     */
    omit?: DiffsOmit<ExtArgs> | null
    /**
     * Filter, which Diffs to fetch.
     */
    where: DiffsWhereUniqueInput
  }

  /**
   * Diffs findFirst
   */
  export type DiffsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Diffs
     */
    select?: DiffsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Diffs
     */
    omit?: DiffsOmit<ExtArgs> | null
    /**
     * Filter, which Diffs to fetch.
     */
    where?: DiffsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Diffs to fetch.
     */
    orderBy?: DiffsOrderByWithRelationInput | DiffsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Diffs.
     */
    cursor?: DiffsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Diffs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Diffs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Diffs.
     */
    distinct?: DiffsScalarFieldEnum | DiffsScalarFieldEnum[]
  }

  /**
   * Diffs findFirstOrThrow
   */
  export type DiffsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Diffs
     */
    select?: DiffsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Diffs
     */
    omit?: DiffsOmit<ExtArgs> | null
    /**
     * Filter, which Diffs to fetch.
     */
    where?: DiffsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Diffs to fetch.
     */
    orderBy?: DiffsOrderByWithRelationInput | DiffsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Diffs.
     */
    cursor?: DiffsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Diffs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Diffs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Diffs.
     */
    distinct?: DiffsScalarFieldEnum | DiffsScalarFieldEnum[]
  }

  /**
   * Diffs findMany
   */
  export type DiffsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Diffs
     */
    select?: DiffsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Diffs
     */
    omit?: DiffsOmit<ExtArgs> | null
    /**
     * Filter, which Diffs to fetch.
     */
    where?: DiffsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Diffs to fetch.
     */
    orderBy?: DiffsOrderByWithRelationInput | DiffsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Diffs.
     */
    cursor?: DiffsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Diffs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Diffs.
     */
    skip?: number
    distinct?: DiffsScalarFieldEnum | DiffsScalarFieldEnum[]
  }

  /**
   * Diffs create
   */
  export type DiffsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Diffs
     */
    select?: DiffsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Diffs
     */
    omit?: DiffsOmit<ExtArgs> | null
    /**
     * The data needed to create a Diffs.
     */
    data?: XOR<DiffsCreateInput, DiffsUncheckedCreateInput>
  }

  /**
   * Diffs createMany
   */
  export type DiffsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Diffs.
     */
    data: DiffsCreateManyInput | DiffsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Diffs update
   */
  export type DiffsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Diffs
     */
    select?: DiffsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Diffs
     */
    omit?: DiffsOmit<ExtArgs> | null
    /**
     * The data needed to update a Diffs.
     */
    data: XOR<DiffsUpdateInput, DiffsUncheckedUpdateInput>
    /**
     * Choose, which Diffs to update.
     */
    where: DiffsWhereUniqueInput
  }

  /**
   * Diffs updateMany
   */
  export type DiffsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Diffs.
     */
    data: XOR<DiffsUpdateManyMutationInput, DiffsUncheckedUpdateManyInput>
    /**
     * Filter which Diffs to update
     */
    where?: DiffsWhereInput
    /**
     * Limit how many Diffs to update.
     */
    limit?: number
  }

  /**
   * Diffs upsert
   */
  export type DiffsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Diffs
     */
    select?: DiffsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Diffs
     */
    omit?: DiffsOmit<ExtArgs> | null
    /**
     * The filter to search for the Diffs to update in case it exists.
     */
    where: DiffsWhereUniqueInput
    /**
     * In case the Diffs found by the `where` argument doesn't exist, create a new Diffs with this data.
     */
    create: XOR<DiffsCreateInput, DiffsUncheckedCreateInput>
    /**
     * In case the Diffs was found with the provided `where` argument, update it with this data.
     */
    update: XOR<DiffsUpdateInput, DiffsUncheckedUpdateInput>
  }

  /**
   * Diffs delete
   */
  export type DiffsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Diffs
     */
    select?: DiffsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Diffs
     */
    omit?: DiffsOmit<ExtArgs> | null
    /**
     * Filter which Diffs to delete.
     */
    where: DiffsWhereUniqueInput
  }

  /**
   * Diffs deleteMany
   */
  export type DiffsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Diffs to delete
     */
    where?: DiffsWhereInput
    /**
     * Limit how many Diffs to delete.
     */
    limit?: number
  }

  /**
   * Diffs without action
   */
  export type DiffsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Diffs
     */
    select?: DiffsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Diffs
     */
    omit?: DiffsOmit<ExtArgs> | null
  }


  /**
   * Model GameChat
   */

  export type AggregateGameChat = {
    _count: GameChatCountAggregateOutputType | null
    _avg: GameChatAvgAggregateOutputType | null
    _sum: GameChatSumAggregateOutputType | null
    _min: GameChatMinAggregateOutputType | null
    _max: GameChatMaxAggregateOutputType | null
  }

  export type GameChatAvgAggregateOutputType = {
    id: number | null
    gameDay: number | null
    player: number | null
  }

  export type GameChatSumAggregateOutputType = {
    id: number | null
    gameDay: number | null
    player: number | null
  }

  export type GameChatMinAggregateOutputType = {
    id: number | null
    gameDay: number | null
    stamp: Date | null
    player: number | null
    body: string | null
  }

  export type GameChatMaxAggregateOutputType = {
    id: number | null
    gameDay: number | null
    stamp: Date | null
    player: number | null
    body: string | null
  }

  export type GameChatCountAggregateOutputType = {
    id: number
    gameDay: number
    stamp: number
    player: number
    body: number
    _all: number
  }


  export type GameChatAvgAggregateInputType = {
    id?: true
    gameDay?: true
    player?: true
  }

  export type GameChatSumAggregateInputType = {
    id?: true
    gameDay?: true
    player?: true
  }

  export type GameChatMinAggregateInputType = {
    id?: true
    gameDay?: true
    stamp?: true
    player?: true
    body?: true
  }

  export type GameChatMaxAggregateInputType = {
    id?: true
    gameDay?: true
    stamp?: true
    player?: true
    body?: true
  }

  export type GameChatCountAggregateInputType = {
    id?: true
    gameDay?: true
    stamp?: true
    player?: true
    body?: true
    _all?: true
  }

  export type GameChatAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which GameChat to aggregate.
     */
    where?: GameChatWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GameChats to fetch.
     */
    orderBy?: GameChatOrderByWithRelationInput | GameChatOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: GameChatWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GameChats from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GameChats.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned GameChats
    **/
    _count?: true | GameChatCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: GameChatAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: GameChatSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: GameChatMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: GameChatMaxAggregateInputType
  }

  export type GetGameChatAggregateType<T extends GameChatAggregateArgs> = {
        [P in keyof T & keyof AggregateGameChat]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateGameChat[P]>
      : GetScalarType<T[P], AggregateGameChat[P]>
  }




  export type GameChatGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: GameChatWhereInput
    orderBy?: GameChatOrderByWithAggregationInput | GameChatOrderByWithAggregationInput[]
    by: GameChatScalarFieldEnum[] | GameChatScalarFieldEnum
    having?: GameChatScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: GameChatCountAggregateInputType | true
    _avg?: GameChatAvgAggregateInputType
    _sum?: GameChatSumAggregateInputType
    _min?: GameChatMinAggregateInputType
    _max?: GameChatMaxAggregateInputType
  }

  export type GameChatGroupByOutputType = {
    id: number
    gameDay: number
    stamp: Date
    player: number
    body: string | null
    _count: GameChatCountAggregateOutputType | null
    _avg: GameChatAvgAggregateOutputType | null
    _sum: GameChatSumAggregateOutputType | null
    _min: GameChatMinAggregateOutputType | null
    _max: GameChatMaxAggregateOutputType | null
  }

  type GetGameChatGroupByPayload<T extends GameChatGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<GameChatGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof GameChatGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], GameChatGroupByOutputType[P]>
            : GetScalarType<T[P], GameChatGroupByOutputType[P]>
        }
      >
    >


  export type GameChatSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    gameDay?: boolean
    stamp?: boolean
    player?: boolean
    body?: boolean
  }, ExtArgs["result"]["gameChat"]>



  export type GameChatSelectScalar = {
    id?: boolean
    gameDay?: boolean
    stamp?: boolean
    player?: boolean
    body?: boolean
  }

  export type GameChatOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "gameDay" | "stamp" | "player" | "body", ExtArgs["result"]["gameChat"]>

  export type $GameChatPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "GameChat"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: number
      gameDay: number
      stamp: Date
      player: number
      body: string | null
    }, ExtArgs["result"]["gameChat"]>
    composites: {}
  }

  type GameChatGetPayload<S extends boolean | null | undefined | GameChatDefaultArgs> = $Result.GetResult<Prisma.$GameChatPayload, S>

  type GameChatCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<GameChatFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: GameChatCountAggregateInputType | true
    }

  export interface GameChatDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['GameChat'], meta: { name: 'GameChat' } }
    /**
     * Find zero or one GameChat that matches the filter.
     * @param {GameChatFindUniqueArgs} args - Arguments to find a GameChat
     * @example
     * // Get one GameChat
     * const gameChat = await prisma.gameChat.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends GameChatFindUniqueArgs>(args: SelectSubset<T, GameChatFindUniqueArgs<ExtArgs>>): Prisma__GameChatClient<$Result.GetResult<Prisma.$GameChatPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one GameChat that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {GameChatFindUniqueOrThrowArgs} args - Arguments to find a GameChat
     * @example
     * // Get one GameChat
     * const gameChat = await prisma.gameChat.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends GameChatFindUniqueOrThrowArgs>(args: SelectSubset<T, GameChatFindUniqueOrThrowArgs<ExtArgs>>): Prisma__GameChatClient<$Result.GetResult<Prisma.$GameChatPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first GameChat that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GameChatFindFirstArgs} args - Arguments to find a GameChat
     * @example
     * // Get one GameChat
     * const gameChat = await prisma.gameChat.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends GameChatFindFirstArgs>(args?: SelectSubset<T, GameChatFindFirstArgs<ExtArgs>>): Prisma__GameChatClient<$Result.GetResult<Prisma.$GameChatPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first GameChat that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GameChatFindFirstOrThrowArgs} args - Arguments to find a GameChat
     * @example
     * // Get one GameChat
     * const gameChat = await prisma.gameChat.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends GameChatFindFirstOrThrowArgs>(args?: SelectSubset<T, GameChatFindFirstOrThrowArgs<ExtArgs>>): Prisma__GameChatClient<$Result.GetResult<Prisma.$GameChatPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more GameChats that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GameChatFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all GameChats
     * const gameChats = await prisma.gameChat.findMany()
     * 
     * // Get first 10 GameChats
     * const gameChats = await prisma.gameChat.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const gameChatWithIdOnly = await prisma.gameChat.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends GameChatFindManyArgs>(args?: SelectSubset<T, GameChatFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GameChatPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a GameChat.
     * @param {GameChatCreateArgs} args - Arguments to create a GameChat.
     * @example
     * // Create one GameChat
     * const GameChat = await prisma.gameChat.create({
     *   data: {
     *     // ... data to create a GameChat
     *   }
     * })
     * 
     */
    create<T extends GameChatCreateArgs>(args: SelectSubset<T, GameChatCreateArgs<ExtArgs>>): Prisma__GameChatClient<$Result.GetResult<Prisma.$GameChatPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many GameChats.
     * @param {GameChatCreateManyArgs} args - Arguments to create many GameChats.
     * @example
     * // Create many GameChats
     * const gameChat = await prisma.gameChat.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends GameChatCreateManyArgs>(args?: SelectSubset<T, GameChatCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a GameChat.
     * @param {GameChatDeleteArgs} args - Arguments to delete one GameChat.
     * @example
     * // Delete one GameChat
     * const GameChat = await prisma.gameChat.delete({
     *   where: {
     *     // ... filter to delete one GameChat
     *   }
     * })
     * 
     */
    delete<T extends GameChatDeleteArgs>(args: SelectSubset<T, GameChatDeleteArgs<ExtArgs>>): Prisma__GameChatClient<$Result.GetResult<Prisma.$GameChatPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one GameChat.
     * @param {GameChatUpdateArgs} args - Arguments to update one GameChat.
     * @example
     * // Update one GameChat
     * const gameChat = await prisma.gameChat.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends GameChatUpdateArgs>(args: SelectSubset<T, GameChatUpdateArgs<ExtArgs>>): Prisma__GameChatClient<$Result.GetResult<Prisma.$GameChatPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more GameChats.
     * @param {GameChatDeleteManyArgs} args - Arguments to filter GameChats to delete.
     * @example
     * // Delete a few GameChats
     * const { count } = await prisma.gameChat.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends GameChatDeleteManyArgs>(args?: SelectSubset<T, GameChatDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more GameChats.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GameChatUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many GameChats
     * const gameChat = await prisma.gameChat.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends GameChatUpdateManyArgs>(args: SelectSubset<T, GameChatUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one GameChat.
     * @param {GameChatUpsertArgs} args - Arguments to update or create a GameChat.
     * @example
     * // Update or create a GameChat
     * const gameChat = await prisma.gameChat.upsert({
     *   create: {
     *     // ... data to create a GameChat
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the GameChat we want to update
     *   }
     * })
     */
    upsert<T extends GameChatUpsertArgs>(args: SelectSubset<T, GameChatUpsertArgs<ExtArgs>>): Prisma__GameChatClient<$Result.GetResult<Prisma.$GameChatPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of GameChats.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GameChatCountArgs} args - Arguments to filter GameChats to count.
     * @example
     * // Count the number of GameChats
     * const count = await prisma.gameChat.count({
     *   where: {
     *     // ... the filter for the GameChats we want to count
     *   }
     * })
    **/
    count<T extends GameChatCountArgs>(
      args?: Subset<T, GameChatCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], GameChatCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a GameChat.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GameChatAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends GameChatAggregateArgs>(args: Subset<T, GameChatAggregateArgs>): Prisma.PrismaPromise<GetGameChatAggregateType<T>>

    /**
     * Group by GameChat.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GameChatGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends GameChatGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: GameChatGroupByArgs['orderBy'] }
        : { orderBy?: GameChatGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, GameChatGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetGameChatGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the GameChat model
   */
  readonly fields: GameChatFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for GameChat.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__GameChatClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the GameChat model
   */
  interface GameChatFieldRefs {
    readonly id: FieldRef<"GameChat", 'Int'>
    readonly gameDay: FieldRef<"GameChat", 'Int'>
    readonly stamp: FieldRef<"GameChat", 'DateTime'>
    readonly player: FieldRef<"GameChat", 'Int'>
    readonly body: FieldRef<"GameChat", 'String'>
  }
    

  // Custom InputTypes
  /**
   * GameChat findUnique
   */
  export type GameChatFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameChat
     */
    select?: GameChatSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GameChat
     */
    omit?: GameChatOmit<ExtArgs> | null
    /**
     * Filter, which GameChat to fetch.
     */
    where: GameChatWhereUniqueInput
  }

  /**
   * GameChat findUniqueOrThrow
   */
  export type GameChatFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameChat
     */
    select?: GameChatSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GameChat
     */
    omit?: GameChatOmit<ExtArgs> | null
    /**
     * Filter, which GameChat to fetch.
     */
    where: GameChatWhereUniqueInput
  }

  /**
   * GameChat findFirst
   */
  export type GameChatFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameChat
     */
    select?: GameChatSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GameChat
     */
    omit?: GameChatOmit<ExtArgs> | null
    /**
     * Filter, which GameChat to fetch.
     */
    where?: GameChatWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GameChats to fetch.
     */
    orderBy?: GameChatOrderByWithRelationInput | GameChatOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for GameChats.
     */
    cursor?: GameChatWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GameChats from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GameChats.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of GameChats.
     */
    distinct?: GameChatScalarFieldEnum | GameChatScalarFieldEnum[]
  }

  /**
   * GameChat findFirstOrThrow
   */
  export type GameChatFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameChat
     */
    select?: GameChatSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GameChat
     */
    omit?: GameChatOmit<ExtArgs> | null
    /**
     * Filter, which GameChat to fetch.
     */
    where?: GameChatWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GameChats to fetch.
     */
    orderBy?: GameChatOrderByWithRelationInput | GameChatOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for GameChats.
     */
    cursor?: GameChatWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GameChats from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GameChats.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of GameChats.
     */
    distinct?: GameChatScalarFieldEnum | GameChatScalarFieldEnum[]
  }

  /**
   * GameChat findMany
   */
  export type GameChatFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameChat
     */
    select?: GameChatSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GameChat
     */
    omit?: GameChatOmit<ExtArgs> | null
    /**
     * Filter, which GameChats to fetch.
     */
    where?: GameChatWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GameChats to fetch.
     */
    orderBy?: GameChatOrderByWithRelationInput | GameChatOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing GameChats.
     */
    cursor?: GameChatWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GameChats from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GameChats.
     */
    skip?: number
    distinct?: GameChatScalarFieldEnum | GameChatScalarFieldEnum[]
  }

  /**
   * GameChat create
   */
  export type GameChatCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameChat
     */
    select?: GameChatSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GameChat
     */
    omit?: GameChatOmit<ExtArgs> | null
    /**
     * The data needed to create a GameChat.
     */
    data: XOR<GameChatCreateInput, GameChatUncheckedCreateInput>
  }

  /**
   * GameChat createMany
   */
  export type GameChatCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many GameChats.
     */
    data: GameChatCreateManyInput | GameChatCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * GameChat update
   */
  export type GameChatUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameChat
     */
    select?: GameChatSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GameChat
     */
    omit?: GameChatOmit<ExtArgs> | null
    /**
     * The data needed to update a GameChat.
     */
    data: XOR<GameChatUpdateInput, GameChatUncheckedUpdateInput>
    /**
     * Choose, which GameChat to update.
     */
    where: GameChatWhereUniqueInput
  }

  /**
   * GameChat updateMany
   */
  export type GameChatUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update GameChats.
     */
    data: XOR<GameChatUpdateManyMutationInput, GameChatUncheckedUpdateManyInput>
    /**
     * Filter which GameChats to update
     */
    where?: GameChatWhereInput
    /**
     * Limit how many GameChats to update.
     */
    limit?: number
  }

  /**
   * GameChat upsert
   */
  export type GameChatUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameChat
     */
    select?: GameChatSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GameChat
     */
    omit?: GameChatOmit<ExtArgs> | null
    /**
     * The filter to search for the GameChat to update in case it exists.
     */
    where: GameChatWhereUniqueInput
    /**
     * In case the GameChat found by the `where` argument doesn't exist, create a new GameChat with this data.
     */
    create: XOR<GameChatCreateInput, GameChatUncheckedCreateInput>
    /**
     * In case the GameChat was found with the provided `where` argument, update it with this data.
     */
    update: XOR<GameChatUpdateInput, GameChatUncheckedUpdateInput>
  }

  /**
   * GameChat delete
   */
  export type GameChatDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameChat
     */
    select?: GameChatSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GameChat
     */
    omit?: GameChatOmit<ExtArgs> | null
    /**
     * Filter which GameChat to delete.
     */
    where: GameChatWhereUniqueInput
  }

  /**
   * GameChat deleteMany
   */
  export type GameChatDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which GameChats to delete
     */
    where?: GameChatWhereInput
    /**
     * Limit how many GameChats to delete.
     */
    limit?: number
  }

  /**
   * GameChat without action
   */
  export type GameChatDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameChat
     */
    select?: GameChatSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GameChat
     */
    omit?: GameChatOmit<ExtArgs> | null
  }


  /**
   * Model GameDay
   */

  export type AggregateGameDay = {
    _count: GameDayCountAggregateOutputType | null
    _avg: GameDayAvgAggregateOutputType | null
    _sum: GameDaySumAggregateOutputType | null
    _min: GameDayMinAggregateOutputType | null
    _max: GameDayMaxAggregateOutputType | null
  }

  export type GameDayAvgAggregateOutputType = {
    id: number | null
    year: number | null
    pickerGamesHistory: number | null
  }

  export type GameDaySumAggregateOutputType = {
    id: number | null
    year: number | null
    pickerGamesHistory: number | null
  }

  export type GameDayMinAggregateOutputType = {
    id: number | null
    year: number | null
    date: Date | null
    game: boolean | null
    mailSent: Date | null
    comment: string | null
    bibs: $Enums.TeamName | null
    pickerGamesHistory: number | null
  }

  export type GameDayMaxAggregateOutputType = {
    id: number | null
    year: number | null
    date: Date | null
    game: boolean | null
    mailSent: Date | null
    comment: string | null
    bibs: $Enums.TeamName | null
    pickerGamesHistory: number | null
  }

  export type GameDayCountAggregateOutputType = {
    id: number
    year: number
    date: number
    game: number
    mailSent: number
    comment: number
    bibs: number
    pickerGamesHistory: number
    _all: number
  }


  export type GameDayAvgAggregateInputType = {
    id?: true
    year?: true
    pickerGamesHistory?: true
  }

  export type GameDaySumAggregateInputType = {
    id?: true
    year?: true
    pickerGamesHistory?: true
  }

  export type GameDayMinAggregateInputType = {
    id?: true
    year?: true
    date?: true
    game?: true
    mailSent?: true
    comment?: true
    bibs?: true
    pickerGamesHistory?: true
  }

  export type GameDayMaxAggregateInputType = {
    id?: true
    year?: true
    date?: true
    game?: true
    mailSent?: true
    comment?: true
    bibs?: true
    pickerGamesHistory?: true
  }

  export type GameDayCountAggregateInputType = {
    id?: true
    year?: true
    date?: true
    game?: true
    mailSent?: true
    comment?: true
    bibs?: true
    pickerGamesHistory?: true
    _all?: true
  }

  export type GameDayAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which GameDay to aggregate.
     */
    where?: GameDayWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GameDays to fetch.
     */
    orderBy?: GameDayOrderByWithRelationInput | GameDayOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: GameDayWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GameDays from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GameDays.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned GameDays
    **/
    _count?: true | GameDayCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: GameDayAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: GameDaySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: GameDayMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: GameDayMaxAggregateInputType
  }

  export type GetGameDayAggregateType<T extends GameDayAggregateArgs> = {
        [P in keyof T & keyof AggregateGameDay]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateGameDay[P]>
      : GetScalarType<T[P], AggregateGameDay[P]>
  }




  export type GameDayGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: GameDayWhereInput
    orderBy?: GameDayOrderByWithAggregationInput | GameDayOrderByWithAggregationInput[]
    by: GameDayScalarFieldEnum[] | GameDayScalarFieldEnum
    having?: GameDayScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: GameDayCountAggregateInputType | true
    _avg?: GameDayAvgAggregateInputType
    _sum?: GameDaySumAggregateInputType
    _min?: GameDayMinAggregateInputType
    _max?: GameDayMaxAggregateInputType
  }

  export type GameDayGroupByOutputType = {
    id: number
    year: number
    date: Date
    game: boolean
    mailSent: Date | null
    comment: string | null
    bibs: $Enums.TeamName | null
    pickerGamesHistory: number | null
    _count: GameDayCountAggregateOutputType | null
    _avg: GameDayAvgAggregateOutputType | null
    _sum: GameDaySumAggregateOutputType | null
    _min: GameDayMinAggregateOutputType | null
    _max: GameDayMaxAggregateOutputType | null
  }

  type GetGameDayGroupByPayload<T extends GameDayGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<GameDayGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof GameDayGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], GameDayGroupByOutputType[P]>
            : GetScalarType<T[P], GameDayGroupByOutputType[P]>
        }
      >
    >


  export type GameDaySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    year?: boolean
    date?: boolean
    game?: boolean
    mailSent?: boolean
    comment?: boolean
    bibs?: boolean
    pickerGamesHistory?: boolean
    outcomes?: boolean | GameDay$outcomesArgs<ExtArgs>
    playerRecords?: boolean | GameDay$playerRecordsArgs<ExtArgs>
    _count?: boolean | GameDayCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["gameDay"]>



  export type GameDaySelectScalar = {
    id?: boolean
    year?: boolean
    date?: boolean
    game?: boolean
    mailSent?: boolean
    comment?: boolean
    bibs?: boolean
    pickerGamesHistory?: boolean
  }

  export type GameDayOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "year" | "date" | "game" | "mailSent" | "comment" | "bibs" | "pickerGamesHistory", ExtArgs["result"]["gameDay"]>
  export type GameDayInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    outcomes?: boolean | GameDay$outcomesArgs<ExtArgs>
    playerRecords?: boolean | GameDay$playerRecordsArgs<ExtArgs>
    _count?: boolean | GameDayCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $GameDayPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "GameDay"
    objects: {
      outcomes: Prisma.$OutcomePayload<ExtArgs>[]
      playerRecords: Prisma.$PlayerRecordPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      year: number
      date: Date
      game: boolean
      mailSent: Date | null
      comment: string | null
      bibs: $Enums.TeamName | null
      pickerGamesHistory: number | null
    }, ExtArgs["result"]["gameDay"]>
    composites: {}
  }

  type GameDayGetPayload<S extends boolean | null | undefined | GameDayDefaultArgs> = $Result.GetResult<Prisma.$GameDayPayload, S>

  type GameDayCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<GameDayFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: GameDayCountAggregateInputType | true
    }

  export interface GameDayDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['GameDay'], meta: { name: 'GameDay' } }
    /**
     * Find zero or one GameDay that matches the filter.
     * @param {GameDayFindUniqueArgs} args - Arguments to find a GameDay
     * @example
     * // Get one GameDay
     * const gameDay = await prisma.gameDay.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends GameDayFindUniqueArgs>(args: SelectSubset<T, GameDayFindUniqueArgs<ExtArgs>>): Prisma__GameDayClient<$Result.GetResult<Prisma.$GameDayPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one GameDay that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {GameDayFindUniqueOrThrowArgs} args - Arguments to find a GameDay
     * @example
     * // Get one GameDay
     * const gameDay = await prisma.gameDay.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends GameDayFindUniqueOrThrowArgs>(args: SelectSubset<T, GameDayFindUniqueOrThrowArgs<ExtArgs>>): Prisma__GameDayClient<$Result.GetResult<Prisma.$GameDayPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first GameDay that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GameDayFindFirstArgs} args - Arguments to find a GameDay
     * @example
     * // Get one GameDay
     * const gameDay = await prisma.gameDay.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends GameDayFindFirstArgs>(args?: SelectSubset<T, GameDayFindFirstArgs<ExtArgs>>): Prisma__GameDayClient<$Result.GetResult<Prisma.$GameDayPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first GameDay that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GameDayFindFirstOrThrowArgs} args - Arguments to find a GameDay
     * @example
     * // Get one GameDay
     * const gameDay = await prisma.gameDay.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends GameDayFindFirstOrThrowArgs>(args?: SelectSubset<T, GameDayFindFirstOrThrowArgs<ExtArgs>>): Prisma__GameDayClient<$Result.GetResult<Prisma.$GameDayPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more GameDays that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GameDayFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all GameDays
     * const gameDays = await prisma.gameDay.findMany()
     * 
     * // Get first 10 GameDays
     * const gameDays = await prisma.gameDay.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const gameDayWithIdOnly = await prisma.gameDay.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends GameDayFindManyArgs>(args?: SelectSubset<T, GameDayFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GameDayPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a GameDay.
     * @param {GameDayCreateArgs} args - Arguments to create a GameDay.
     * @example
     * // Create one GameDay
     * const GameDay = await prisma.gameDay.create({
     *   data: {
     *     // ... data to create a GameDay
     *   }
     * })
     * 
     */
    create<T extends GameDayCreateArgs>(args: SelectSubset<T, GameDayCreateArgs<ExtArgs>>): Prisma__GameDayClient<$Result.GetResult<Prisma.$GameDayPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many GameDays.
     * @param {GameDayCreateManyArgs} args - Arguments to create many GameDays.
     * @example
     * // Create many GameDays
     * const gameDay = await prisma.gameDay.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends GameDayCreateManyArgs>(args?: SelectSubset<T, GameDayCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a GameDay.
     * @param {GameDayDeleteArgs} args - Arguments to delete one GameDay.
     * @example
     * // Delete one GameDay
     * const GameDay = await prisma.gameDay.delete({
     *   where: {
     *     // ... filter to delete one GameDay
     *   }
     * })
     * 
     */
    delete<T extends GameDayDeleteArgs>(args: SelectSubset<T, GameDayDeleteArgs<ExtArgs>>): Prisma__GameDayClient<$Result.GetResult<Prisma.$GameDayPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one GameDay.
     * @param {GameDayUpdateArgs} args - Arguments to update one GameDay.
     * @example
     * // Update one GameDay
     * const gameDay = await prisma.gameDay.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends GameDayUpdateArgs>(args: SelectSubset<T, GameDayUpdateArgs<ExtArgs>>): Prisma__GameDayClient<$Result.GetResult<Prisma.$GameDayPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more GameDays.
     * @param {GameDayDeleteManyArgs} args - Arguments to filter GameDays to delete.
     * @example
     * // Delete a few GameDays
     * const { count } = await prisma.gameDay.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends GameDayDeleteManyArgs>(args?: SelectSubset<T, GameDayDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more GameDays.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GameDayUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many GameDays
     * const gameDay = await prisma.gameDay.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends GameDayUpdateManyArgs>(args: SelectSubset<T, GameDayUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one GameDay.
     * @param {GameDayUpsertArgs} args - Arguments to update or create a GameDay.
     * @example
     * // Update or create a GameDay
     * const gameDay = await prisma.gameDay.upsert({
     *   create: {
     *     // ... data to create a GameDay
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the GameDay we want to update
     *   }
     * })
     */
    upsert<T extends GameDayUpsertArgs>(args: SelectSubset<T, GameDayUpsertArgs<ExtArgs>>): Prisma__GameDayClient<$Result.GetResult<Prisma.$GameDayPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of GameDays.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GameDayCountArgs} args - Arguments to filter GameDays to count.
     * @example
     * // Count the number of GameDays
     * const count = await prisma.gameDay.count({
     *   where: {
     *     // ... the filter for the GameDays we want to count
     *   }
     * })
    **/
    count<T extends GameDayCountArgs>(
      args?: Subset<T, GameDayCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], GameDayCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a GameDay.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GameDayAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends GameDayAggregateArgs>(args: Subset<T, GameDayAggregateArgs>): Prisma.PrismaPromise<GetGameDayAggregateType<T>>

    /**
     * Group by GameDay.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GameDayGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends GameDayGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: GameDayGroupByArgs['orderBy'] }
        : { orderBy?: GameDayGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, GameDayGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetGameDayGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the GameDay model
   */
  readonly fields: GameDayFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for GameDay.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__GameDayClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    outcomes<T extends GameDay$outcomesArgs<ExtArgs> = {}>(args?: Subset<T, GameDay$outcomesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OutcomePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    playerRecords<T extends GameDay$playerRecordsArgs<ExtArgs> = {}>(args?: Subset<T, GameDay$playerRecordsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PlayerRecordPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the GameDay model
   */
  interface GameDayFieldRefs {
    readonly id: FieldRef<"GameDay", 'Int'>
    readonly year: FieldRef<"GameDay", 'Int'>
    readonly date: FieldRef<"GameDay", 'DateTime'>
    readonly game: FieldRef<"GameDay", 'Boolean'>
    readonly mailSent: FieldRef<"GameDay", 'DateTime'>
    readonly comment: FieldRef<"GameDay", 'String'>
    readonly bibs: FieldRef<"GameDay", 'TeamName'>
    readonly pickerGamesHistory: FieldRef<"GameDay", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * GameDay findUnique
   */
  export type GameDayFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameDay
     */
    select?: GameDaySelect<ExtArgs> | null
    /**
     * Omit specific fields from the GameDay
     */
    omit?: GameDayOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameDayInclude<ExtArgs> | null
    /**
     * Filter, which GameDay to fetch.
     */
    where: GameDayWhereUniqueInput
  }

  /**
   * GameDay findUniqueOrThrow
   */
  export type GameDayFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameDay
     */
    select?: GameDaySelect<ExtArgs> | null
    /**
     * Omit specific fields from the GameDay
     */
    omit?: GameDayOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameDayInclude<ExtArgs> | null
    /**
     * Filter, which GameDay to fetch.
     */
    where: GameDayWhereUniqueInput
  }

  /**
   * GameDay findFirst
   */
  export type GameDayFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameDay
     */
    select?: GameDaySelect<ExtArgs> | null
    /**
     * Omit specific fields from the GameDay
     */
    omit?: GameDayOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameDayInclude<ExtArgs> | null
    /**
     * Filter, which GameDay to fetch.
     */
    where?: GameDayWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GameDays to fetch.
     */
    orderBy?: GameDayOrderByWithRelationInput | GameDayOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for GameDays.
     */
    cursor?: GameDayWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GameDays from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GameDays.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of GameDays.
     */
    distinct?: GameDayScalarFieldEnum | GameDayScalarFieldEnum[]
  }

  /**
   * GameDay findFirstOrThrow
   */
  export type GameDayFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameDay
     */
    select?: GameDaySelect<ExtArgs> | null
    /**
     * Omit specific fields from the GameDay
     */
    omit?: GameDayOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameDayInclude<ExtArgs> | null
    /**
     * Filter, which GameDay to fetch.
     */
    where?: GameDayWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GameDays to fetch.
     */
    orderBy?: GameDayOrderByWithRelationInput | GameDayOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for GameDays.
     */
    cursor?: GameDayWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GameDays from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GameDays.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of GameDays.
     */
    distinct?: GameDayScalarFieldEnum | GameDayScalarFieldEnum[]
  }

  /**
   * GameDay findMany
   */
  export type GameDayFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameDay
     */
    select?: GameDaySelect<ExtArgs> | null
    /**
     * Omit specific fields from the GameDay
     */
    omit?: GameDayOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameDayInclude<ExtArgs> | null
    /**
     * Filter, which GameDays to fetch.
     */
    where?: GameDayWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GameDays to fetch.
     */
    orderBy?: GameDayOrderByWithRelationInput | GameDayOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing GameDays.
     */
    cursor?: GameDayWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GameDays from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GameDays.
     */
    skip?: number
    distinct?: GameDayScalarFieldEnum | GameDayScalarFieldEnum[]
  }

  /**
   * GameDay create
   */
  export type GameDayCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameDay
     */
    select?: GameDaySelect<ExtArgs> | null
    /**
     * Omit specific fields from the GameDay
     */
    omit?: GameDayOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameDayInclude<ExtArgs> | null
    /**
     * The data needed to create a GameDay.
     */
    data: XOR<GameDayCreateInput, GameDayUncheckedCreateInput>
  }

  /**
   * GameDay createMany
   */
  export type GameDayCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many GameDays.
     */
    data: GameDayCreateManyInput | GameDayCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * GameDay update
   */
  export type GameDayUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameDay
     */
    select?: GameDaySelect<ExtArgs> | null
    /**
     * Omit specific fields from the GameDay
     */
    omit?: GameDayOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameDayInclude<ExtArgs> | null
    /**
     * The data needed to update a GameDay.
     */
    data: XOR<GameDayUpdateInput, GameDayUncheckedUpdateInput>
    /**
     * Choose, which GameDay to update.
     */
    where: GameDayWhereUniqueInput
  }

  /**
   * GameDay updateMany
   */
  export type GameDayUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update GameDays.
     */
    data: XOR<GameDayUpdateManyMutationInput, GameDayUncheckedUpdateManyInput>
    /**
     * Filter which GameDays to update
     */
    where?: GameDayWhereInput
    /**
     * Limit how many GameDays to update.
     */
    limit?: number
  }

  /**
   * GameDay upsert
   */
  export type GameDayUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameDay
     */
    select?: GameDaySelect<ExtArgs> | null
    /**
     * Omit specific fields from the GameDay
     */
    omit?: GameDayOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameDayInclude<ExtArgs> | null
    /**
     * The filter to search for the GameDay to update in case it exists.
     */
    where: GameDayWhereUniqueInput
    /**
     * In case the GameDay found by the `where` argument doesn't exist, create a new GameDay with this data.
     */
    create: XOR<GameDayCreateInput, GameDayUncheckedCreateInput>
    /**
     * In case the GameDay was found with the provided `where` argument, update it with this data.
     */
    update: XOR<GameDayUpdateInput, GameDayUncheckedUpdateInput>
  }

  /**
   * GameDay delete
   */
  export type GameDayDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameDay
     */
    select?: GameDaySelect<ExtArgs> | null
    /**
     * Omit specific fields from the GameDay
     */
    omit?: GameDayOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameDayInclude<ExtArgs> | null
    /**
     * Filter which GameDay to delete.
     */
    where: GameDayWhereUniqueInput
  }

  /**
   * GameDay deleteMany
   */
  export type GameDayDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which GameDays to delete
     */
    where?: GameDayWhereInput
    /**
     * Limit how many GameDays to delete.
     */
    limit?: number
  }

  /**
   * GameDay.outcomes
   */
  export type GameDay$outcomesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Outcome
     */
    select?: OutcomeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Outcome
     */
    omit?: OutcomeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OutcomeInclude<ExtArgs> | null
    where?: OutcomeWhereInput
    orderBy?: OutcomeOrderByWithRelationInput | OutcomeOrderByWithRelationInput[]
    cursor?: OutcomeWhereUniqueInput
    take?: number
    skip?: number
    distinct?: OutcomeScalarFieldEnum | OutcomeScalarFieldEnum[]
  }

  /**
   * GameDay.playerRecords
   */
  export type GameDay$playerRecordsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlayerRecord
     */
    select?: PlayerRecordSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PlayerRecord
     */
    omit?: PlayerRecordOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlayerRecordInclude<ExtArgs> | null
    where?: PlayerRecordWhereInput
    orderBy?: PlayerRecordOrderByWithRelationInput | PlayerRecordOrderByWithRelationInput[]
    cursor?: PlayerRecordWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PlayerRecordScalarFieldEnum | PlayerRecordScalarFieldEnum[]
  }

  /**
   * GameDay without action
   */
  export type GameDayDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameDay
     */
    select?: GameDaySelect<ExtArgs> | null
    /**
     * Omit specific fields from the GameDay
     */
    omit?: GameDayOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameDayInclude<ExtArgs> | null
  }


  /**
   * Model Invitation
   */

  export type AggregateInvitation = {
    _count: InvitationCountAggregateOutputType | null
    _avg: InvitationAvgAggregateOutputType | null
    _sum: InvitationSumAggregateOutputType | null
    _min: InvitationMinAggregateOutputType | null
    _max: InvitationMaxAggregateOutputType | null
  }

  export type InvitationAvgAggregateOutputType = {
    playerId: number | null
    gameDayId: number | null
  }

  export type InvitationSumAggregateOutputType = {
    playerId: number | null
    gameDayId: number | null
  }

  export type InvitationMinAggregateOutputType = {
    uuid: string | null
    playerId: number | null
    gameDayId: number | null
  }

  export type InvitationMaxAggregateOutputType = {
    uuid: string | null
    playerId: number | null
    gameDayId: number | null
  }

  export type InvitationCountAggregateOutputType = {
    uuid: number
    playerId: number
    gameDayId: number
    _all: number
  }


  export type InvitationAvgAggregateInputType = {
    playerId?: true
    gameDayId?: true
  }

  export type InvitationSumAggregateInputType = {
    playerId?: true
    gameDayId?: true
  }

  export type InvitationMinAggregateInputType = {
    uuid?: true
    playerId?: true
    gameDayId?: true
  }

  export type InvitationMaxAggregateInputType = {
    uuid?: true
    playerId?: true
    gameDayId?: true
  }

  export type InvitationCountAggregateInputType = {
    uuid?: true
    playerId?: true
    gameDayId?: true
    _all?: true
  }

  export type InvitationAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Invitation to aggregate.
     */
    where?: InvitationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Invitations to fetch.
     */
    orderBy?: InvitationOrderByWithRelationInput | InvitationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: InvitationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Invitations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Invitations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Invitations
    **/
    _count?: true | InvitationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: InvitationAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: InvitationSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: InvitationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: InvitationMaxAggregateInputType
  }

  export type GetInvitationAggregateType<T extends InvitationAggregateArgs> = {
        [P in keyof T & keyof AggregateInvitation]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateInvitation[P]>
      : GetScalarType<T[P], AggregateInvitation[P]>
  }




  export type InvitationGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: InvitationWhereInput
    orderBy?: InvitationOrderByWithAggregationInput | InvitationOrderByWithAggregationInput[]
    by: InvitationScalarFieldEnum[] | InvitationScalarFieldEnum
    having?: InvitationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: InvitationCountAggregateInputType | true
    _avg?: InvitationAvgAggregateInputType
    _sum?: InvitationSumAggregateInputType
    _min?: InvitationMinAggregateInputType
    _max?: InvitationMaxAggregateInputType
  }

  export type InvitationGroupByOutputType = {
    uuid: string
    playerId: number
    gameDayId: number
    _count: InvitationCountAggregateOutputType | null
    _avg: InvitationAvgAggregateOutputType | null
    _sum: InvitationSumAggregateOutputType | null
    _min: InvitationMinAggregateOutputType | null
    _max: InvitationMaxAggregateOutputType | null
  }

  type GetInvitationGroupByPayload<T extends InvitationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<InvitationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof InvitationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], InvitationGroupByOutputType[P]>
            : GetScalarType<T[P], InvitationGroupByOutputType[P]>
        }
      >
    >


  export type InvitationSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    uuid?: boolean
    playerId?: boolean
    gameDayId?: boolean
  }, ExtArgs["result"]["invitation"]>



  export type InvitationSelectScalar = {
    uuid?: boolean
    playerId?: boolean
    gameDayId?: boolean
  }

  export type InvitationOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"uuid" | "playerId" | "gameDayId", ExtArgs["result"]["invitation"]>

  export type $InvitationPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Invitation"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      uuid: string
      playerId: number
      gameDayId: number
    }, ExtArgs["result"]["invitation"]>
    composites: {}
  }

  type InvitationGetPayload<S extends boolean | null | undefined | InvitationDefaultArgs> = $Result.GetResult<Prisma.$InvitationPayload, S>

  type InvitationCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<InvitationFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: InvitationCountAggregateInputType | true
    }

  export interface InvitationDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Invitation'], meta: { name: 'Invitation' } }
    /**
     * Find zero or one Invitation that matches the filter.
     * @param {InvitationFindUniqueArgs} args - Arguments to find a Invitation
     * @example
     * // Get one Invitation
     * const invitation = await prisma.invitation.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends InvitationFindUniqueArgs>(args: SelectSubset<T, InvitationFindUniqueArgs<ExtArgs>>): Prisma__InvitationClient<$Result.GetResult<Prisma.$InvitationPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Invitation that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {InvitationFindUniqueOrThrowArgs} args - Arguments to find a Invitation
     * @example
     * // Get one Invitation
     * const invitation = await prisma.invitation.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends InvitationFindUniqueOrThrowArgs>(args: SelectSubset<T, InvitationFindUniqueOrThrowArgs<ExtArgs>>): Prisma__InvitationClient<$Result.GetResult<Prisma.$InvitationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Invitation that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InvitationFindFirstArgs} args - Arguments to find a Invitation
     * @example
     * // Get one Invitation
     * const invitation = await prisma.invitation.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends InvitationFindFirstArgs>(args?: SelectSubset<T, InvitationFindFirstArgs<ExtArgs>>): Prisma__InvitationClient<$Result.GetResult<Prisma.$InvitationPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Invitation that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InvitationFindFirstOrThrowArgs} args - Arguments to find a Invitation
     * @example
     * // Get one Invitation
     * const invitation = await prisma.invitation.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends InvitationFindFirstOrThrowArgs>(args?: SelectSubset<T, InvitationFindFirstOrThrowArgs<ExtArgs>>): Prisma__InvitationClient<$Result.GetResult<Prisma.$InvitationPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Invitations that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InvitationFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Invitations
     * const invitations = await prisma.invitation.findMany()
     * 
     * // Get first 10 Invitations
     * const invitations = await prisma.invitation.findMany({ take: 10 })
     * 
     * // Only select the `uuid`
     * const invitationWithUuidOnly = await prisma.invitation.findMany({ select: { uuid: true } })
     * 
     */
    findMany<T extends InvitationFindManyArgs>(args?: SelectSubset<T, InvitationFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InvitationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Invitation.
     * @param {InvitationCreateArgs} args - Arguments to create a Invitation.
     * @example
     * // Create one Invitation
     * const Invitation = await prisma.invitation.create({
     *   data: {
     *     // ... data to create a Invitation
     *   }
     * })
     * 
     */
    create<T extends InvitationCreateArgs>(args: SelectSubset<T, InvitationCreateArgs<ExtArgs>>): Prisma__InvitationClient<$Result.GetResult<Prisma.$InvitationPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Invitations.
     * @param {InvitationCreateManyArgs} args - Arguments to create many Invitations.
     * @example
     * // Create many Invitations
     * const invitation = await prisma.invitation.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends InvitationCreateManyArgs>(args?: SelectSubset<T, InvitationCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Invitation.
     * @param {InvitationDeleteArgs} args - Arguments to delete one Invitation.
     * @example
     * // Delete one Invitation
     * const Invitation = await prisma.invitation.delete({
     *   where: {
     *     // ... filter to delete one Invitation
     *   }
     * })
     * 
     */
    delete<T extends InvitationDeleteArgs>(args: SelectSubset<T, InvitationDeleteArgs<ExtArgs>>): Prisma__InvitationClient<$Result.GetResult<Prisma.$InvitationPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Invitation.
     * @param {InvitationUpdateArgs} args - Arguments to update one Invitation.
     * @example
     * // Update one Invitation
     * const invitation = await prisma.invitation.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends InvitationUpdateArgs>(args: SelectSubset<T, InvitationUpdateArgs<ExtArgs>>): Prisma__InvitationClient<$Result.GetResult<Prisma.$InvitationPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Invitations.
     * @param {InvitationDeleteManyArgs} args - Arguments to filter Invitations to delete.
     * @example
     * // Delete a few Invitations
     * const { count } = await prisma.invitation.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends InvitationDeleteManyArgs>(args?: SelectSubset<T, InvitationDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Invitations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InvitationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Invitations
     * const invitation = await prisma.invitation.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends InvitationUpdateManyArgs>(args: SelectSubset<T, InvitationUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Invitation.
     * @param {InvitationUpsertArgs} args - Arguments to update or create a Invitation.
     * @example
     * // Update or create a Invitation
     * const invitation = await prisma.invitation.upsert({
     *   create: {
     *     // ... data to create a Invitation
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Invitation we want to update
     *   }
     * })
     */
    upsert<T extends InvitationUpsertArgs>(args: SelectSubset<T, InvitationUpsertArgs<ExtArgs>>): Prisma__InvitationClient<$Result.GetResult<Prisma.$InvitationPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Invitations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InvitationCountArgs} args - Arguments to filter Invitations to count.
     * @example
     * // Count the number of Invitations
     * const count = await prisma.invitation.count({
     *   where: {
     *     // ... the filter for the Invitations we want to count
     *   }
     * })
    **/
    count<T extends InvitationCountArgs>(
      args?: Subset<T, InvitationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], InvitationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Invitation.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InvitationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends InvitationAggregateArgs>(args: Subset<T, InvitationAggregateArgs>): Prisma.PrismaPromise<GetInvitationAggregateType<T>>

    /**
     * Group by Invitation.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InvitationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends InvitationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: InvitationGroupByArgs['orderBy'] }
        : { orderBy?: InvitationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, InvitationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetInvitationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Invitation model
   */
  readonly fields: InvitationFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Invitation.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__InvitationClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Invitation model
   */
  interface InvitationFieldRefs {
    readonly uuid: FieldRef<"Invitation", 'String'>
    readonly playerId: FieldRef<"Invitation", 'Int'>
    readonly gameDayId: FieldRef<"Invitation", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Invitation findUnique
   */
  export type InvitationFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Invitation
     */
    select?: InvitationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Invitation
     */
    omit?: InvitationOmit<ExtArgs> | null
    /**
     * Filter, which Invitation to fetch.
     */
    where: InvitationWhereUniqueInput
  }

  /**
   * Invitation findUniqueOrThrow
   */
  export type InvitationFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Invitation
     */
    select?: InvitationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Invitation
     */
    omit?: InvitationOmit<ExtArgs> | null
    /**
     * Filter, which Invitation to fetch.
     */
    where: InvitationWhereUniqueInput
  }

  /**
   * Invitation findFirst
   */
  export type InvitationFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Invitation
     */
    select?: InvitationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Invitation
     */
    omit?: InvitationOmit<ExtArgs> | null
    /**
     * Filter, which Invitation to fetch.
     */
    where?: InvitationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Invitations to fetch.
     */
    orderBy?: InvitationOrderByWithRelationInput | InvitationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Invitations.
     */
    cursor?: InvitationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Invitations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Invitations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Invitations.
     */
    distinct?: InvitationScalarFieldEnum | InvitationScalarFieldEnum[]
  }

  /**
   * Invitation findFirstOrThrow
   */
  export type InvitationFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Invitation
     */
    select?: InvitationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Invitation
     */
    omit?: InvitationOmit<ExtArgs> | null
    /**
     * Filter, which Invitation to fetch.
     */
    where?: InvitationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Invitations to fetch.
     */
    orderBy?: InvitationOrderByWithRelationInput | InvitationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Invitations.
     */
    cursor?: InvitationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Invitations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Invitations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Invitations.
     */
    distinct?: InvitationScalarFieldEnum | InvitationScalarFieldEnum[]
  }

  /**
   * Invitation findMany
   */
  export type InvitationFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Invitation
     */
    select?: InvitationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Invitation
     */
    omit?: InvitationOmit<ExtArgs> | null
    /**
     * Filter, which Invitations to fetch.
     */
    where?: InvitationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Invitations to fetch.
     */
    orderBy?: InvitationOrderByWithRelationInput | InvitationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Invitations.
     */
    cursor?: InvitationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Invitations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Invitations.
     */
    skip?: number
    distinct?: InvitationScalarFieldEnum | InvitationScalarFieldEnum[]
  }

  /**
   * Invitation create
   */
  export type InvitationCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Invitation
     */
    select?: InvitationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Invitation
     */
    omit?: InvitationOmit<ExtArgs> | null
    /**
     * The data needed to create a Invitation.
     */
    data: XOR<InvitationCreateInput, InvitationUncheckedCreateInput>
  }

  /**
   * Invitation createMany
   */
  export type InvitationCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Invitations.
     */
    data: InvitationCreateManyInput | InvitationCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Invitation update
   */
  export type InvitationUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Invitation
     */
    select?: InvitationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Invitation
     */
    omit?: InvitationOmit<ExtArgs> | null
    /**
     * The data needed to update a Invitation.
     */
    data: XOR<InvitationUpdateInput, InvitationUncheckedUpdateInput>
    /**
     * Choose, which Invitation to update.
     */
    where: InvitationWhereUniqueInput
  }

  /**
   * Invitation updateMany
   */
  export type InvitationUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Invitations.
     */
    data: XOR<InvitationUpdateManyMutationInput, InvitationUncheckedUpdateManyInput>
    /**
     * Filter which Invitations to update
     */
    where?: InvitationWhereInput
    /**
     * Limit how many Invitations to update.
     */
    limit?: number
  }

  /**
   * Invitation upsert
   */
  export type InvitationUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Invitation
     */
    select?: InvitationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Invitation
     */
    omit?: InvitationOmit<ExtArgs> | null
    /**
     * The filter to search for the Invitation to update in case it exists.
     */
    where: InvitationWhereUniqueInput
    /**
     * In case the Invitation found by the `where` argument doesn't exist, create a new Invitation with this data.
     */
    create: XOR<InvitationCreateInput, InvitationUncheckedCreateInput>
    /**
     * In case the Invitation was found with the provided `where` argument, update it with this data.
     */
    update: XOR<InvitationUpdateInput, InvitationUncheckedUpdateInput>
  }

  /**
   * Invitation delete
   */
  export type InvitationDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Invitation
     */
    select?: InvitationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Invitation
     */
    omit?: InvitationOmit<ExtArgs> | null
    /**
     * Filter which Invitation to delete.
     */
    where: InvitationWhereUniqueInput
  }

  /**
   * Invitation deleteMany
   */
  export type InvitationDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Invitations to delete
     */
    where?: InvitationWhereInput
    /**
     * Limit how many Invitations to delete.
     */
    limit?: number
  }

  /**
   * Invitation without action
   */
  export type InvitationDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Invitation
     */
    select?: InvitationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Invitation
     */
    omit?: InvitationOmit<ExtArgs> | null
  }


  /**
   * Model Outcome
   */

  export type AggregateOutcome = {
    _count: OutcomeCountAggregateOutputType | null
    _avg: OutcomeAvgAggregateOutputType | null
    _sum: OutcomeSumAggregateOutputType | null
    _min: OutcomeMinAggregateOutputType | null
    _max: OutcomeMaxAggregateOutputType | null
  }

  export type OutcomeAvgAggregateOutputType = {
    id: number | null
    responseInterval: number | null
    points: number | null
    pub: number | null
    gameDayId: number | null
    playerId: number | null
  }

  export type OutcomeSumAggregateOutputType = {
    id: number | null
    responseInterval: number | null
    points: number | null
    pub: number | null
    gameDayId: number | null
    playerId: number | null
  }

  export type OutcomeMinAggregateOutputType = {
    id: number | null
    response: $Enums.PlayerResponse | null
    responseInterval: number | null
    points: number | null
    team: $Enums.TeamName | null
    comment: string | null
    pub: number | null
    paid: boolean | null
    goalie: boolean | null
    gameDayId: number | null
    playerId: number | null
  }

  export type OutcomeMaxAggregateOutputType = {
    id: number | null
    response: $Enums.PlayerResponse | null
    responseInterval: number | null
    points: number | null
    team: $Enums.TeamName | null
    comment: string | null
    pub: number | null
    paid: boolean | null
    goalie: boolean | null
    gameDayId: number | null
    playerId: number | null
  }

  export type OutcomeCountAggregateOutputType = {
    id: number
    response: number
    responseInterval: number
    points: number
    team: number
    comment: number
    pub: number
    paid: number
    goalie: number
    gameDayId: number
    playerId: number
    _all: number
  }


  export type OutcomeAvgAggregateInputType = {
    id?: true
    responseInterval?: true
    points?: true
    pub?: true
    gameDayId?: true
    playerId?: true
  }

  export type OutcomeSumAggregateInputType = {
    id?: true
    responseInterval?: true
    points?: true
    pub?: true
    gameDayId?: true
    playerId?: true
  }

  export type OutcomeMinAggregateInputType = {
    id?: true
    response?: true
    responseInterval?: true
    points?: true
    team?: true
    comment?: true
    pub?: true
    paid?: true
    goalie?: true
    gameDayId?: true
    playerId?: true
  }

  export type OutcomeMaxAggregateInputType = {
    id?: true
    response?: true
    responseInterval?: true
    points?: true
    team?: true
    comment?: true
    pub?: true
    paid?: true
    goalie?: true
    gameDayId?: true
    playerId?: true
  }

  export type OutcomeCountAggregateInputType = {
    id?: true
    response?: true
    responseInterval?: true
    points?: true
    team?: true
    comment?: true
    pub?: true
    paid?: true
    goalie?: true
    gameDayId?: true
    playerId?: true
    _all?: true
  }

  export type OutcomeAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Outcome to aggregate.
     */
    where?: OutcomeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Outcomes to fetch.
     */
    orderBy?: OutcomeOrderByWithRelationInput | OutcomeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: OutcomeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Outcomes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Outcomes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Outcomes
    **/
    _count?: true | OutcomeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: OutcomeAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: OutcomeSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: OutcomeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: OutcomeMaxAggregateInputType
  }

  export type GetOutcomeAggregateType<T extends OutcomeAggregateArgs> = {
        [P in keyof T & keyof AggregateOutcome]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateOutcome[P]>
      : GetScalarType<T[P], AggregateOutcome[P]>
  }




  export type OutcomeGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: OutcomeWhereInput
    orderBy?: OutcomeOrderByWithAggregationInput | OutcomeOrderByWithAggregationInput[]
    by: OutcomeScalarFieldEnum[] | OutcomeScalarFieldEnum
    having?: OutcomeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: OutcomeCountAggregateInputType | true
    _avg?: OutcomeAvgAggregateInputType
    _sum?: OutcomeSumAggregateInputType
    _min?: OutcomeMinAggregateInputType
    _max?: OutcomeMaxAggregateInputType
  }

  export type OutcomeGroupByOutputType = {
    id: number
    response: $Enums.PlayerResponse | null
    responseInterval: number | null
    points: number | null
    team: $Enums.TeamName | null
    comment: string | null
    pub: number | null
    paid: boolean | null
    goalie: boolean | null
    gameDayId: number
    playerId: number
    _count: OutcomeCountAggregateOutputType | null
    _avg: OutcomeAvgAggregateOutputType | null
    _sum: OutcomeSumAggregateOutputType | null
    _min: OutcomeMinAggregateOutputType | null
    _max: OutcomeMaxAggregateOutputType | null
  }

  type GetOutcomeGroupByPayload<T extends OutcomeGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<OutcomeGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof OutcomeGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], OutcomeGroupByOutputType[P]>
            : GetScalarType<T[P], OutcomeGroupByOutputType[P]>
        }
      >
    >


  export type OutcomeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    response?: boolean
    responseInterval?: boolean
    points?: boolean
    team?: boolean
    comment?: boolean
    pub?: boolean
    paid?: boolean
    goalie?: boolean
    gameDayId?: boolean
    playerId?: boolean
    gameDay?: boolean | GameDayDefaultArgs<ExtArgs>
    player?: boolean | PlayerDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["outcome"]>



  export type OutcomeSelectScalar = {
    id?: boolean
    response?: boolean
    responseInterval?: boolean
    points?: boolean
    team?: boolean
    comment?: boolean
    pub?: boolean
    paid?: boolean
    goalie?: boolean
    gameDayId?: boolean
    playerId?: boolean
  }

  export type OutcomeOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "response" | "responseInterval" | "points" | "team" | "comment" | "pub" | "paid" | "goalie" | "gameDayId" | "playerId", ExtArgs["result"]["outcome"]>
  export type OutcomeInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    gameDay?: boolean | GameDayDefaultArgs<ExtArgs>
    player?: boolean | PlayerDefaultArgs<ExtArgs>
  }

  export type $OutcomePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Outcome"
    objects: {
      gameDay: Prisma.$GameDayPayload<ExtArgs>
      player: Prisma.$PlayerPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      response: $Enums.PlayerResponse | null
      responseInterval: number | null
      points: number | null
      team: $Enums.TeamName | null
      comment: string | null
      pub: number | null
      paid: boolean | null
      goalie: boolean | null
      gameDayId: number
      playerId: number
    }, ExtArgs["result"]["outcome"]>
    composites: {}
  }

  type OutcomeGetPayload<S extends boolean | null | undefined | OutcomeDefaultArgs> = $Result.GetResult<Prisma.$OutcomePayload, S>

  type OutcomeCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<OutcomeFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: OutcomeCountAggregateInputType | true
    }

  export interface OutcomeDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Outcome'], meta: { name: 'Outcome' } }
    /**
     * Find zero or one Outcome that matches the filter.
     * @param {OutcomeFindUniqueArgs} args - Arguments to find a Outcome
     * @example
     * // Get one Outcome
     * const outcome = await prisma.outcome.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends OutcomeFindUniqueArgs>(args: SelectSubset<T, OutcomeFindUniqueArgs<ExtArgs>>): Prisma__OutcomeClient<$Result.GetResult<Prisma.$OutcomePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Outcome that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {OutcomeFindUniqueOrThrowArgs} args - Arguments to find a Outcome
     * @example
     * // Get one Outcome
     * const outcome = await prisma.outcome.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends OutcomeFindUniqueOrThrowArgs>(args: SelectSubset<T, OutcomeFindUniqueOrThrowArgs<ExtArgs>>): Prisma__OutcomeClient<$Result.GetResult<Prisma.$OutcomePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Outcome that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OutcomeFindFirstArgs} args - Arguments to find a Outcome
     * @example
     * // Get one Outcome
     * const outcome = await prisma.outcome.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends OutcomeFindFirstArgs>(args?: SelectSubset<T, OutcomeFindFirstArgs<ExtArgs>>): Prisma__OutcomeClient<$Result.GetResult<Prisma.$OutcomePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Outcome that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OutcomeFindFirstOrThrowArgs} args - Arguments to find a Outcome
     * @example
     * // Get one Outcome
     * const outcome = await prisma.outcome.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends OutcomeFindFirstOrThrowArgs>(args?: SelectSubset<T, OutcomeFindFirstOrThrowArgs<ExtArgs>>): Prisma__OutcomeClient<$Result.GetResult<Prisma.$OutcomePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Outcomes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OutcomeFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Outcomes
     * const outcomes = await prisma.outcome.findMany()
     * 
     * // Get first 10 Outcomes
     * const outcomes = await prisma.outcome.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const outcomeWithIdOnly = await prisma.outcome.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends OutcomeFindManyArgs>(args?: SelectSubset<T, OutcomeFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OutcomePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Outcome.
     * @param {OutcomeCreateArgs} args - Arguments to create a Outcome.
     * @example
     * // Create one Outcome
     * const Outcome = await prisma.outcome.create({
     *   data: {
     *     // ... data to create a Outcome
     *   }
     * })
     * 
     */
    create<T extends OutcomeCreateArgs>(args: SelectSubset<T, OutcomeCreateArgs<ExtArgs>>): Prisma__OutcomeClient<$Result.GetResult<Prisma.$OutcomePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Outcomes.
     * @param {OutcomeCreateManyArgs} args - Arguments to create many Outcomes.
     * @example
     * // Create many Outcomes
     * const outcome = await prisma.outcome.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends OutcomeCreateManyArgs>(args?: SelectSubset<T, OutcomeCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Outcome.
     * @param {OutcomeDeleteArgs} args - Arguments to delete one Outcome.
     * @example
     * // Delete one Outcome
     * const Outcome = await prisma.outcome.delete({
     *   where: {
     *     // ... filter to delete one Outcome
     *   }
     * })
     * 
     */
    delete<T extends OutcomeDeleteArgs>(args: SelectSubset<T, OutcomeDeleteArgs<ExtArgs>>): Prisma__OutcomeClient<$Result.GetResult<Prisma.$OutcomePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Outcome.
     * @param {OutcomeUpdateArgs} args - Arguments to update one Outcome.
     * @example
     * // Update one Outcome
     * const outcome = await prisma.outcome.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends OutcomeUpdateArgs>(args: SelectSubset<T, OutcomeUpdateArgs<ExtArgs>>): Prisma__OutcomeClient<$Result.GetResult<Prisma.$OutcomePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Outcomes.
     * @param {OutcomeDeleteManyArgs} args - Arguments to filter Outcomes to delete.
     * @example
     * // Delete a few Outcomes
     * const { count } = await prisma.outcome.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends OutcomeDeleteManyArgs>(args?: SelectSubset<T, OutcomeDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Outcomes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OutcomeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Outcomes
     * const outcome = await prisma.outcome.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends OutcomeUpdateManyArgs>(args: SelectSubset<T, OutcomeUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Outcome.
     * @param {OutcomeUpsertArgs} args - Arguments to update or create a Outcome.
     * @example
     * // Update or create a Outcome
     * const outcome = await prisma.outcome.upsert({
     *   create: {
     *     // ... data to create a Outcome
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Outcome we want to update
     *   }
     * })
     */
    upsert<T extends OutcomeUpsertArgs>(args: SelectSubset<T, OutcomeUpsertArgs<ExtArgs>>): Prisma__OutcomeClient<$Result.GetResult<Prisma.$OutcomePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Outcomes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OutcomeCountArgs} args - Arguments to filter Outcomes to count.
     * @example
     * // Count the number of Outcomes
     * const count = await prisma.outcome.count({
     *   where: {
     *     // ... the filter for the Outcomes we want to count
     *   }
     * })
    **/
    count<T extends OutcomeCountArgs>(
      args?: Subset<T, OutcomeCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], OutcomeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Outcome.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OutcomeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends OutcomeAggregateArgs>(args: Subset<T, OutcomeAggregateArgs>): Prisma.PrismaPromise<GetOutcomeAggregateType<T>>

    /**
     * Group by Outcome.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OutcomeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends OutcomeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: OutcomeGroupByArgs['orderBy'] }
        : { orderBy?: OutcomeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, OutcomeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetOutcomeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Outcome model
   */
  readonly fields: OutcomeFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Outcome.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__OutcomeClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    gameDay<T extends GameDayDefaultArgs<ExtArgs> = {}>(args?: Subset<T, GameDayDefaultArgs<ExtArgs>>): Prisma__GameDayClient<$Result.GetResult<Prisma.$GameDayPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    player<T extends PlayerDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PlayerDefaultArgs<ExtArgs>>): Prisma__PlayerClient<$Result.GetResult<Prisma.$PlayerPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Outcome model
   */
  interface OutcomeFieldRefs {
    readonly id: FieldRef<"Outcome", 'Int'>
    readonly response: FieldRef<"Outcome", 'PlayerResponse'>
    readonly responseInterval: FieldRef<"Outcome", 'Int'>
    readonly points: FieldRef<"Outcome", 'Int'>
    readonly team: FieldRef<"Outcome", 'TeamName'>
    readonly comment: FieldRef<"Outcome", 'String'>
    readonly pub: FieldRef<"Outcome", 'Int'>
    readonly paid: FieldRef<"Outcome", 'Boolean'>
    readonly goalie: FieldRef<"Outcome", 'Boolean'>
    readonly gameDayId: FieldRef<"Outcome", 'Int'>
    readonly playerId: FieldRef<"Outcome", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Outcome findUnique
   */
  export type OutcomeFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Outcome
     */
    select?: OutcomeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Outcome
     */
    omit?: OutcomeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OutcomeInclude<ExtArgs> | null
    /**
     * Filter, which Outcome to fetch.
     */
    where: OutcomeWhereUniqueInput
  }

  /**
   * Outcome findUniqueOrThrow
   */
  export type OutcomeFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Outcome
     */
    select?: OutcomeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Outcome
     */
    omit?: OutcomeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OutcomeInclude<ExtArgs> | null
    /**
     * Filter, which Outcome to fetch.
     */
    where: OutcomeWhereUniqueInput
  }

  /**
   * Outcome findFirst
   */
  export type OutcomeFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Outcome
     */
    select?: OutcomeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Outcome
     */
    omit?: OutcomeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OutcomeInclude<ExtArgs> | null
    /**
     * Filter, which Outcome to fetch.
     */
    where?: OutcomeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Outcomes to fetch.
     */
    orderBy?: OutcomeOrderByWithRelationInput | OutcomeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Outcomes.
     */
    cursor?: OutcomeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Outcomes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Outcomes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Outcomes.
     */
    distinct?: OutcomeScalarFieldEnum | OutcomeScalarFieldEnum[]
  }

  /**
   * Outcome findFirstOrThrow
   */
  export type OutcomeFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Outcome
     */
    select?: OutcomeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Outcome
     */
    omit?: OutcomeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OutcomeInclude<ExtArgs> | null
    /**
     * Filter, which Outcome to fetch.
     */
    where?: OutcomeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Outcomes to fetch.
     */
    orderBy?: OutcomeOrderByWithRelationInput | OutcomeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Outcomes.
     */
    cursor?: OutcomeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Outcomes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Outcomes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Outcomes.
     */
    distinct?: OutcomeScalarFieldEnum | OutcomeScalarFieldEnum[]
  }

  /**
   * Outcome findMany
   */
  export type OutcomeFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Outcome
     */
    select?: OutcomeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Outcome
     */
    omit?: OutcomeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OutcomeInclude<ExtArgs> | null
    /**
     * Filter, which Outcomes to fetch.
     */
    where?: OutcomeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Outcomes to fetch.
     */
    orderBy?: OutcomeOrderByWithRelationInput | OutcomeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Outcomes.
     */
    cursor?: OutcomeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Outcomes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Outcomes.
     */
    skip?: number
    distinct?: OutcomeScalarFieldEnum | OutcomeScalarFieldEnum[]
  }

  /**
   * Outcome create
   */
  export type OutcomeCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Outcome
     */
    select?: OutcomeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Outcome
     */
    omit?: OutcomeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OutcomeInclude<ExtArgs> | null
    /**
     * The data needed to create a Outcome.
     */
    data: XOR<OutcomeCreateInput, OutcomeUncheckedCreateInput>
  }

  /**
   * Outcome createMany
   */
  export type OutcomeCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Outcomes.
     */
    data: OutcomeCreateManyInput | OutcomeCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Outcome update
   */
  export type OutcomeUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Outcome
     */
    select?: OutcomeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Outcome
     */
    omit?: OutcomeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OutcomeInclude<ExtArgs> | null
    /**
     * The data needed to update a Outcome.
     */
    data: XOR<OutcomeUpdateInput, OutcomeUncheckedUpdateInput>
    /**
     * Choose, which Outcome to update.
     */
    where: OutcomeWhereUniqueInput
  }

  /**
   * Outcome updateMany
   */
  export type OutcomeUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Outcomes.
     */
    data: XOR<OutcomeUpdateManyMutationInput, OutcomeUncheckedUpdateManyInput>
    /**
     * Filter which Outcomes to update
     */
    where?: OutcomeWhereInput
    /**
     * Limit how many Outcomes to update.
     */
    limit?: number
  }

  /**
   * Outcome upsert
   */
  export type OutcomeUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Outcome
     */
    select?: OutcomeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Outcome
     */
    omit?: OutcomeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OutcomeInclude<ExtArgs> | null
    /**
     * The filter to search for the Outcome to update in case it exists.
     */
    where: OutcomeWhereUniqueInput
    /**
     * In case the Outcome found by the `where` argument doesn't exist, create a new Outcome with this data.
     */
    create: XOR<OutcomeCreateInput, OutcomeUncheckedCreateInput>
    /**
     * In case the Outcome was found with the provided `where` argument, update it with this data.
     */
    update: XOR<OutcomeUpdateInput, OutcomeUncheckedUpdateInput>
  }

  /**
   * Outcome delete
   */
  export type OutcomeDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Outcome
     */
    select?: OutcomeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Outcome
     */
    omit?: OutcomeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OutcomeInclude<ExtArgs> | null
    /**
     * Filter which Outcome to delete.
     */
    where: OutcomeWhereUniqueInput
  }

  /**
   * Outcome deleteMany
   */
  export type OutcomeDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Outcomes to delete
     */
    where?: OutcomeWhereInput
    /**
     * Limit how many Outcomes to delete.
     */
    limit?: number
  }

  /**
   * Outcome without action
   */
  export type OutcomeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Outcome
     */
    select?: OutcomeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Outcome
     */
    omit?: OutcomeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OutcomeInclude<ExtArgs> | null
  }


  /**
   * Model Picker
   */

  export type AggregatePicker = {
    _count: PickerCountAggregateOutputType | null
    _avg: PickerAvgAggregateOutputType | null
    _sum: PickerSumAggregateOutputType | null
    _min: PickerMinAggregateOutputType | null
    _max: PickerMaxAggregateOutputType | null
  }

  export type PickerAvgAggregateOutputType = {
    playerId: number | null
    age: number | null
    average: number | null
    goalie: number | null
    played: number | null
  }

  export type PickerSumAggregateOutputType = {
    playerId: number | null
    age: number | null
    average: number | null
    goalie: number | null
    played: number | null
  }

  export type PickerMinAggregateOutputType = {
    playerId: number | null
    playerName: string | null
    age: number | null
    average: number | null
    goalie: number | null
    played: number | null
  }

  export type PickerMaxAggregateOutputType = {
    playerId: number | null
    playerName: string | null
    age: number | null
    average: number | null
    goalie: number | null
    played: number | null
  }

  export type PickerCountAggregateOutputType = {
    playerId: number
    playerName: number
    age: number
    average: number
    goalie: number
    played: number
    _all: number
  }


  export type PickerAvgAggregateInputType = {
    playerId?: true
    age?: true
    average?: true
    goalie?: true
    played?: true
  }

  export type PickerSumAggregateInputType = {
    playerId?: true
    age?: true
    average?: true
    goalie?: true
    played?: true
  }

  export type PickerMinAggregateInputType = {
    playerId?: true
    playerName?: true
    age?: true
    average?: true
    goalie?: true
    played?: true
  }

  export type PickerMaxAggregateInputType = {
    playerId?: true
    playerName?: true
    age?: true
    average?: true
    goalie?: true
    played?: true
  }

  export type PickerCountAggregateInputType = {
    playerId?: true
    playerName?: true
    age?: true
    average?: true
    goalie?: true
    played?: true
    _all?: true
  }

  export type PickerAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Picker to aggregate.
     */
    where?: PickerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Pickers to fetch.
     */
    orderBy?: PickerOrderByWithRelationInput | PickerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PickerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Pickers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Pickers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Pickers
    **/
    _count?: true | PickerCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PickerAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PickerSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PickerMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PickerMaxAggregateInputType
  }

  export type GetPickerAggregateType<T extends PickerAggregateArgs> = {
        [P in keyof T & keyof AggregatePicker]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePicker[P]>
      : GetScalarType<T[P], AggregatePicker[P]>
  }




  export type PickerGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PickerWhereInput
    orderBy?: PickerOrderByWithAggregationInput | PickerOrderByWithAggregationInput[]
    by: PickerScalarFieldEnum[] | PickerScalarFieldEnum
    having?: PickerScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PickerCountAggregateInputType | true
    _avg?: PickerAvgAggregateInputType
    _sum?: PickerSumAggregateInputType
    _min?: PickerMinAggregateInputType
    _max?: PickerMaxAggregateInputType
  }

  export type PickerGroupByOutputType = {
    playerId: number
    playerName: string | null
    age: number | null
    average: number | null
    goalie: number | null
    played: number | null
    _count: PickerCountAggregateOutputType | null
    _avg: PickerAvgAggregateOutputType | null
    _sum: PickerSumAggregateOutputType | null
    _min: PickerMinAggregateOutputType | null
    _max: PickerMaxAggregateOutputType | null
  }

  type GetPickerGroupByPayload<T extends PickerGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PickerGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PickerGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PickerGroupByOutputType[P]>
            : GetScalarType<T[P], PickerGroupByOutputType[P]>
        }
      >
    >


  export type PickerSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    playerId?: boolean
    playerName?: boolean
    age?: boolean
    average?: boolean
    goalie?: boolean
    played?: boolean
  }, ExtArgs["result"]["picker"]>



  export type PickerSelectScalar = {
    playerId?: boolean
    playerName?: boolean
    age?: boolean
    average?: boolean
    goalie?: boolean
    played?: boolean
  }

  export type PickerOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"playerId" | "playerName" | "age" | "average" | "goalie" | "played", ExtArgs["result"]["picker"]>

  export type $PickerPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Picker"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      playerId: number
      playerName: string | null
      age: number | null
      average: number | null
      goalie: number | null
      played: number | null
    }, ExtArgs["result"]["picker"]>
    composites: {}
  }

  type PickerGetPayload<S extends boolean | null | undefined | PickerDefaultArgs> = $Result.GetResult<Prisma.$PickerPayload, S>

  type PickerCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<PickerFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: PickerCountAggregateInputType | true
    }

  export interface PickerDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Picker'], meta: { name: 'Picker' } }
    /**
     * Find zero or one Picker that matches the filter.
     * @param {PickerFindUniqueArgs} args - Arguments to find a Picker
     * @example
     * // Get one Picker
     * const picker = await prisma.picker.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PickerFindUniqueArgs>(args: SelectSubset<T, PickerFindUniqueArgs<ExtArgs>>): Prisma__PickerClient<$Result.GetResult<Prisma.$PickerPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Picker that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {PickerFindUniqueOrThrowArgs} args - Arguments to find a Picker
     * @example
     * // Get one Picker
     * const picker = await prisma.picker.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PickerFindUniqueOrThrowArgs>(args: SelectSubset<T, PickerFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PickerClient<$Result.GetResult<Prisma.$PickerPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Picker that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PickerFindFirstArgs} args - Arguments to find a Picker
     * @example
     * // Get one Picker
     * const picker = await prisma.picker.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PickerFindFirstArgs>(args?: SelectSubset<T, PickerFindFirstArgs<ExtArgs>>): Prisma__PickerClient<$Result.GetResult<Prisma.$PickerPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Picker that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PickerFindFirstOrThrowArgs} args - Arguments to find a Picker
     * @example
     * // Get one Picker
     * const picker = await prisma.picker.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PickerFindFirstOrThrowArgs>(args?: SelectSubset<T, PickerFindFirstOrThrowArgs<ExtArgs>>): Prisma__PickerClient<$Result.GetResult<Prisma.$PickerPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Pickers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PickerFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Pickers
     * const pickers = await prisma.picker.findMany()
     * 
     * // Get first 10 Pickers
     * const pickers = await prisma.picker.findMany({ take: 10 })
     * 
     * // Only select the `playerId`
     * const pickerWithPlayerIdOnly = await prisma.picker.findMany({ select: { playerId: true } })
     * 
     */
    findMany<T extends PickerFindManyArgs>(args?: SelectSubset<T, PickerFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PickerPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Picker.
     * @param {PickerCreateArgs} args - Arguments to create a Picker.
     * @example
     * // Create one Picker
     * const Picker = await prisma.picker.create({
     *   data: {
     *     // ... data to create a Picker
     *   }
     * })
     * 
     */
    create<T extends PickerCreateArgs>(args: SelectSubset<T, PickerCreateArgs<ExtArgs>>): Prisma__PickerClient<$Result.GetResult<Prisma.$PickerPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Pickers.
     * @param {PickerCreateManyArgs} args - Arguments to create many Pickers.
     * @example
     * // Create many Pickers
     * const picker = await prisma.picker.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PickerCreateManyArgs>(args?: SelectSubset<T, PickerCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Picker.
     * @param {PickerDeleteArgs} args - Arguments to delete one Picker.
     * @example
     * // Delete one Picker
     * const Picker = await prisma.picker.delete({
     *   where: {
     *     // ... filter to delete one Picker
     *   }
     * })
     * 
     */
    delete<T extends PickerDeleteArgs>(args: SelectSubset<T, PickerDeleteArgs<ExtArgs>>): Prisma__PickerClient<$Result.GetResult<Prisma.$PickerPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Picker.
     * @param {PickerUpdateArgs} args - Arguments to update one Picker.
     * @example
     * // Update one Picker
     * const picker = await prisma.picker.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PickerUpdateArgs>(args: SelectSubset<T, PickerUpdateArgs<ExtArgs>>): Prisma__PickerClient<$Result.GetResult<Prisma.$PickerPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Pickers.
     * @param {PickerDeleteManyArgs} args - Arguments to filter Pickers to delete.
     * @example
     * // Delete a few Pickers
     * const { count } = await prisma.picker.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PickerDeleteManyArgs>(args?: SelectSubset<T, PickerDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Pickers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PickerUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Pickers
     * const picker = await prisma.picker.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PickerUpdateManyArgs>(args: SelectSubset<T, PickerUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Picker.
     * @param {PickerUpsertArgs} args - Arguments to update or create a Picker.
     * @example
     * // Update or create a Picker
     * const picker = await prisma.picker.upsert({
     *   create: {
     *     // ... data to create a Picker
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Picker we want to update
     *   }
     * })
     */
    upsert<T extends PickerUpsertArgs>(args: SelectSubset<T, PickerUpsertArgs<ExtArgs>>): Prisma__PickerClient<$Result.GetResult<Prisma.$PickerPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Pickers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PickerCountArgs} args - Arguments to filter Pickers to count.
     * @example
     * // Count the number of Pickers
     * const count = await prisma.picker.count({
     *   where: {
     *     // ... the filter for the Pickers we want to count
     *   }
     * })
    **/
    count<T extends PickerCountArgs>(
      args?: Subset<T, PickerCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PickerCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Picker.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PickerAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PickerAggregateArgs>(args: Subset<T, PickerAggregateArgs>): Prisma.PrismaPromise<GetPickerAggregateType<T>>

    /**
     * Group by Picker.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PickerGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PickerGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PickerGroupByArgs['orderBy'] }
        : { orderBy?: PickerGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PickerGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPickerGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Picker model
   */
  readonly fields: PickerFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Picker.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PickerClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Picker model
   */
  interface PickerFieldRefs {
    readonly playerId: FieldRef<"Picker", 'Int'>
    readonly playerName: FieldRef<"Picker", 'String'>
    readonly age: FieldRef<"Picker", 'Int'>
    readonly average: FieldRef<"Picker", 'Float'>
    readonly goalie: FieldRef<"Picker", 'Int'>
    readonly played: FieldRef<"Picker", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Picker findUnique
   */
  export type PickerFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Picker
     */
    select?: PickerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Picker
     */
    omit?: PickerOmit<ExtArgs> | null
    /**
     * Filter, which Picker to fetch.
     */
    where: PickerWhereUniqueInput
  }

  /**
   * Picker findUniqueOrThrow
   */
  export type PickerFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Picker
     */
    select?: PickerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Picker
     */
    omit?: PickerOmit<ExtArgs> | null
    /**
     * Filter, which Picker to fetch.
     */
    where: PickerWhereUniqueInput
  }

  /**
   * Picker findFirst
   */
  export type PickerFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Picker
     */
    select?: PickerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Picker
     */
    omit?: PickerOmit<ExtArgs> | null
    /**
     * Filter, which Picker to fetch.
     */
    where?: PickerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Pickers to fetch.
     */
    orderBy?: PickerOrderByWithRelationInput | PickerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Pickers.
     */
    cursor?: PickerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Pickers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Pickers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Pickers.
     */
    distinct?: PickerScalarFieldEnum | PickerScalarFieldEnum[]
  }

  /**
   * Picker findFirstOrThrow
   */
  export type PickerFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Picker
     */
    select?: PickerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Picker
     */
    omit?: PickerOmit<ExtArgs> | null
    /**
     * Filter, which Picker to fetch.
     */
    where?: PickerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Pickers to fetch.
     */
    orderBy?: PickerOrderByWithRelationInput | PickerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Pickers.
     */
    cursor?: PickerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Pickers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Pickers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Pickers.
     */
    distinct?: PickerScalarFieldEnum | PickerScalarFieldEnum[]
  }

  /**
   * Picker findMany
   */
  export type PickerFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Picker
     */
    select?: PickerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Picker
     */
    omit?: PickerOmit<ExtArgs> | null
    /**
     * Filter, which Pickers to fetch.
     */
    where?: PickerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Pickers to fetch.
     */
    orderBy?: PickerOrderByWithRelationInput | PickerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Pickers.
     */
    cursor?: PickerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Pickers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Pickers.
     */
    skip?: number
    distinct?: PickerScalarFieldEnum | PickerScalarFieldEnum[]
  }

  /**
   * Picker create
   */
  export type PickerCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Picker
     */
    select?: PickerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Picker
     */
    omit?: PickerOmit<ExtArgs> | null
    /**
     * The data needed to create a Picker.
     */
    data: XOR<PickerCreateInput, PickerUncheckedCreateInput>
  }

  /**
   * Picker createMany
   */
  export type PickerCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Pickers.
     */
    data: PickerCreateManyInput | PickerCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Picker update
   */
  export type PickerUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Picker
     */
    select?: PickerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Picker
     */
    omit?: PickerOmit<ExtArgs> | null
    /**
     * The data needed to update a Picker.
     */
    data: XOR<PickerUpdateInput, PickerUncheckedUpdateInput>
    /**
     * Choose, which Picker to update.
     */
    where: PickerWhereUniqueInput
  }

  /**
   * Picker updateMany
   */
  export type PickerUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Pickers.
     */
    data: XOR<PickerUpdateManyMutationInput, PickerUncheckedUpdateManyInput>
    /**
     * Filter which Pickers to update
     */
    where?: PickerWhereInput
    /**
     * Limit how many Pickers to update.
     */
    limit?: number
  }

  /**
   * Picker upsert
   */
  export type PickerUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Picker
     */
    select?: PickerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Picker
     */
    omit?: PickerOmit<ExtArgs> | null
    /**
     * The filter to search for the Picker to update in case it exists.
     */
    where: PickerWhereUniqueInput
    /**
     * In case the Picker found by the `where` argument doesn't exist, create a new Picker with this data.
     */
    create: XOR<PickerCreateInput, PickerUncheckedCreateInput>
    /**
     * In case the Picker was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PickerUpdateInput, PickerUncheckedUpdateInput>
  }

  /**
   * Picker delete
   */
  export type PickerDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Picker
     */
    select?: PickerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Picker
     */
    omit?: PickerOmit<ExtArgs> | null
    /**
     * Filter which Picker to delete.
     */
    where: PickerWhereUniqueInput
  }

  /**
   * Picker deleteMany
   */
  export type PickerDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Pickers to delete
     */
    where?: PickerWhereInput
    /**
     * Limit how many Pickers to delete.
     */
    limit?: number
  }

  /**
   * Picker without action
   */
  export type PickerDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Picker
     */
    select?: PickerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Picker
     */
    omit?: PickerOmit<ExtArgs> | null
  }


  /**
   * Model PickerTeams
   */

  export type AggregatePickerTeams = {
    _count: PickerTeamsCountAggregateOutputType | null
    _avg: PickerTeamsAvgAggregateOutputType | null
    _sum: PickerTeamsSumAggregateOutputType | null
    _min: PickerTeamsMinAggregateOutputType | null
    _max: PickerTeamsMaxAggregateOutputType | null
  }

  export type PickerTeamsAvgAggregateOutputType = {
    playerId: number | null
  }

  export type PickerTeamsSumAggregateOutputType = {
    playerId: number | null
  }

  export type PickerTeamsMinAggregateOutputType = {
    playerId: number | null
    team: $Enums.TeamName | null
  }

  export type PickerTeamsMaxAggregateOutputType = {
    playerId: number | null
    team: $Enums.TeamName | null
  }

  export type PickerTeamsCountAggregateOutputType = {
    playerId: number
    team: number
    _all: number
  }


  export type PickerTeamsAvgAggregateInputType = {
    playerId?: true
  }

  export type PickerTeamsSumAggregateInputType = {
    playerId?: true
  }

  export type PickerTeamsMinAggregateInputType = {
    playerId?: true
    team?: true
  }

  export type PickerTeamsMaxAggregateInputType = {
    playerId?: true
    team?: true
  }

  export type PickerTeamsCountAggregateInputType = {
    playerId?: true
    team?: true
    _all?: true
  }

  export type PickerTeamsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PickerTeams to aggregate.
     */
    where?: PickerTeamsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PickerTeams to fetch.
     */
    orderBy?: PickerTeamsOrderByWithRelationInput | PickerTeamsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PickerTeamsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PickerTeams from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PickerTeams.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned PickerTeams
    **/
    _count?: true | PickerTeamsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PickerTeamsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PickerTeamsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PickerTeamsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PickerTeamsMaxAggregateInputType
  }

  export type GetPickerTeamsAggregateType<T extends PickerTeamsAggregateArgs> = {
        [P in keyof T & keyof AggregatePickerTeams]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePickerTeams[P]>
      : GetScalarType<T[P], AggregatePickerTeams[P]>
  }




  export type PickerTeamsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PickerTeamsWhereInput
    orderBy?: PickerTeamsOrderByWithAggregationInput | PickerTeamsOrderByWithAggregationInput[]
    by: PickerTeamsScalarFieldEnum[] | PickerTeamsScalarFieldEnum
    having?: PickerTeamsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PickerTeamsCountAggregateInputType | true
    _avg?: PickerTeamsAvgAggregateInputType
    _sum?: PickerTeamsSumAggregateInputType
    _min?: PickerTeamsMinAggregateInputType
    _max?: PickerTeamsMaxAggregateInputType
  }

  export type PickerTeamsGroupByOutputType = {
    playerId: number
    team: $Enums.TeamName | null
    _count: PickerTeamsCountAggregateOutputType | null
    _avg: PickerTeamsAvgAggregateOutputType | null
    _sum: PickerTeamsSumAggregateOutputType | null
    _min: PickerTeamsMinAggregateOutputType | null
    _max: PickerTeamsMaxAggregateOutputType | null
  }

  type GetPickerTeamsGroupByPayload<T extends PickerTeamsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PickerTeamsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PickerTeamsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PickerTeamsGroupByOutputType[P]>
            : GetScalarType<T[P], PickerTeamsGroupByOutputType[P]>
        }
      >
    >


  export type PickerTeamsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    playerId?: boolean
    team?: boolean
  }, ExtArgs["result"]["pickerTeams"]>



  export type PickerTeamsSelectScalar = {
    playerId?: boolean
    team?: boolean
  }

  export type PickerTeamsOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"playerId" | "team", ExtArgs["result"]["pickerTeams"]>

  export type $PickerTeamsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "PickerTeams"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      playerId: number
      team: $Enums.TeamName | null
    }, ExtArgs["result"]["pickerTeams"]>
    composites: {}
  }

  type PickerTeamsGetPayload<S extends boolean | null | undefined | PickerTeamsDefaultArgs> = $Result.GetResult<Prisma.$PickerTeamsPayload, S>

  type PickerTeamsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<PickerTeamsFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: PickerTeamsCountAggregateInputType | true
    }

  export interface PickerTeamsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['PickerTeams'], meta: { name: 'PickerTeams' } }
    /**
     * Find zero or one PickerTeams that matches the filter.
     * @param {PickerTeamsFindUniqueArgs} args - Arguments to find a PickerTeams
     * @example
     * // Get one PickerTeams
     * const pickerTeams = await prisma.pickerTeams.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PickerTeamsFindUniqueArgs>(args: SelectSubset<T, PickerTeamsFindUniqueArgs<ExtArgs>>): Prisma__PickerTeamsClient<$Result.GetResult<Prisma.$PickerTeamsPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one PickerTeams that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {PickerTeamsFindUniqueOrThrowArgs} args - Arguments to find a PickerTeams
     * @example
     * // Get one PickerTeams
     * const pickerTeams = await prisma.pickerTeams.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PickerTeamsFindUniqueOrThrowArgs>(args: SelectSubset<T, PickerTeamsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PickerTeamsClient<$Result.GetResult<Prisma.$PickerTeamsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first PickerTeams that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PickerTeamsFindFirstArgs} args - Arguments to find a PickerTeams
     * @example
     * // Get one PickerTeams
     * const pickerTeams = await prisma.pickerTeams.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PickerTeamsFindFirstArgs>(args?: SelectSubset<T, PickerTeamsFindFirstArgs<ExtArgs>>): Prisma__PickerTeamsClient<$Result.GetResult<Prisma.$PickerTeamsPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first PickerTeams that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PickerTeamsFindFirstOrThrowArgs} args - Arguments to find a PickerTeams
     * @example
     * // Get one PickerTeams
     * const pickerTeams = await prisma.pickerTeams.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PickerTeamsFindFirstOrThrowArgs>(args?: SelectSubset<T, PickerTeamsFindFirstOrThrowArgs<ExtArgs>>): Prisma__PickerTeamsClient<$Result.GetResult<Prisma.$PickerTeamsPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more PickerTeams that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PickerTeamsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all PickerTeams
     * const pickerTeams = await prisma.pickerTeams.findMany()
     * 
     * // Get first 10 PickerTeams
     * const pickerTeams = await prisma.pickerTeams.findMany({ take: 10 })
     * 
     * // Only select the `playerId`
     * const pickerTeamsWithPlayerIdOnly = await prisma.pickerTeams.findMany({ select: { playerId: true } })
     * 
     */
    findMany<T extends PickerTeamsFindManyArgs>(args?: SelectSubset<T, PickerTeamsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PickerTeamsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a PickerTeams.
     * @param {PickerTeamsCreateArgs} args - Arguments to create a PickerTeams.
     * @example
     * // Create one PickerTeams
     * const PickerTeams = await prisma.pickerTeams.create({
     *   data: {
     *     // ... data to create a PickerTeams
     *   }
     * })
     * 
     */
    create<T extends PickerTeamsCreateArgs>(args: SelectSubset<T, PickerTeamsCreateArgs<ExtArgs>>): Prisma__PickerTeamsClient<$Result.GetResult<Prisma.$PickerTeamsPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many PickerTeams.
     * @param {PickerTeamsCreateManyArgs} args - Arguments to create many PickerTeams.
     * @example
     * // Create many PickerTeams
     * const pickerTeams = await prisma.pickerTeams.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PickerTeamsCreateManyArgs>(args?: SelectSubset<T, PickerTeamsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a PickerTeams.
     * @param {PickerTeamsDeleteArgs} args - Arguments to delete one PickerTeams.
     * @example
     * // Delete one PickerTeams
     * const PickerTeams = await prisma.pickerTeams.delete({
     *   where: {
     *     // ... filter to delete one PickerTeams
     *   }
     * })
     * 
     */
    delete<T extends PickerTeamsDeleteArgs>(args: SelectSubset<T, PickerTeamsDeleteArgs<ExtArgs>>): Prisma__PickerTeamsClient<$Result.GetResult<Prisma.$PickerTeamsPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one PickerTeams.
     * @param {PickerTeamsUpdateArgs} args - Arguments to update one PickerTeams.
     * @example
     * // Update one PickerTeams
     * const pickerTeams = await prisma.pickerTeams.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PickerTeamsUpdateArgs>(args: SelectSubset<T, PickerTeamsUpdateArgs<ExtArgs>>): Prisma__PickerTeamsClient<$Result.GetResult<Prisma.$PickerTeamsPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more PickerTeams.
     * @param {PickerTeamsDeleteManyArgs} args - Arguments to filter PickerTeams to delete.
     * @example
     * // Delete a few PickerTeams
     * const { count } = await prisma.pickerTeams.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PickerTeamsDeleteManyArgs>(args?: SelectSubset<T, PickerTeamsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PickerTeams.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PickerTeamsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many PickerTeams
     * const pickerTeams = await prisma.pickerTeams.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PickerTeamsUpdateManyArgs>(args: SelectSubset<T, PickerTeamsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one PickerTeams.
     * @param {PickerTeamsUpsertArgs} args - Arguments to update or create a PickerTeams.
     * @example
     * // Update or create a PickerTeams
     * const pickerTeams = await prisma.pickerTeams.upsert({
     *   create: {
     *     // ... data to create a PickerTeams
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the PickerTeams we want to update
     *   }
     * })
     */
    upsert<T extends PickerTeamsUpsertArgs>(args: SelectSubset<T, PickerTeamsUpsertArgs<ExtArgs>>): Prisma__PickerTeamsClient<$Result.GetResult<Prisma.$PickerTeamsPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of PickerTeams.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PickerTeamsCountArgs} args - Arguments to filter PickerTeams to count.
     * @example
     * // Count the number of PickerTeams
     * const count = await prisma.pickerTeams.count({
     *   where: {
     *     // ... the filter for the PickerTeams we want to count
     *   }
     * })
    **/
    count<T extends PickerTeamsCountArgs>(
      args?: Subset<T, PickerTeamsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PickerTeamsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a PickerTeams.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PickerTeamsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PickerTeamsAggregateArgs>(args: Subset<T, PickerTeamsAggregateArgs>): Prisma.PrismaPromise<GetPickerTeamsAggregateType<T>>

    /**
     * Group by PickerTeams.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PickerTeamsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PickerTeamsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PickerTeamsGroupByArgs['orderBy'] }
        : { orderBy?: PickerTeamsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PickerTeamsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPickerTeamsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the PickerTeams model
   */
  readonly fields: PickerTeamsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for PickerTeams.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PickerTeamsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the PickerTeams model
   */
  interface PickerTeamsFieldRefs {
    readonly playerId: FieldRef<"PickerTeams", 'Int'>
    readonly team: FieldRef<"PickerTeams", 'TeamName'>
  }
    

  // Custom InputTypes
  /**
   * PickerTeams findUnique
   */
  export type PickerTeamsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PickerTeams
     */
    select?: PickerTeamsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PickerTeams
     */
    omit?: PickerTeamsOmit<ExtArgs> | null
    /**
     * Filter, which PickerTeams to fetch.
     */
    where: PickerTeamsWhereUniqueInput
  }

  /**
   * PickerTeams findUniqueOrThrow
   */
  export type PickerTeamsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PickerTeams
     */
    select?: PickerTeamsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PickerTeams
     */
    omit?: PickerTeamsOmit<ExtArgs> | null
    /**
     * Filter, which PickerTeams to fetch.
     */
    where: PickerTeamsWhereUniqueInput
  }

  /**
   * PickerTeams findFirst
   */
  export type PickerTeamsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PickerTeams
     */
    select?: PickerTeamsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PickerTeams
     */
    omit?: PickerTeamsOmit<ExtArgs> | null
    /**
     * Filter, which PickerTeams to fetch.
     */
    where?: PickerTeamsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PickerTeams to fetch.
     */
    orderBy?: PickerTeamsOrderByWithRelationInput | PickerTeamsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PickerTeams.
     */
    cursor?: PickerTeamsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PickerTeams from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PickerTeams.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PickerTeams.
     */
    distinct?: PickerTeamsScalarFieldEnum | PickerTeamsScalarFieldEnum[]
  }

  /**
   * PickerTeams findFirstOrThrow
   */
  export type PickerTeamsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PickerTeams
     */
    select?: PickerTeamsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PickerTeams
     */
    omit?: PickerTeamsOmit<ExtArgs> | null
    /**
     * Filter, which PickerTeams to fetch.
     */
    where?: PickerTeamsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PickerTeams to fetch.
     */
    orderBy?: PickerTeamsOrderByWithRelationInput | PickerTeamsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PickerTeams.
     */
    cursor?: PickerTeamsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PickerTeams from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PickerTeams.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PickerTeams.
     */
    distinct?: PickerTeamsScalarFieldEnum | PickerTeamsScalarFieldEnum[]
  }

  /**
   * PickerTeams findMany
   */
  export type PickerTeamsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PickerTeams
     */
    select?: PickerTeamsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PickerTeams
     */
    omit?: PickerTeamsOmit<ExtArgs> | null
    /**
     * Filter, which PickerTeams to fetch.
     */
    where?: PickerTeamsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PickerTeams to fetch.
     */
    orderBy?: PickerTeamsOrderByWithRelationInput | PickerTeamsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing PickerTeams.
     */
    cursor?: PickerTeamsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PickerTeams from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PickerTeams.
     */
    skip?: number
    distinct?: PickerTeamsScalarFieldEnum | PickerTeamsScalarFieldEnum[]
  }

  /**
   * PickerTeams create
   */
  export type PickerTeamsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PickerTeams
     */
    select?: PickerTeamsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PickerTeams
     */
    omit?: PickerTeamsOmit<ExtArgs> | null
    /**
     * The data needed to create a PickerTeams.
     */
    data: XOR<PickerTeamsCreateInput, PickerTeamsUncheckedCreateInput>
  }

  /**
   * PickerTeams createMany
   */
  export type PickerTeamsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many PickerTeams.
     */
    data: PickerTeamsCreateManyInput | PickerTeamsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * PickerTeams update
   */
  export type PickerTeamsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PickerTeams
     */
    select?: PickerTeamsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PickerTeams
     */
    omit?: PickerTeamsOmit<ExtArgs> | null
    /**
     * The data needed to update a PickerTeams.
     */
    data: XOR<PickerTeamsUpdateInput, PickerTeamsUncheckedUpdateInput>
    /**
     * Choose, which PickerTeams to update.
     */
    where: PickerTeamsWhereUniqueInput
  }

  /**
   * PickerTeams updateMany
   */
  export type PickerTeamsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update PickerTeams.
     */
    data: XOR<PickerTeamsUpdateManyMutationInput, PickerTeamsUncheckedUpdateManyInput>
    /**
     * Filter which PickerTeams to update
     */
    where?: PickerTeamsWhereInput
    /**
     * Limit how many PickerTeams to update.
     */
    limit?: number
  }

  /**
   * PickerTeams upsert
   */
  export type PickerTeamsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PickerTeams
     */
    select?: PickerTeamsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PickerTeams
     */
    omit?: PickerTeamsOmit<ExtArgs> | null
    /**
     * The filter to search for the PickerTeams to update in case it exists.
     */
    where: PickerTeamsWhereUniqueInput
    /**
     * In case the PickerTeams found by the `where` argument doesn't exist, create a new PickerTeams with this data.
     */
    create: XOR<PickerTeamsCreateInput, PickerTeamsUncheckedCreateInput>
    /**
     * In case the PickerTeams was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PickerTeamsUpdateInput, PickerTeamsUncheckedUpdateInput>
  }

  /**
   * PickerTeams delete
   */
  export type PickerTeamsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PickerTeams
     */
    select?: PickerTeamsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PickerTeams
     */
    omit?: PickerTeamsOmit<ExtArgs> | null
    /**
     * Filter which PickerTeams to delete.
     */
    where: PickerTeamsWhereUniqueInput
  }

  /**
   * PickerTeams deleteMany
   */
  export type PickerTeamsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PickerTeams to delete
     */
    where?: PickerTeamsWhereInput
    /**
     * Limit how many PickerTeams to delete.
     */
    limit?: number
  }

  /**
   * PickerTeams without action
   */
  export type PickerTeamsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PickerTeams
     */
    select?: PickerTeamsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PickerTeams
     */
    omit?: PickerTeamsOmit<ExtArgs> | null
  }


  /**
   * Model Player
   */

  export type AggregatePlayer = {
    _count: PlayerCountAggregateOutputType | null
    _avg: PlayerAvgAggregateOutputType | null
    _sum: PlayerSumAggregateOutputType | null
    _min: PlayerMinAggregateOutputType | null
    _max: PlayerMaxAggregateOutputType | null
  }

  export type PlayerAvgAggregateOutputType = {
    id: number | null
    introducedBy: number | null
  }

  export type PlayerSumAggregateOutputType = {
    id: number | null
    introducedBy: number | null
  }

  export type PlayerMinAggregateOutputType = {
    id: number | null
    login: string | null
    isAdmin: boolean | null
    name: string | null
    anonymous: boolean | null
    email: string | null
    joined: Date | null
    finished: Date | null
    born: Date | null
    comment: string | null
    introducedBy: number | null
  }

  export type PlayerMaxAggregateOutputType = {
    id: number | null
    login: string | null
    isAdmin: boolean | null
    name: string | null
    anonymous: boolean | null
    email: string | null
    joined: Date | null
    finished: Date | null
    born: Date | null
    comment: string | null
    introducedBy: number | null
  }

  export type PlayerCountAggregateOutputType = {
    id: number
    login: number
    isAdmin: number
    name: number
    anonymous: number
    email: number
    joined: number
    finished: number
    born: number
    comment: number
    introducedBy: number
    _all: number
  }


  export type PlayerAvgAggregateInputType = {
    id?: true
    introducedBy?: true
  }

  export type PlayerSumAggregateInputType = {
    id?: true
    introducedBy?: true
  }

  export type PlayerMinAggregateInputType = {
    id?: true
    login?: true
    isAdmin?: true
    name?: true
    anonymous?: true
    email?: true
    joined?: true
    finished?: true
    born?: true
    comment?: true
    introducedBy?: true
  }

  export type PlayerMaxAggregateInputType = {
    id?: true
    login?: true
    isAdmin?: true
    name?: true
    anonymous?: true
    email?: true
    joined?: true
    finished?: true
    born?: true
    comment?: true
    introducedBy?: true
  }

  export type PlayerCountAggregateInputType = {
    id?: true
    login?: true
    isAdmin?: true
    name?: true
    anonymous?: true
    email?: true
    joined?: true
    finished?: true
    born?: true
    comment?: true
    introducedBy?: true
    _all?: true
  }

  export type PlayerAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Player to aggregate.
     */
    where?: PlayerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Players to fetch.
     */
    orderBy?: PlayerOrderByWithRelationInput | PlayerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PlayerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Players from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Players.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Players
    **/
    _count?: true | PlayerCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PlayerAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PlayerSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PlayerMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PlayerMaxAggregateInputType
  }

  export type GetPlayerAggregateType<T extends PlayerAggregateArgs> = {
        [P in keyof T & keyof AggregatePlayer]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePlayer[P]>
      : GetScalarType<T[P], AggregatePlayer[P]>
  }




  export type PlayerGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PlayerWhereInput
    orderBy?: PlayerOrderByWithAggregationInput | PlayerOrderByWithAggregationInput[]
    by: PlayerScalarFieldEnum[] | PlayerScalarFieldEnum
    having?: PlayerScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PlayerCountAggregateInputType | true
    _avg?: PlayerAvgAggregateInputType
    _sum?: PlayerSumAggregateInputType
    _min?: PlayerMinAggregateInputType
    _max?: PlayerMaxAggregateInputType
  }

  export type PlayerGroupByOutputType = {
    id: number
    login: string
    isAdmin: boolean | null
    name: string | null
    anonymous: boolean | null
    email: string | null
    joined: Date | null
    finished: Date | null
    born: Date | null
    comment: string | null
    introducedBy: number | null
    _count: PlayerCountAggregateOutputType | null
    _avg: PlayerAvgAggregateOutputType | null
    _sum: PlayerSumAggregateOutputType | null
    _min: PlayerMinAggregateOutputType | null
    _max: PlayerMaxAggregateOutputType | null
  }

  type GetPlayerGroupByPayload<T extends PlayerGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PlayerGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PlayerGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PlayerGroupByOutputType[P]>
            : GetScalarType<T[P], PlayerGroupByOutputType[P]>
        }
      >
    >


  export type PlayerSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    login?: boolean
    isAdmin?: boolean
    name?: boolean
    anonymous?: boolean
    email?: boolean
    joined?: boolean
    finished?: boolean
    born?: boolean
    comment?: boolean
    introducedBy?: boolean
    arsesOfPlayer?: boolean | Player$arsesOfPlayerArgs<ExtArgs>
    arsesByPlayer?: boolean | Player$arsesByPlayerArgs<ExtArgs>
    clubs?: boolean | Player$clubsArgs<ExtArgs>
    countries?: boolean | Player$countriesArgs<ExtArgs>
    outcomes?: boolean | Player$outcomesArgs<ExtArgs>
    playerRecords?: boolean | Player$playerRecordsArgs<ExtArgs>
    _count?: boolean | PlayerCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["player"]>



  export type PlayerSelectScalar = {
    id?: boolean
    login?: boolean
    isAdmin?: boolean
    name?: boolean
    anonymous?: boolean
    email?: boolean
    joined?: boolean
    finished?: boolean
    born?: boolean
    comment?: boolean
    introducedBy?: boolean
  }

  export type PlayerOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "login" | "isAdmin" | "name" | "anonymous" | "email" | "joined" | "finished" | "born" | "comment" | "introducedBy", ExtArgs["result"]["player"]>
  export type PlayerInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    arsesOfPlayer?: boolean | Player$arsesOfPlayerArgs<ExtArgs>
    arsesByPlayer?: boolean | Player$arsesByPlayerArgs<ExtArgs>
    clubs?: boolean | Player$clubsArgs<ExtArgs>
    countries?: boolean | Player$countriesArgs<ExtArgs>
    outcomes?: boolean | Player$outcomesArgs<ExtArgs>
    playerRecords?: boolean | Player$playerRecordsArgs<ExtArgs>
    _count?: boolean | PlayerCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $PlayerPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Player"
    objects: {
      arsesOfPlayer: Prisma.$ArsePayload<ExtArgs>[]
      arsesByPlayer: Prisma.$ArsePayload<ExtArgs>[]
      clubs: Prisma.$ClubSupporterPayload<ExtArgs>[]
      countries: Prisma.$CountrySupporterPayload<ExtArgs>[]
      outcomes: Prisma.$OutcomePayload<ExtArgs>[]
      playerRecords: Prisma.$PlayerRecordPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      login: string
      isAdmin: boolean | null
      name: string | null
      anonymous: boolean | null
      email: string | null
      joined: Date | null
      finished: Date | null
      born: Date | null
      comment: string | null
      introducedBy: number | null
    }, ExtArgs["result"]["player"]>
    composites: {}
  }

  type PlayerGetPayload<S extends boolean | null | undefined | PlayerDefaultArgs> = $Result.GetResult<Prisma.$PlayerPayload, S>

  type PlayerCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<PlayerFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: PlayerCountAggregateInputType | true
    }

  export interface PlayerDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Player'], meta: { name: 'Player' } }
    /**
     * Find zero or one Player that matches the filter.
     * @param {PlayerFindUniqueArgs} args - Arguments to find a Player
     * @example
     * // Get one Player
     * const player = await prisma.player.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PlayerFindUniqueArgs>(args: SelectSubset<T, PlayerFindUniqueArgs<ExtArgs>>): Prisma__PlayerClient<$Result.GetResult<Prisma.$PlayerPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Player that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {PlayerFindUniqueOrThrowArgs} args - Arguments to find a Player
     * @example
     * // Get one Player
     * const player = await prisma.player.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PlayerFindUniqueOrThrowArgs>(args: SelectSubset<T, PlayerFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PlayerClient<$Result.GetResult<Prisma.$PlayerPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Player that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlayerFindFirstArgs} args - Arguments to find a Player
     * @example
     * // Get one Player
     * const player = await prisma.player.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PlayerFindFirstArgs>(args?: SelectSubset<T, PlayerFindFirstArgs<ExtArgs>>): Prisma__PlayerClient<$Result.GetResult<Prisma.$PlayerPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Player that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlayerFindFirstOrThrowArgs} args - Arguments to find a Player
     * @example
     * // Get one Player
     * const player = await prisma.player.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PlayerFindFirstOrThrowArgs>(args?: SelectSubset<T, PlayerFindFirstOrThrowArgs<ExtArgs>>): Prisma__PlayerClient<$Result.GetResult<Prisma.$PlayerPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Players that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlayerFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Players
     * const players = await prisma.player.findMany()
     * 
     * // Get first 10 Players
     * const players = await prisma.player.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const playerWithIdOnly = await prisma.player.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PlayerFindManyArgs>(args?: SelectSubset<T, PlayerFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PlayerPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Player.
     * @param {PlayerCreateArgs} args - Arguments to create a Player.
     * @example
     * // Create one Player
     * const Player = await prisma.player.create({
     *   data: {
     *     // ... data to create a Player
     *   }
     * })
     * 
     */
    create<T extends PlayerCreateArgs>(args: SelectSubset<T, PlayerCreateArgs<ExtArgs>>): Prisma__PlayerClient<$Result.GetResult<Prisma.$PlayerPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Players.
     * @param {PlayerCreateManyArgs} args - Arguments to create many Players.
     * @example
     * // Create many Players
     * const player = await prisma.player.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PlayerCreateManyArgs>(args?: SelectSubset<T, PlayerCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Player.
     * @param {PlayerDeleteArgs} args - Arguments to delete one Player.
     * @example
     * // Delete one Player
     * const Player = await prisma.player.delete({
     *   where: {
     *     // ... filter to delete one Player
     *   }
     * })
     * 
     */
    delete<T extends PlayerDeleteArgs>(args: SelectSubset<T, PlayerDeleteArgs<ExtArgs>>): Prisma__PlayerClient<$Result.GetResult<Prisma.$PlayerPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Player.
     * @param {PlayerUpdateArgs} args - Arguments to update one Player.
     * @example
     * // Update one Player
     * const player = await prisma.player.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PlayerUpdateArgs>(args: SelectSubset<T, PlayerUpdateArgs<ExtArgs>>): Prisma__PlayerClient<$Result.GetResult<Prisma.$PlayerPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Players.
     * @param {PlayerDeleteManyArgs} args - Arguments to filter Players to delete.
     * @example
     * // Delete a few Players
     * const { count } = await prisma.player.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PlayerDeleteManyArgs>(args?: SelectSubset<T, PlayerDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Players.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlayerUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Players
     * const player = await prisma.player.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PlayerUpdateManyArgs>(args: SelectSubset<T, PlayerUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Player.
     * @param {PlayerUpsertArgs} args - Arguments to update or create a Player.
     * @example
     * // Update or create a Player
     * const player = await prisma.player.upsert({
     *   create: {
     *     // ... data to create a Player
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Player we want to update
     *   }
     * })
     */
    upsert<T extends PlayerUpsertArgs>(args: SelectSubset<T, PlayerUpsertArgs<ExtArgs>>): Prisma__PlayerClient<$Result.GetResult<Prisma.$PlayerPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Players.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlayerCountArgs} args - Arguments to filter Players to count.
     * @example
     * // Count the number of Players
     * const count = await prisma.player.count({
     *   where: {
     *     // ... the filter for the Players we want to count
     *   }
     * })
    **/
    count<T extends PlayerCountArgs>(
      args?: Subset<T, PlayerCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PlayerCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Player.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlayerAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PlayerAggregateArgs>(args: Subset<T, PlayerAggregateArgs>): Prisma.PrismaPromise<GetPlayerAggregateType<T>>

    /**
     * Group by Player.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlayerGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PlayerGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PlayerGroupByArgs['orderBy'] }
        : { orderBy?: PlayerGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PlayerGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPlayerGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Player model
   */
  readonly fields: PlayerFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Player.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PlayerClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    arsesOfPlayer<T extends Player$arsesOfPlayerArgs<ExtArgs> = {}>(args?: Subset<T, Player$arsesOfPlayerArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ArsePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    arsesByPlayer<T extends Player$arsesByPlayerArgs<ExtArgs> = {}>(args?: Subset<T, Player$arsesByPlayerArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ArsePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    clubs<T extends Player$clubsArgs<ExtArgs> = {}>(args?: Subset<T, Player$clubsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ClubSupporterPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    countries<T extends Player$countriesArgs<ExtArgs> = {}>(args?: Subset<T, Player$countriesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CountrySupporterPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    outcomes<T extends Player$outcomesArgs<ExtArgs> = {}>(args?: Subset<T, Player$outcomesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OutcomePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    playerRecords<T extends Player$playerRecordsArgs<ExtArgs> = {}>(args?: Subset<T, Player$playerRecordsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PlayerRecordPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Player model
   */
  interface PlayerFieldRefs {
    readonly id: FieldRef<"Player", 'Int'>
    readonly login: FieldRef<"Player", 'String'>
    readonly isAdmin: FieldRef<"Player", 'Boolean'>
    readonly name: FieldRef<"Player", 'String'>
    readonly anonymous: FieldRef<"Player", 'Boolean'>
    readonly email: FieldRef<"Player", 'String'>
    readonly joined: FieldRef<"Player", 'DateTime'>
    readonly finished: FieldRef<"Player", 'DateTime'>
    readonly born: FieldRef<"Player", 'DateTime'>
    readonly comment: FieldRef<"Player", 'String'>
    readonly introducedBy: FieldRef<"Player", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Player findUnique
   */
  export type PlayerFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Player
     */
    select?: PlayerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Player
     */
    omit?: PlayerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlayerInclude<ExtArgs> | null
    /**
     * Filter, which Player to fetch.
     */
    where: PlayerWhereUniqueInput
  }

  /**
   * Player findUniqueOrThrow
   */
  export type PlayerFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Player
     */
    select?: PlayerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Player
     */
    omit?: PlayerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlayerInclude<ExtArgs> | null
    /**
     * Filter, which Player to fetch.
     */
    where: PlayerWhereUniqueInput
  }

  /**
   * Player findFirst
   */
  export type PlayerFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Player
     */
    select?: PlayerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Player
     */
    omit?: PlayerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlayerInclude<ExtArgs> | null
    /**
     * Filter, which Player to fetch.
     */
    where?: PlayerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Players to fetch.
     */
    orderBy?: PlayerOrderByWithRelationInput | PlayerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Players.
     */
    cursor?: PlayerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Players from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Players.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Players.
     */
    distinct?: PlayerScalarFieldEnum | PlayerScalarFieldEnum[]
  }

  /**
   * Player findFirstOrThrow
   */
  export type PlayerFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Player
     */
    select?: PlayerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Player
     */
    omit?: PlayerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlayerInclude<ExtArgs> | null
    /**
     * Filter, which Player to fetch.
     */
    where?: PlayerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Players to fetch.
     */
    orderBy?: PlayerOrderByWithRelationInput | PlayerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Players.
     */
    cursor?: PlayerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Players from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Players.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Players.
     */
    distinct?: PlayerScalarFieldEnum | PlayerScalarFieldEnum[]
  }

  /**
   * Player findMany
   */
  export type PlayerFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Player
     */
    select?: PlayerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Player
     */
    omit?: PlayerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlayerInclude<ExtArgs> | null
    /**
     * Filter, which Players to fetch.
     */
    where?: PlayerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Players to fetch.
     */
    orderBy?: PlayerOrderByWithRelationInput | PlayerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Players.
     */
    cursor?: PlayerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Players from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Players.
     */
    skip?: number
    distinct?: PlayerScalarFieldEnum | PlayerScalarFieldEnum[]
  }

  /**
   * Player create
   */
  export type PlayerCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Player
     */
    select?: PlayerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Player
     */
    omit?: PlayerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlayerInclude<ExtArgs> | null
    /**
     * The data needed to create a Player.
     */
    data: XOR<PlayerCreateInput, PlayerUncheckedCreateInput>
  }

  /**
   * Player createMany
   */
  export type PlayerCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Players.
     */
    data: PlayerCreateManyInput | PlayerCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Player update
   */
  export type PlayerUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Player
     */
    select?: PlayerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Player
     */
    omit?: PlayerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlayerInclude<ExtArgs> | null
    /**
     * The data needed to update a Player.
     */
    data: XOR<PlayerUpdateInput, PlayerUncheckedUpdateInput>
    /**
     * Choose, which Player to update.
     */
    where: PlayerWhereUniqueInput
  }

  /**
   * Player updateMany
   */
  export type PlayerUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Players.
     */
    data: XOR<PlayerUpdateManyMutationInput, PlayerUncheckedUpdateManyInput>
    /**
     * Filter which Players to update
     */
    where?: PlayerWhereInput
    /**
     * Limit how many Players to update.
     */
    limit?: number
  }

  /**
   * Player upsert
   */
  export type PlayerUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Player
     */
    select?: PlayerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Player
     */
    omit?: PlayerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlayerInclude<ExtArgs> | null
    /**
     * The filter to search for the Player to update in case it exists.
     */
    where: PlayerWhereUniqueInput
    /**
     * In case the Player found by the `where` argument doesn't exist, create a new Player with this data.
     */
    create: XOR<PlayerCreateInput, PlayerUncheckedCreateInput>
    /**
     * In case the Player was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PlayerUpdateInput, PlayerUncheckedUpdateInput>
  }

  /**
   * Player delete
   */
  export type PlayerDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Player
     */
    select?: PlayerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Player
     */
    omit?: PlayerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlayerInclude<ExtArgs> | null
    /**
     * Filter which Player to delete.
     */
    where: PlayerWhereUniqueInput
  }

  /**
   * Player deleteMany
   */
  export type PlayerDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Players to delete
     */
    where?: PlayerWhereInput
    /**
     * Limit how many Players to delete.
     */
    limit?: number
  }

  /**
   * Player.arsesOfPlayer
   */
  export type Player$arsesOfPlayerArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Arse
     */
    select?: ArseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Arse
     */
    omit?: ArseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ArseInclude<ExtArgs> | null
    where?: ArseWhereInput
    orderBy?: ArseOrderByWithRelationInput | ArseOrderByWithRelationInput[]
    cursor?: ArseWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ArseScalarFieldEnum | ArseScalarFieldEnum[]
  }

  /**
   * Player.arsesByPlayer
   */
  export type Player$arsesByPlayerArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Arse
     */
    select?: ArseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Arse
     */
    omit?: ArseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ArseInclude<ExtArgs> | null
    where?: ArseWhereInput
    orderBy?: ArseOrderByWithRelationInput | ArseOrderByWithRelationInput[]
    cursor?: ArseWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ArseScalarFieldEnum | ArseScalarFieldEnum[]
  }

  /**
   * Player.clubs
   */
  export type Player$clubsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClubSupporter
     */
    select?: ClubSupporterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ClubSupporter
     */
    omit?: ClubSupporterOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClubSupporterInclude<ExtArgs> | null
    where?: ClubSupporterWhereInput
    orderBy?: ClubSupporterOrderByWithRelationInput | ClubSupporterOrderByWithRelationInput[]
    cursor?: ClubSupporterWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ClubSupporterScalarFieldEnum | ClubSupporterScalarFieldEnum[]
  }

  /**
   * Player.countries
   */
  export type Player$countriesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CountrySupporter
     */
    select?: CountrySupporterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CountrySupporter
     */
    omit?: CountrySupporterOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CountrySupporterInclude<ExtArgs> | null
    where?: CountrySupporterWhereInput
    orderBy?: CountrySupporterOrderByWithRelationInput | CountrySupporterOrderByWithRelationInput[]
    cursor?: CountrySupporterWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CountrySupporterScalarFieldEnum | CountrySupporterScalarFieldEnum[]
  }

  /**
   * Player.outcomes
   */
  export type Player$outcomesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Outcome
     */
    select?: OutcomeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Outcome
     */
    omit?: OutcomeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OutcomeInclude<ExtArgs> | null
    where?: OutcomeWhereInput
    orderBy?: OutcomeOrderByWithRelationInput | OutcomeOrderByWithRelationInput[]
    cursor?: OutcomeWhereUniqueInput
    take?: number
    skip?: number
    distinct?: OutcomeScalarFieldEnum | OutcomeScalarFieldEnum[]
  }

  /**
   * Player.playerRecords
   */
  export type Player$playerRecordsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlayerRecord
     */
    select?: PlayerRecordSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PlayerRecord
     */
    omit?: PlayerRecordOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlayerRecordInclude<ExtArgs> | null
    where?: PlayerRecordWhereInput
    orderBy?: PlayerRecordOrderByWithRelationInput | PlayerRecordOrderByWithRelationInput[]
    cursor?: PlayerRecordWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PlayerRecordScalarFieldEnum | PlayerRecordScalarFieldEnum[]
  }

  /**
   * Player without action
   */
  export type PlayerDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Player
     */
    select?: PlayerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Player
     */
    omit?: PlayerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlayerInclude<ExtArgs> | null
  }


  /**
   * Model PlayerRecord
   */

  export type AggregatePlayerRecord = {
    _count: PlayerRecordCountAggregateOutputType | null
    _avg: PlayerRecordAvgAggregateOutputType | null
    _sum: PlayerRecordSumAggregateOutputType | null
    _min: PlayerRecordMinAggregateOutputType | null
    _max: PlayerRecordMaxAggregateOutputType | null
  }

  export type PlayerRecordAvgAggregateOutputType = {
    id: number | null
    year: number | null
    responses: number | null
    played: number | null
    won: number | null
    drawn: number | null
    lost: number | null
    points: number | null
    averages: number | null
    stalwart: number | null
    pub: number | null
    rankPoints: number | null
    rankAverages: number | null
    rankAveragesUnqualified: number | null
    rankStalwart: number | null
    rankSpeedy: number | null
    rankSpeedyUnqualified: number | null
    rankPub: number | null
    speedy: number | null
    playerId: number | null
    gameDayId: number | null
  }

  export type PlayerRecordSumAggregateOutputType = {
    id: number | null
    year: number | null
    responses: number | null
    played: number | null
    won: number | null
    drawn: number | null
    lost: number | null
    points: number | null
    averages: number | null
    stalwart: number | null
    pub: number | null
    rankPoints: number | null
    rankAverages: number | null
    rankAveragesUnqualified: number | null
    rankStalwart: number | null
    rankSpeedy: number | null
    rankSpeedyUnqualified: number | null
    rankPub: number | null
    speedy: number | null
    playerId: number | null
    gameDayId: number | null
  }

  export type PlayerRecordMinAggregateOutputType = {
    id: number | null
    year: number | null
    responses: number | null
    played: number | null
    won: number | null
    drawn: number | null
    lost: number | null
    points: number | null
    averages: number | null
    stalwart: number | null
    pub: number | null
    rankPoints: number | null
    rankAverages: number | null
    rankAveragesUnqualified: number | null
    rankStalwart: number | null
    rankSpeedy: number | null
    rankSpeedyUnqualified: number | null
    rankPub: number | null
    speedy: number | null
    playerId: number | null
    gameDayId: number | null
  }

  export type PlayerRecordMaxAggregateOutputType = {
    id: number | null
    year: number | null
    responses: number | null
    played: number | null
    won: number | null
    drawn: number | null
    lost: number | null
    points: number | null
    averages: number | null
    stalwart: number | null
    pub: number | null
    rankPoints: number | null
    rankAverages: number | null
    rankAveragesUnqualified: number | null
    rankStalwart: number | null
    rankSpeedy: number | null
    rankSpeedyUnqualified: number | null
    rankPub: number | null
    speedy: number | null
    playerId: number | null
    gameDayId: number | null
  }

  export type PlayerRecordCountAggregateOutputType = {
    id: number
    year: number
    responses: number
    played: number
    won: number
    drawn: number
    lost: number
    points: number
    averages: number
    stalwart: number
    pub: number
    rankPoints: number
    rankAverages: number
    rankAveragesUnqualified: number
    rankStalwart: number
    rankSpeedy: number
    rankSpeedyUnqualified: number
    rankPub: number
    speedy: number
    playerId: number
    gameDayId: number
    _all: number
  }


  export type PlayerRecordAvgAggregateInputType = {
    id?: true
    year?: true
    responses?: true
    played?: true
    won?: true
    drawn?: true
    lost?: true
    points?: true
    averages?: true
    stalwart?: true
    pub?: true
    rankPoints?: true
    rankAverages?: true
    rankAveragesUnqualified?: true
    rankStalwart?: true
    rankSpeedy?: true
    rankSpeedyUnqualified?: true
    rankPub?: true
    speedy?: true
    playerId?: true
    gameDayId?: true
  }

  export type PlayerRecordSumAggregateInputType = {
    id?: true
    year?: true
    responses?: true
    played?: true
    won?: true
    drawn?: true
    lost?: true
    points?: true
    averages?: true
    stalwart?: true
    pub?: true
    rankPoints?: true
    rankAverages?: true
    rankAveragesUnqualified?: true
    rankStalwart?: true
    rankSpeedy?: true
    rankSpeedyUnqualified?: true
    rankPub?: true
    speedy?: true
    playerId?: true
    gameDayId?: true
  }

  export type PlayerRecordMinAggregateInputType = {
    id?: true
    year?: true
    responses?: true
    played?: true
    won?: true
    drawn?: true
    lost?: true
    points?: true
    averages?: true
    stalwart?: true
    pub?: true
    rankPoints?: true
    rankAverages?: true
    rankAveragesUnqualified?: true
    rankStalwart?: true
    rankSpeedy?: true
    rankSpeedyUnqualified?: true
    rankPub?: true
    speedy?: true
    playerId?: true
    gameDayId?: true
  }

  export type PlayerRecordMaxAggregateInputType = {
    id?: true
    year?: true
    responses?: true
    played?: true
    won?: true
    drawn?: true
    lost?: true
    points?: true
    averages?: true
    stalwart?: true
    pub?: true
    rankPoints?: true
    rankAverages?: true
    rankAveragesUnqualified?: true
    rankStalwart?: true
    rankSpeedy?: true
    rankSpeedyUnqualified?: true
    rankPub?: true
    speedy?: true
    playerId?: true
    gameDayId?: true
  }

  export type PlayerRecordCountAggregateInputType = {
    id?: true
    year?: true
    responses?: true
    played?: true
    won?: true
    drawn?: true
    lost?: true
    points?: true
    averages?: true
    stalwart?: true
    pub?: true
    rankPoints?: true
    rankAverages?: true
    rankAveragesUnqualified?: true
    rankStalwart?: true
    rankSpeedy?: true
    rankSpeedyUnqualified?: true
    rankPub?: true
    speedy?: true
    playerId?: true
    gameDayId?: true
    _all?: true
  }

  export type PlayerRecordAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PlayerRecord to aggregate.
     */
    where?: PlayerRecordWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PlayerRecords to fetch.
     */
    orderBy?: PlayerRecordOrderByWithRelationInput | PlayerRecordOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PlayerRecordWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PlayerRecords from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PlayerRecords.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned PlayerRecords
    **/
    _count?: true | PlayerRecordCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PlayerRecordAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PlayerRecordSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PlayerRecordMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PlayerRecordMaxAggregateInputType
  }

  export type GetPlayerRecordAggregateType<T extends PlayerRecordAggregateArgs> = {
        [P in keyof T & keyof AggregatePlayerRecord]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePlayerRecord[P]>
      : GetScalarType<T[P], AggregatePlayerRecord[P]>
  }




  export type PlayerRecordGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PlayerRecordWhereInput
    orderBy?: PlayerRecordOrderByWithAggregationInput | PlayerRecordOrderByWithAggregationInput[]
    by: PlayerRecordScalarFieldEnum[] | PlayerRecordScalarFieldEnum
    having?: PlayerRecordScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PlayerRecordCountAggregateInputType | true
    _avg?: PlayerRecordAvgAggregateInputType
    _sum?: PlayerRecordSumAggregateInputType
    _min?: PlayerRecordMinAggregateInputType
    _max?: PlayerRecordMaxAggregateInputType
  }

  export type PlayerRecordGroupByOutputType = {
    id: number
    year: number
    responses: number | null
    played: number | null
    won: number | null
    drawn: number | null
    lost: number | null
    points: number | null
    averages: number | null
    stalwart: number | null
    pub: number | null
    rankPoints: number | null
    rankAverages: number | null
    rankAveragesUnqualified: number | null
    rankStalwart: number | null
    rankSpeedy: number | null
    rankSpeedyUnqualified: number | null
    rankPub: number | null
    speedy: number | null
    playerId: number
    gameDayId: number
    _count: PlayerRecordCountAggregateOutputType | null
    _avg: PlayerRecordAvgAggregateOutputType | null
    _sum: PlayerRecordSumAggregateOutputType | null
    _min: PlayerRecordMinAggregateOutputType | null
    _max: PlayerRecordMaxAggregateOutputType | null
  }

  type GetPlayerRecordGroupByPayload<T extends PlayerRecordGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PlayerRecordGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PlayerRecordGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PlayerRecordGroupByOutputType[P]>
            : GetScalarType<T[P], PlayerRecordGroupByOutputType[P]>
        }
      >
    >


  export type PlayerRecordSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    year?: boolean
    responses?: boolean
    played?: boolean
    won?: boolean
    drawn?: boolean
    lost?: boolean
    points?: boolean
    averages?: boolean
    stalwart?: boolean
    pub?: boolean
    rankPoints?: boolean
    rankAverages?: boolean
    rankAveragesUnqualified?: boolean
    rankStalwart?: boolean
    rankSpeedy?: boolean
    rankSpeedyUnqualified?: boolean
    rankPub?: boolean
    speedy?: boolean
    playerId?: boolean
    gameDayId?: boolean
    player?: boolean | PlayerDefaultArgs<ExtArgs>
    gameDay?: boolean | GameDayDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["playerRecord"]>



  export type PlayerRecordSelectScalar = {
    id?: boolean
    year?: boolean
    responses?: boolean
    played?: boolean
    won?: boolean
    drawn?: boolean
    lost?: boolean
    points?: boolean
    averages?: boolean
    stalwart?: boolean
    pub?: boolean
    rankPoints?: boolean
    rankAverages?: boolean
    rankAveragesUnqualified?: boolean
    rankStalwart?: boolean
    rankSpeedy?: boolean
    rankSpeedyUnqualified?: boolean
    rankPub?: boolean
    speedy?: boolean
    playerId?: boolean
    gameDayId?: boolean
  }

  export type PlayerRecordOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "year" | "responses" | "played" | "won" | "drawn" | "lost" | "points" | "averages" | "stalwart" | "pub" | "rankPoints" | "rankAverages" | "rankAveragesUnqualified" | "rankStalwart" | "rankSpeedy" | "rankSpeedyUnqualified" | "rankPub" | "speedy" | "playerId" | "gameDayId", ExtArgs["result"]["playerRecord"]>
  export type PlayerRecordInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    player?: boolean | PlayerDefaultArgs<ExtArgs>
    gameDay?: boolean | GameDayDefaultArgs<ExtArgs>
  }

  export type $PlayerRecordPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "PlayerRecord"
    objects: {
      player: Prisma.$PlayerPayload<ExtArgs>
      gameDay: Prisma.$GameDayPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      year: number
      responses: number | null
      played: number | null
      won: number | null
      drawn: number | null
      lost: number | null
      points: number | null
      averages: number | null
      stalwart: number | null
      pub: number | null
      rankPoints: number | null
      rankAverages: number | null
      rankAveragesUnqualified: number | null
      rankStalwart: number | null
      rankSpeedy: number | null
      rankSpeedyUnqualified: number | null
      rankPub: number | null
      speedy: number | null
      playerId: number
      gameDayId: number
    }, ExtArgs["result"]["playerRecord"]>
    composites: {}
  }

  type PlayerRecordGetPayload<S extends boolean | null | undefined | PlayerRecordDefaultArgs> = $Result.GetResult<Prisma.$PlayerRecordPayload, S>

  type PlayerRecordCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<PlayerRecordFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: PlayerRecordCountAggregateInputType | true
    }

  export interface PlayerRecordDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['PlayerRecord'], meta: { name: 'PlayerRecord' } }
    /**
     * Find zero or one PlayerRecord that matches the filter.
     * @param {PlayerRecordFindUniqueArgs} args - Arguments to find a PlayerRecord
     * @example
     * // Get one PlayerRecord
     * const playerRecord = await prisma.playerRecord.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PlayerRecordFindUniqueArgs>(args: SelectSubset<T, PlayerRecordFindUniqueArgs<ExtArgs>>): Prisma__PlayerRecordClient<$Result.GetResult<Prisma.$PlayerRecordPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one PlayerRecord that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {PlayerRecordFindUniqueOrThrowArgs} args - Arguments to find a PlayerRecord
     * @example
     * // Get one PlayerRecord
     * const playerRecord = await prisma.playerRecord.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PlayerRecordFindUniqueOrThrowArgs>(args: SelectSubset<T, PlayerRecordFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PlayerRecordClient<$Result.GetResult<Prisma.$PlayerRecordPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first PlayerRecord that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlayerRecordFindFirstArgs} args - Arguments to find a PlayerRecord
     * @example
     * // Get one PlayerRecord
     * const playerRecord = await prisma.playerRecord.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PlayerRecordFindFirstArgs>(args?: SelectSubset<T, PlayerRecordFindFirstArgs<ExtArgs>>): Prisma__PlayerRecordClient<$Result.GetResult<Prisma.$PlayerRecordPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first PlayerRecord that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlayerRecordFindFirstOrThrowArgs} args - Arguments to find a PlayerRecord
     * @example
     * // Get one PlayerRecord
     * const playerRecord = await prisma.playerRecord.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PlayerRecordFindFirstOrThrowArgs>(args?: SelectSubset<T, PlayerRecordFindFirstOrThrowArgs<ExtArgs>>): Prisma__PlayerRecordClient<$Result.GetResult<Prisma.$PlayerRecordPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more PlayerRecords that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlayerRecordFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all PlayerRecords
     * const playerRecords = await prisma.playerRecord.findMany()
     * 
     * // Get first 10 PlayerRecords
     * const playerRecords = await prisma.playerRecord.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const playerRecordWithIdOnly = await prisma.playerRecord.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PlayerRecordFindManyArgs>(args?: SelectSubset<T, PlayerRecordFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PlayerRecordPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a PlayerRecord.
     * @param {PlayerRecordCreateArgs} args - Arguments to create a PlayerRecord.
     * @example
     * // Create one PlayerRecord
     * const PlayerRecord = await prisma.playerRecord.create({
     *   data: {
     *     // ... data to create a PlayerRecord
     *   }
     * })
     * 
     */
    create<T extends PlayerRecordCreateArgs>(args: SelectSubset<T, PlayerRecordCreateArgs<ExtArgs>>): Prisma__PlayerRecordClient<$Result.GetResult<Prisma.$PlayerRecordPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many PlayerRecords.
     * @param {PlayerRecordCreateManyArgs} args - Arguments to create many PlayerRecords.
     * @example
     * // Create many PlayerRecords
     * const playerRecord = await prisma.playerRecord.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PlayerRecordCreateManyArgs>(args?: SelectSubset<T, PlayerRecordCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a PlayerRecord.
     * @param {PlayerRecordDeleteArgs} args - Arguments to delete one PlayerRecord.
     * @example
     * // Delete one PlayerRecord
     * const PlayerRecord = await prisma.playerRecord.delete({
     *   where: {
     *     // ... filter to delete one PlayerRecord
     *   }
     * })
     * 
     */
    delete<T extends PlayerRecordDeleteArgs>(args: SelectSubset<T, PlayerRecordDeleteArgs<ExtArgs>>): Prisma__PlayerRecordClient<$Result.GetResult<Prisma.$PlayerRecordPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one PlayerRecord.
     * @param {PlayerRecordUpdateArgs} args - Arguments to update one PlayerRecord.
     * @example
     * // Update one PlayerRecord
     * const playerRecord = await prisma.playerRecord.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PlayerRecordUpdateArgs>(args: SelectSubset<T, PlayerRecordUpdateArgs<ExtArgs>>): Prisma__PlayerRecordClient<$Result.GetResult<Prisma.$PlayerRecordPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more PlayerRecords.
     * @param {PlayerRecordDeleteManyArgs} args - Arguments to filter PlayerRecords to delete.
     * @example
     * // Delete a few PlayerRecords
     * const { count } = await prisma.playerRecord.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PlayerRecordDeleteManyArgs>(args?: SelectSubset<T, PlayerRecordDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PlayerRecords.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlayerRecordUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many PlayerRecords
     * const playerRecord = await prisma.playerRecord.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PlayerRecordUpdateManyArgs>(args: SelectSubset<T, PlayerRecordUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one PlayerRecord.
     * @param {PlayerRecordUpsertArgs} args - Arguments to update or create a PlayerRecord.
     * @example
     * // Update or create a PlayerRecord
     * const playerRecord = await prisma.playerRecord.upsert({
     *   create: {
     *     // ... data to create a PlayerRecord
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the PlayerRecord we want to update
     *   }
     * })
     */
    upsert<T extends PlayerRecordUpsertArgs>(args: SelectSubset<T, PlayerRecordUpsertArgs<ExtArgs>>): Prisma__PlayerRecordClient<$Result.GetResult<Prisma.$PlayerRecordPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of PlayerRecords.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlayerRecordCountArgs} args - Arguments to filter PlayerRecords to count.
     * @example
     * // Count the number of PlayerRecords
     * const count = await prisma.playerRecord.count({
     *   where: {
     *     // ... the filter for the PlayerRecords we want to count
     *   }
     * })
    **/
    count<T extends PlayerRecordCountArgs>(
      args?: Subset<T, PlayerRecordCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PlayerRecordCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a PlayerRecord.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlayerRecordAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PlayerRecordAggregateArgs>(args: Subset<T, PlayerRecordAggregateArgs>): Prisma.PrismaPromise<GetPlayerRecordAggregateType<T>>

    /**
     * Group by PlayerRecord.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlayerRecordGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PlayerRecordGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PlayerRecordGroupByArgs['orderBy'] }
        : { orderBy?: PlayerRecordGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PlayerRecordGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPlayerRecordGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the PlayerRecord model
   */
  readonly fields: PlayerRecordFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for PlayerRecord.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PlayerRecordClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    player<T extends PlayerDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PlayerDefaultArgs<ExtArgs>>): Prisma__PlayerClient<$Result.GetResult<Prisma.$PlayerPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    gameDay<T extends GameDayDefaultArgs<ExtArgs> = {}>(args?: Subset<T, GameDayDefaultArgs<ExtArgs>>): Prisma__GameDayClient<$Result.GetResult<Prisma.$GameDayPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the PlayerRecord model
   */
  interface PlayerRecordFieldRefs {
    readonly id: FieldRef<"PlayerRecord", 'Int'>
    readonly year: FieldRef<"PlayerRecord", 'Int'>
    readonly responses: FieldRef<"PlayerRecord", 'Int'>
    readonly played: FieldRef<"PlayerRecord", 'Int'>
    readonly won: FieldRef<"PlayerRecord", 'Int'>
    readonly drawn: FieldRef<"PlayerRecord", 'Int'>
    readonly lost: FieldRef<"PlayerRecord", 'Int'>
    readonly points: FieldRef<"PlayerRecord", 'Int'>
    readonly averages: FieldRef<"PlayerRecord", 'Float'>
    readonly stalwart: FieldRef<"PlayerRecord", 'Int'>
    readonly pub: FieldRef<"PlayerRecord", 'Int'>
    readonly rankPoints: FieldRef<"PlayerRecord", 'Int'>
    readonly rankAverages: FieldRef<"PlayerRecord", 'Int'>
    readonly rankAveragesUnqualified: FieldRef<"PlayerRecord", 'Int'>
    readonly rankStalwart: FieldRef<"PlayerRecord", 'Int'>
    readonly rankSpeedy: FieldRef<"PlayerRecord", 'Int'>
    readonly rankSpeedyUnqualified: FieldRef<"PlayerRecord", 'Int'>
    readonly rankPub: FieldRef<"PlayerRecord", 'Int'>
    readonly speedy: FieldRef<"PlayerRecord", 'Int'>
    readonly playerId: FieldRef<"PlayerRecord", 'Int'>
    readonly gameDayId: FieldRef<"PlayerRecord", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * PlayerRecord findUnique
   */
  export type PlayerRecordFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlayerRecord
     */
    select?: PlayerRecordSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PlayerRecord
     */
    omit?: PlayerRecordOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlayerRecordInclude<ExtArgs> | null
    /**
     * Filter, which PlayerRecord to fetch.
     */
    where: PlayerRecordWhereUniqueInput
  }

  /**
   * PlayerRecord findUniqueOrThrow
   */
  export type PlayerRecordFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlayerRecord
     */
    select?: PlayerRecordSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PlayerRecord
     */
    omit?: PlayerRecordOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlayerRecordInclude<ExtArgs> | null
    /**
     * Filter, which PlayerRecord to fetch.
     */
    where: PlayerRecordWhereUniqueInput
  }

  /**
   * PlayerRecord findFirst
   */
  export type PlayerRecordFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlayerRecord
     */
    select?: PlayerRecordSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PlayerRecord
     */
    omit?: PlayerRecordOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlayerRecordInclude<ExtArgs> | null
    /**
     * Filter, which PlayerRecord to fetch.
     */
    where?: PlayerRecordWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PlayerRecords to fetch.
     */
    orderBy?: PlayerRecordOrderByWithRelationInput | PlayerRecordOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PlayerRecords.
     */
    cursor?: PlayerRecordWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PlayerRecords from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PlayerRecords.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PlayerRecords.
     */
    distinct?: PlayerRecordScalarFieldEnum | PlayerRecordScalarFieldEnum[]
  }

  /**
   * PlayerRecord findFirstOrThrow
   */
  export type PlayerRecordFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlayerRecord
     */
    select?: PlayerRecordSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PlayerRecord
     */
    omit?: PlayerRecordOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlayerRecordInclude<ExtArgs> | null
    /**
     * Filter, which PlayerRecord to fetch.
     */
    where?: PlayerRecordWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PlayerRecords to fetch.
     */
    orderBy?: PlayerRecordOrderByWithRelationInput | PlayerRecordOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PlayerRecords.
     */
    cursor?: PlayerRecordWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PlayerRecords from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PlayerRecords.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PlayerRecords.
     */
    distinct?: PlayerRecordScalarFieldEnum | PlayerRecordScalarFieldEnum[]
  }

  /**
   * PlayerRecord findMany
   */
  export type PlayerRecordFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlayerRecord
     */
    select?: PlayerRecordSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PlayerRecord
     */
    omit?: PlayerRecordOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlayerRecordInclude<ExtArgs> | null
    /**
     * Filter, which PlayerRecords to fetch.
     */
    where?: PlayerRecordWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PlayerRecords to fetch.
     */
    orderBy?: PlayerRecordOrderByWithRelationInput | PlayerRecordOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing PlayerRecords.
     */
    cursor?: PlayerRecordWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PlayerRecords from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PlayerRecords.
     */
    skip?: number
    distinct?: PlayerRecordScalarFieldEnum | PlayerRecordScalarFieldEnum[]
  }

  /**
   * PlayerRecord create
   */
  export type PlayerRecordCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlayerRecord
     */
    select?: PlayerRecordSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PlayerRecord
     */
    omit?: PlayerRecordOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlayerRecordInclude<ExtArgs> | null
    /**
     * The data needed to create a PlayerRecord.
     */
    data: XOR<PlayerRecordCreateInput, PlayerRecordUncheckedCreateInput>
  }

  /**
   * PlayerRecord createMany
   */
  export type PlayerRecordCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many PlayerRecords.
     */
    data: PlayerRecordCreateManyInput | PlayerRecordCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * PlayerRecord update
   */
  export type PlayerRecordUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlayerRecord
     */
    select?: PlayerRecordSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PlayerRecord
     */
    omit?: PlayerRecordOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlayerRecordInclude<ExtArgs> | null
    /**
     * The data needed to update a PlayerRecord.
     */
    data: XOR<PlayerRecordUpdateInput, PlayerRecordUncheckedUpdateInput>
    /**
     * Choose, which PlayerRecord to update.
     */
    where: PlayerRecordWhereUniqueInput
  }

  /**
   * PlayerRecord updateMany
   */
  export type PlayerRecordUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update PlayerRecords.
     */
    data: XOR<PlayerRecordUpdateManyMutationInput, PlayerRecordUncheckedUpdateManyInput>
    /**
     * Filter which PlayerRecords to update
     */
    where?: PlayerRecordWhereInput
    /**
     * Limit how many PlayerRecords to update.
     */
    limit?: number
  }

  /**
   * PlayerRecord upsert
   */
  export type PlayerRecordUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlayerRecord
     */
    select?: PlayerRecordSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PlayerRecord
     */
    omit?: PlayerRecordOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlayerRecordInclude<ExtArgs> | null
    /**
     * The filter to search for the PlayerRecord to update in case it exists.
     */
    where: PlayerRecordWhereUniqueInput
    /**
     * In case the PlayerRecord found by the `where` argument doesn't exist, create a new PlayerRecord with this data.
     */
    create: XOR<PlayerRecordCreateInput, PlayerRecordUncheckedCreateInput>
    /**
     * In case the PlayerRecord was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PlayerRecordUpdateInput, PlayerRecordUncheckedUpdateInput>
  }

  /**
   * PlayerRecord delete
   */
  export type PlayerRecordDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlayerRecord
     */
    select?: PlayerRecordSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PlayerRecord
     */
    omit?: PlayerRecordOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlayerRecordInclude<ExtArgs> | null
    /**
     * Filter which PlayerRecord to delete.
     */
    where: PlayerRecordWhereUniqueInput
  }

  /**
   * PlayerRecord deleteMany
   */
  export type PlayerRecordDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PlayerRecords to delete
     */
    where?: PlayerRecordWhereInput
    /**
     * Limit how many PlayerRecords to delete.
     */
    limit?: number
  }

  /**
   * PlayerRecord without action
   */
  export type PlayerRecordDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlayerRecord
     */
    select?: PlayerRecordSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PlayerRecord
     */
    omit?: PlayerRecordOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlayerRecordInclude<ExtArgs> | null
  }


  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserMinAggregateOutputType = {
    id: string | null
    name: string | null
    email: string | null
    emailVerified: boolean | null
    image: string | null
    createdAt: Date | null
    updatedAt: Date | null
    role: string | null
    banned: boolean | null
    banReason: string | null
    banExpires: Date | null
  }

  export type UserMaxAggregateOutputType = {
    id: string | null
    name: string | null
    email: string | null
    emailVerified: boolean | null
    image: string | null
    createdAt: Date | null
    updatedAt: Date | null
    role: string | null
    banned: boolean | null
    banReason: string | null
    banExpires: Date | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    name: number
    email: number
    emailVerified: number
    image: number
    createdAt: number
    updatedAt: number
    role: number
    banned: number
    banReason: number
    banExpires: number
    _all: number
  }


  export type UserMinAggregateInputType = {
    id?: true
    name?: true
    email?: true
    emailVerified?: true
    image?: true
    createdAt?: true
    updatedAt?: true
    role?: true
    banned?: true
    banReason?: true
    banExpires?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    name?: true
    email?: true
    emailVerified?: true
    image?: true
    createdAt?: true
    updatedAt?: true
    role?: true
    banned?: true
    banReason?: true
    banExpires?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    name?: true
    email?: true
    emailVerified?: true
    image?: true
    createdAt?: true
    updatedAt?: true
    role?: true
    banned?: true
    banReason?: true
    banExpires?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: string
    name: string
    email: string
    emailVerified: boolean
    image: string | null
    createdAt: Date
    updatedAt: Date
    role: string | null
    banned: boolean | null
    banReason: string | null
    banExpires: Date | null
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    email?: boolean
    emailVerified?: boolean
    image?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    role?: boolean
    banned?: boolean
    banReason?: boolean
    banExpires?: boolean
    sessions?: boolean | User$sessionsArgs<ExtArgs>
    accounts?: boolean | User$accountsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>



  export type UserSelectScalar = {
    id?: boolean
    name?: boolean
    email?: boolean
    emailVerified?: boolean
    image?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    role?: boolean
    banned?: boolean
    banReason?: boolean
    banExpires?: boolean
  }

  export type UserOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "email" | "emailVerified" | "image" | "createdAt" | "updatedAt" | "role" | "banned" | "banReason" | "banExpires", ExtArgs["result"]["user"]>
  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    sessions?: boolean | User$sessionsArgs<ExtArgs>
    accounts?: boolean | User$accountsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      sessions: Prisma.$SessionPayload<ExtArgs>[]
      accounts: Prisma.$AccountPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      email: string
      emailVerified: boolean
      image: string | null
      createdAt: Date
      updatedAt: Date
      role: string | null
      banned: boolean | null
      banReason: string | null
      banExpires: Date | null
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    sessions<T extends User$sessionsArgs<ExtArgs> = {}>(args?: Subset<T, User$sessionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    accounts<T extends User$accountsArgs<ExtArgs> = {}>(args?: Subset<T, User$accountsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'String'>
    readonly name: FieldRef<"User", 'String'>
    readonly email: FieldRef<"User", 'String'>
    readonly emailVerified: FieldRef<"User", 'Boolean'>
    readonly image: FieldRef<"User", 'String'>
    readonly createdAt: FieldRef<"User", 'DateTime'>
    readonly updatedAt: FieldRef<"User", 'DateTime'>
    readonly role: FieldRef<"User", 'String'>
    readonly banned: FieldRef<"User", 'Boolean'>
    readonly banReason: FieldRef<"User", 'String'>
    readonly banExpires: FieldRef<"User", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to delete.
     */
    limit?: number
  }

  /**
   * User.sessions
   */
  export type User$sessionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    where?: SessionWhereInput
    orderBy?: SessionOrderByWithRelationInput | SessionOrderByWithRelationInput[]
    cursor?: SessionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SessionScalarFieldEnum | SessionScalarFieldEnum[]
  }

  /**
   * User.accounts
   */
  export type User$accountsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    where?: AccountWhereInput
    orderBy?: AccountOrderByWithRelationInput | AccountOrderByWithRelationInput[]
    cursor?: AccountWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AccountScalarFieldEnum | AccountScalarFieldEnum[]
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model Session
   */

  export type AggregateSession = {
    _count: SessionCountAggregateOutputType | null
    _min: SessionMinAggregateOutputType | null
    _max: SessionMaxAggregateOutputType | null
  }

  export type SessionMinAggregateOutputType = {
    id: string | null
    expiresAt: Date | null
    token: string | null
    createdAt: Date | null
    updatedAt: Date | null
    ipAddress: string | null
    userAgent: string | null
    userId: string | null
    impersonatedBy: string | null
  }

  export type SessionMaxAggregateOutputType = {
    id: string | null
    expiresAt: Date | null
    token: string | null
    createdAt: Date | null
    updatedAt: Date | null
    ipAddress: string | null
    userAgent: string | null
    userId: string | null
    impersonatedBy: string | null
  }

  export type SessionCountAggregateOutputType = {
    id: number
    expiresAt: number
    token: number
    createdAt: number
    updatedAt: number
    ipAddress: number
    userAgent: number
    userId: number
    impersonatedBy: number
    _all: number
  }


  export type SessionMinAggregateInputType = {
    id?: true
    expiresAt?: true
    token?: true
    createdAt?: true
    updatedAt?: true
    ipAddress?: true
    userAgent?: true
    userId?: true
    impersonatedBy?: true
  }

  export type SessionMaxAggregateInputType = {
    id?: true
    expiresAt?: true
    token?: true
    createdAt?: true
    updatedAt?: true
    ipAddress?: true
    userAgent?: true
    userId?: true
    impersonatedBy?: true
  }

  export type SessionCountAggregateInputType = {
    id?: true
    expiresAt?: true
    token?: true
    createdAt?: true
    updatedAt?: true
    ipAddress?: true
    userAgent?: true
    userId?: true
    impersonatedBy?: true
    _all?: true
  }

  export type SessionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Session to aggregate.
     */
    where?: SessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     */
    orderBy?: SessionOrderByWithRelationInput | SessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Sessions
    **/
    _count?: true | SessionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SessionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SessionMaxAggregateInputType
  }

  export type GetSessionAggregateType<T extends SessionAggregateArgs> = {
        [P in keyof T & keyof AggregateSession]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSession[P]>
      : GetScalarType<T[P], AggregateSession[P]>
  }




  export type SessionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SessionWhereInput
    orderBy?: SessionOrderByWithAggregationInput | SessionOrderByWithAggregationInput[]
    by: SessionScalarFieldEnum[] | SessionScalarFieldEnum
    having?: SessionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SessionCountAggregateInputType | true
    _min?: SessionMinAggregateInputType
    _max?: SessionMaxAggregateInputType
  }

  export type SessionGroupByOutputType = {
    id: string
    expiresAt: Date
    token: string
    createdAt: Date
    updatedAt: Date
    ipAddress: string | null
    userAgent: string | null
    userId: string
    impersonatedBy: string | null
    _count: SessionCountAggregateOutputType | null
    _min: SessionMinAggregateOutputType | null
    _max: SessionMaxAggregateOutputType | null
  }

  type GetSessionGroupByPayload<T extends SessionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SessionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SessionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SessionGroupByOutputType[P]>
            : GetScalarType<T[P], SessionGroupByOutputType[P]>
        }
      >
    >


  export type SessionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    expiresAt?: boolean
    token?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    ipAddress?: boolean
    userAgent?: boolean
    userId?: boolean
    impersonatedBy?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["session"]>



  export type SessionSelectScalar = {
    id?: boolean
    expiresAt?: boolean
    token?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    ipAddress?: boolean
    userAgent?: boolean
    userId?: boolean
    impersonatedBy?: boolean
  }

  export type SessionOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "expiresAt" | "token" | "createdAt" | "updatedAt" | "ipAddress" | "userAgent" | "userId" | "impersonatedBy", ExtArgs["result"]["session"]>
  export type SessionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $SessionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Session"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      expiresAt: Date
      token: string
      createdAt: Date
      updatedAt: Date
      ipAddress: string | null
      userAgent: string | null
      userId: string
      impersonatedBy: string | null
    }, ExtArgs["result"]["session"]>
    composites: {}
  }

  type SessionGetPayload<S extends boolean | null | undefined | SessionDefaultArgs> = $Result.GetResult<Prisma.$SessionPayload, S>

  type SessionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<SessionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: SessionCountAggregateInputType | true
    }

  export interface SessionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Session'], meta: { name: 'Session' } }
    /**
     * Find zero or one Session that matches the filter.
     * @param {SessionFindUniqueArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SessionFindUniqueArgs>(args: SelectSubset<T, SessionFindUniqueArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Session that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {SessionFindUniqueOrThrowArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SessionFindUniqueOrThrowArgs>(args: SelectSubset<T, SessionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Session that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionFindFirstArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SessionFindFirstArgs>(args?: SelectSubset<T, SessionFindFirstArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Session that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionFindFirstOrThrowArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SessionFindFirstOrThrowArgs>(args?: SelectSubset<T, SessionFindFirstOrThrowArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Sessions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Sessions
     * const sessions = await prisma.session.findMany()
     * 
     * // Get first 10 Sessions
     * const sessions = await prisma.session.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const sessionWithIdOnly = await prisma.session.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SessionFindManyArgs>(args?: SelectSubset<T, SessionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Session.
     * @param {SessionCreateArgs} args - Arguments to create a Session.
     * @example
     * // Create one Session
     * const Session = await prisma.session.create({
     *   data: {
     *     // ... data to create a Session
     *   }
     * })
     * 
     */
    create<T extends SessionCreateArgs>(args: SelectSubset<T, SessionCreateArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Sessions.
     * @param {SessionCreateManyArgs} args - Arguments to create many Sessions.
     * @example
     * // Create many Sessions
     * const session = await prisma.session.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SessionCreateManyArgs>(args?: SelectSubset<T, SessionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Session.
     * @param {SessionDeleteArgs} args - Arguments to delete one Session.
     * @example
     * // Delete one Session
     * const Session = await prisma.session.delete({
     *   where: {
     *     // ... filter to delete one Session
     *   }
     * })
     * 
     */
    delete<T extends SessionDeleteArgs>(args: SelectSubset<T, SessionDeleteArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Session.
     * @param {SessionUpdateArgs} args - Arguments to update one Session.
     * @example
     * // Update one Session
     * const session = await prisma.session.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SessionUpdateArgs>(args: SelectSubset<T, SessionUpdateArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Sessions.
     * @param {SessionDeleteManyArgs} args - Arguments to filter Sessions to delete.
     * @example
     * // Delete a few Sessions
     * const { count } = await prisma.session.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SessionDeleteManyArgs>(args?: SelectSubset<T, SessionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Sessions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Sessions
     * const session = await prisma.session.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SessionUpdateManyArgs>(args: SelectSubset<T, SessionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Session.
     * @param {SessionUpsertArgs} args - Arguments to update or create a Session.
     * @example
     * // Update or create a Session
     * const session = await prisma.session.upsert({
     *   create: {
     *     // ... data to create a Session
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Session we want to update
     *   }
     * })
     */
    upsert<T extends SessionUpsertArgs>(args: SelectSubset<T, SessionUpsertArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Sessions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionCountArgs} args - Arguments to filter Sessions to count.
     * @example
     * // Count the number of Sessions
     * const count = await prisma.session.count({
     *   where: {
     *     // ... the filter for the Sessions we want to count
     *   }
     * })
    **/
    count<T extends SessionCountArgs>(
      args?: Subset<T, SessionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SessionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Session.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SessionAggregateArgs>(args: Subset<T, SessionAggregateArgs>): Prisma.PrismaPromise<GetSessionAggregateType<T>>

    /**
     * Group by Session.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SessionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SessionGroupByArgs['orderBy'] }
        : { orderBy?: SessionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SessionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSessionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Session model
   */
  readonly fields: SessionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Session.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SessionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Session model
   */
  interface SessionFieldRefs {
    readonly id: FieldRef<"Session", 'String'>
    readonly expiresAt: FieldRef<"Session", 'DateTime'>
    readonly token: FieldRef<"Session", 'String'>
    readonly createdAt: FieldRef<"Session", 'DateTime'>
    readonly updatedAt: FieldRef<"Session", 'DateTime'>
    readonly ipAddress: FieldRef<"Session", 'String'>
    readonly userAgent: FieldRef<"Session", 'String'>
    readonly userId: FieldRef<"Session", 'String'>
    readonly impersonatedBy: FieldRef<"Session", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Session findUnique
   */
  export type SessionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter, which Session to fetch.
     */
    where: SessionWhereUniqueInput
  }

  /**
   * Session findUniqueOrThrow
   */
  export type SessionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter, which Session to fetch.
     */
    where: SessionWhereUniqueInput
  }

  /**
   * Session findFirst
   */
  export type SessionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter, which Session to fetch.
     */
    where?: SessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     */
    orderBy?: SessionOrderByWithRelationInput | SessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Sessions.
     */
    cursor?: SessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Sessions.
     */
    distinct?: SessionScalarFieldEnum | SessionScalarFieldEnum[]
  }

  /**
   * Session findFirstOrThrow
   */
  export type SessionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter, which Session to fetch.
     */
    where?: SessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     */
    orderBy?: SessionOrderByWithRelationInput | SessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Sessions.
     */
    cursor?: SessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Sessions.
     */
    distinct?: SessionScalarFieldEnum | SessionScalarFieldEnum[]
  }

  /**
   * Session findMany
   */
  export type SessionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter, which Sessions to fetch.
     */
    where?: SessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     */
    orderBy?: SessionOrderByWithRelationInput | SessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Sessions.
     */
    cursor?: SessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     */
    skip?: number
    distinct?: SessionScalarFieldEnum | SessionScalarFieldEnum[]
  }

  /**
   * Session create
   */
  export type SessionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * The data needed to create a Session.
     */
    data: XOR<SessionCreateInput, SessionUncheckedCreateInput>
  }

  /**
   * Session createMany
   */
  export type SessionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Sessions.
     */
    data: SessionCreateManyInput | SessionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Session update
   */
  export type SessionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * The data needed to update a Session.
     */
    data: XOR<SessionUpdateInput, SessionUncheckedUpdateInput>
    /**
     * Choose, which Session to update.
     */
    where: SessionWhereUniqueInput
  }

  /**
   * Session updateMany
   */
  export type SessionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Sessions.
     */
    data: XOR<SessionUpdateManyMutationInput, SessionUncheckedUpdateManyInput>
    /**
     * Filter which Sessions to update
     */
    where?: SessionWhereInput
    /**
     * Limit how many Sessions to update.
     */
    limit?: number
  }

  /**
   * Session upsert
   */
  export type SessionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * The filter to search for the Session to update in case it exists.
     */
    where: SessionWhereUniqueInput
    /**
     * In case the Session found by the `where` argument doesn't exist, create a new Session with this data.
     */
    create: XOR<SessionCreateInput, SessionUncheckedCreateInput>
    /**
     * In case the Session was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SessionUpdateInput, SessionUncheckedUpdateInput>
  }

  /**
   * Session delete
   */
  export type SessionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter which Session to delete.
     */
    where: SessionWhereUniqueInput
  }

  /**
   * Session deleteMany
   */
  export type SessionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Sessions to delete
     */
    where?: SessionWhereInput
    /**
     * Limit how many Sessions to delete.
     */
    limit?: number
  }

  /**
   * Session without action
   */
  export type SessionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
  }


  /**
   * Model Account
   */

  export type AggregateAccount = {
    _count: AccountCountAggregateOutputType | null
    _min: AccountMinAggregateOutputType | null
    _max: AccountMaxAggregateOutputType | null
  }

  export type AccountMinAggregateOutputType = {
    id: string | null
    accountId: string | null
    providerId: string | null
    userId: string | null
    accessToken: string | null
    refreshToken: string | null
    idToken: string | null
    accessTokenExpiresAt: Date | null
    refreshTokenExpiresAt: Date | null
    scope: string | null
    password: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type AccountMaxAggregateOutputType = {
    id: string | null
    accountId: string | null
    providerId: string | null
    userId: string | null
    accessToken: string | null
    refreshToken: string | null
    idToken: string | null
    accessTokenExpiresAt: Date | null
    refreshTokenExpiresAt: Date | null
    scope: string | null
    password: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type AccountCountAggregateOutputType = {
    id: number
    accountId: number
    providerId: number
    userId: number
    accessToken: number
    refreshToken: number
    idToken: number
    accessTokenExpiresAt: number
    refreshTokenExpiresAt: number
    scope: number
    password: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type AccountMinAggregateInputType = {
    id?: true
    accountId?: true
    providerId?: true
    userId?: true
    accessToken?: true
    refreshToken?: true
    idToken?: true
    accessTokenExpiresAt?: true
    refreshTokenExpiresAt?: true
    scope?: true
    password?: true
    createdAt?: true
    updatedAt?: true
  }

  export type AccountMaxAggregateInputType = {
    id?: true
    accountId?: true
    providerId?: true
    userId?: true
    accessToken?: true
    refreshToken?: true
    idToken?: true
    accessTokenExpiresAt?: true
    refreshTokenExpiresAt?: true
    scope?: true
    password?: true
    createdAt?: true
    updatedAt?: true
  }

  export type AccountCountAggregateInputType = {
    id?: true
    accountId?: true
    providerId?: true
    userId?: true
    accessToken?: true
    refreshToken?: true
    idToken?: true
    accessTokenExpiresAt?: true
    refreshTokenExpiresAt?: true
    scope?: true
    password?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type AccountAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Account to aggregate.
     */
    where?: AccountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Accounts to fetch.
     */
    orderBy?: AccountOrderByWithRelationInput | AccountOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AccountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Accounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Accounts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Accounts
    **/
    _count?: true | AccountCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AccountMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AccountMaxAggregateInputType
  }

  export type GetAccountAggregateType<T extends AccountAggregateArgs> = {
        [P in keyof T & keyof AggregateAccount]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAccount[P]>
      : GetScalarType<T[P], AggregateAccount[P]>
  }




  export type AccountGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AccountWhereInput
    orderBy?: AccountOrderByWithAggregationInput | AccountOrderByWithAggregationInput[]
    by: AccountScalarFieldEnum[] | AccountScalarFieldEnum
    having?: AccountScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AccountCountAggregateInputType | true
    _min?: AccountMinAggregateInputType
    _max?: AccountMaxAggregateInputType
  }

  export type AccountGroupByOutputType = {
    id: string
    accountId: string
    providerId: string
    userId: string
    accessToken: string | null
    refreshToken: string | null
    idToken: string | null
    accessTokenExpiresAt: Date | null
    refreshTokenExpiresAt: Date | null
    scope: string | null
    password: string | null
    createdAt: Date
    updatedAt: Date
    _count: AccountCountAggregateOutputType | null
    _min: AccountMinAggregateOutputType | null
    _max: AccountMaxAggregateOutputType | null
  }

  type GetAccountGroupByPayload<T extends AccountGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AccountGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AccountGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AccountGroupByOutputType[P]>
            : GetScalarType<T[P], AccountGroupByOutputType[P]>
        }
      >
    >


  export type AccountSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    accountId?: boolean
    providerId?: boolean
    userId?: boolean
    accessToken?: boolean
    refreshToken?: boolean
    idToken?: boolean
    accessTokenExpiresAt?: boolean
    refreshTokenExpiresAt?: boolean
    scope?: boolean
    password?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["account"]>



  export type AccountSelectScalar = {
    id?: boolean
    accountId?: boolean
    providerId?: boolean
    userId?: boolean
    accessToken?: boolean
    refreshToken?: boolean
    idToken?: boolean
    accessTokenExpiresAt?: boolean
    refreshTokenExpiresAt?: boolean
    scope?: boolean
    password?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type AccountOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "accountId" | "providerId" | "userId" | "accessToken" | "refreshToken" | "idToken" | "accessTokenExpiresAt" | "refreshTokenExpiresAt" | "scope" | "password" | "createdAt" | "updatedAt", ExtArgs["result"]["account"]>
  export type AccountInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $AccountPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Account"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      accountId: string
      providerId: string
      userId: string
      accessToken: string | null
      refreshToken: string | null
      idToken: string | null
      accessTokenExpiresAt: Date | null
      refreshTokenExpiresAt: Date | null
      scope: string | null
      password: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["account"]>
    composites: {}
  }

  type AccountGetPayload<S extends boolean | null | undefined | AccountDefaultArgs> = $Result.GetResult<Prisma.$AccountPayload, S>

  type AccountCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<AccountFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: AccountCountAggregateInputType | true
    }

  export interface AccountDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Account'], meta: { name: 'Account' } }
    /**
     * Find zero or one Account that matches the filter.
     * @param {AccountFindUniqueArgs} args - Arguments to find a Account
     * @example
     * // Get one Account
     * const account = await prisma.account.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AccountFindUniqueArgs>(args: SelectSubset<T, AccountFindUniqueArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Account that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {AccountFindUniqueOrThrowArgs} args - Arguments to find a Account
     * @example
     * // Get one Account
     * const account = await prisma.account.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AccountFindUniqueOrThrowArgs>(args: SelectSubset<T, AccountFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Account that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountFindFirstArgs} args - Arguments to find a Account
     * @example
     * // Get one Account
     * const account = await prisma.account.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AccountFindFirstArgs>(args?: SelectSubset<T, AccountFindFirstArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Account that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountFindFirstOrThrowArgs} args - Arguments to find a Account
     * @example
     * // Get one Account
     * const account = await prisma.account.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AccountFindFirstOrThrowArgs>(args?: SelectSubset<T, AccountFindFirstOrThrowArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Accounts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Accounts
     * const accounts = await prisma.account.findMany()
     * 
     * // Get first 10 Accounts
     * const accounts = await prisma.account.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const accountWithIdOnly = await prisma.account.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AccountFindManyArgs>(args?: SelectSubset<T, AccountFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Account.
     * @param {AccountCreateArgs} args - Arguments to create a Account.
     * @example
     * // Create one Account
     * const Account = await prisma.account.create({
     *   data: {
     *     // ... data to create a Account
     *   }
     * })
     * 
     */
    create<T extends AccountCreateArgs>(args: SelectSubset<T, AccountCreateArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Accounts.
     * @param {AccountCreateManyArgs} args - Arguments to create many Accounts.
     * @example
     * // Create many Accounts
     * const account = await prisma.account.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AccountCreateManyArgs>(args?: SelectSubset<T, AccountCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Account.
     * @param {AccountDeleteArgs} args - Arguments to delete one Account.
     * @example
     * // Delete one Account
     * const Account = await prisma.account.delete({
     *   where: {
     *     // ... filter to delete one Account
     *   }
     * })
     * 
     */
    delete<T extends AccountDeleteArgs>(args: SelectSubset<T, AccountDeleteArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Account.
     * @param {AccountUpdateArgs} args - Arguments to update one Account.
     * @example
     * // Update one Account
     * const account = await prisma.account.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AccountUpdateArgs>(args: SelectSubset<T, AccountUpdateArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Accounts.
     * @param {AccountDeleteManyArgs} args - Arguments to filter Accounts to delete.
     * @example
     * // Delete a few Accounts
     * const { count } = await prisma.account.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AccountDeleteManyArgs>(args?: SelectSubset<T, AccountDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Accounts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Accounts
     * const account = await prisma.account.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AccountUpdateManyArgs>(args: SelectSubset<T, AccountUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Account.
     * @param {AccountUpsertArgs} args - Arguments to update or create a Account.
     * @example
     * // Update or create a Account
     * const account = await prisma.account.upsert({
     *   create: {
     *     // ... data to create a Account
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Account we want to update
     *   }
     * })
     */
    upsert<T extends AccountUpsertArgs>(args: SelectSubset<T, AccountUpsertArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Accounts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountCountArgs} args - Arguments to filter Accounts to count.
     * @example
     * // Count the number of Accounts
     * const count = await prisma.account.count({
     *   where: {
     *     // ... the filter for the Accounts we want to count
     *   }
     * })
    **/
    count<T extends AccountCountArgs>(
      args?: Subset<T, AccountCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AccountCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Account.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AccountAggregateArgs>(args: Subset<T, AccountAggregateArgs>): Prisma.PrismaPromise<GetAccountAggregateType<T>>

    /**
     * Group by Account.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AccountGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AccountGroupByArgs['orderBy'] }
        : { orderBy?: AccountGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AccountGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAccountGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Account model
   */
  readonly fields: AccountFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Account.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AccountClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Account model
   */
  interface AccountFieldRefs {
    readonly id: FieldRef<"Account", 'String'>
    readonly accountId: FieldRef<"Account", 'String'>
    readonly providerId: FieldRef<"Account", 'String'>
    readonly userId: FieldRef<"Account", 'String'>
    readonly accessToken: FieldRef<"Account", 'String'>
    readonly refreshToken: FieldRef<"Account", 'String'>
    readonly idToken: FieldRef<"Account", 'String'>
    readonly accessTokenExpiresAt: FieldRef<"Account", 'DateTime'>
    readonly refreshTokenExpiresAt: FieldRef<"Account", 'DateTime'>
    readonly scope: FieldRef<"Account", 'String'>
    readonly password: FieldRef<"Account", 'String'>
    readonly createdAt: FieldRef<"Account", 'DateTime'>
    readonly updatedAt: FieldRef<"Account", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Account findUnique
   */
  export type AccountFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * Filter, which Account to fetch.
     */
    where: AccountWhereUniqueInput
  }

  /**
   * Account findUniqueOrThrow
   */
  export type AccountFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * Filter, which Account to fetch.
     */
    where: AccountWhereUniqueInput
  }

  /**
   * Account findFirst
   */
  export type AccountFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * Filter, which Account to fetch.
     */
    where?: AccountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Accounts to fetch.
     */
    orderBy?: AccountOrderByWithRelationInput | AccountOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Accounts.
     */
    cursor?: AccountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Accounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Accounts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Accounts.
     */
    distinct?: AccountScalarFieldEnum | AccountScalarFieldEnum[]
  }

  /**
   * Account findFirstOrThrow
   */
  export type AccountFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * Filter, which Account to fetch.
     */
    where?: AccountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Accounts to fetch.
     */
    orderBy?: AccountOrderByWithRelationInput | AccountOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Accounts.
     */
    cursor?: AccountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Accounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Accounts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Accounts.
     */
    distinct?: AccountScalarFieldEnum | AccountScalarFieldEnum[]
  }

  /**
   * Account findMany
   */
  export type AccountFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * Filter, which Accounts to fetch.
     */
    where?: AccountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Accounts to fetch.
     */
    orderBy?: AccountOrderByWithRelationInput | AccountOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Accounts.
     */
    cursor?: AccountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Accounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Accounts.
     */
    skip?: number
    distinct?: AccountScalarFieldEnum | AccountScalarFieldEnum[]
  }

  /**
   * Account create
   */
  export type AccountCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * The data needed to create a Account.
     */
    data: XOR<AccountCreateInput, AccountUncheckedCreateInput>
  }

  /**
   * Account createMany
   */
  export type AccountCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Accounts.
     */
    data: AccountCreateManyInput | AccountCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Account update
   */
  export type AccountUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * The data needed to update a Account.
     */
    data: XOR<AccountUpdateInput, AccountUncheckedUpdateInput>
    /**
     * Choose, which Account to update.
     */
    where: AccountWhereUniqueInput
  }

  /**
   * Account updateMany
   */
  export type AccountUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Accounts.
     */
    data: XOR<AccountUpdateManyMutationInput, AccountUncheckedUpdateManyInput>
    /**
     * Filter which Accounts to update
     */
    where?: AccountWhereInput
    /**
     * Limit how many Accounts to update.
     */
    limit?: number
  }

  /**
   * Account upsert
   */
  export type AccountUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * The filter to search for the Account to update in case it exists.
     */
    where: AccountWhereUniqueInput
    /**
     * In case the Account found by the `where` argument doesn't exist, create a new Account with this data.
     */
    create: XOR<AccountCreateInput, AccountUncheckedCreateInput>
    /**
     * In case the Account was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AccountUpdateInput, AccountUncheckedUpdateInput>
  }

  /**
   * Account delete
   */
  export type AccountDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * Filter which Account to delete.
     */
    where: AccountWhereUniqueInput
  }

  /**
   * Account deleteMany
   */
  export type AccountDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Accounts to delete
     */
    where?: AccountWhereInput
    /**
     * Limit how many Accounts to delete.
     */
    limit?: number
  }

  /**
   * Account without action
   */
  export type AccountDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
  }


  /**
   * Model Verification
   */

  export type AggregateVerification = {
    _count: VerificationCountAggregateOutputType | null
    _min: VerificationMinAggregateOutputType | null
    _max: VerificationMaxAggregateOutputType | null
  }

  export type VerificationMinAggregateOutputType = {
    id: string | null
    identifier: string | null
    value: string | null
    expiresAt: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type VerificationMaxAggregateOutputType = {
    id: string | null
    identifier: string | null
    value: string | null
    expiresAt: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type VerificationCountAggregateOutputType = {
    id: number
    identifier: number
    value: number
    expiresAt: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type VerificationMinAggregateInputType = {
    id?: true
    identifier?: true
    value?: true
    expiresAt?: true
    createdAt?: true
    updatedAt?: true
  }

  export type VerificationMaxAggregateInputType = {
    id?: true
    identifier?: true
    value?: true
    expiresAt?: true
    createdAt?: true
    updatedAt?: true
  }

  export type VerificationCountAggregateInputType = {
    id?: true
    identifier?: true
    value?: true
    expiresAt?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type VerificationAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Verification to aggregate.
     */
    where?: VerificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Verifications to fetch.
     */
    orderBy?: VerificationOrderByWithRelationInput | VerificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: VerificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Verifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Verifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Verifications
    **/
    _count?: true | VerificationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: VerificationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: VerificationMaxAggregateInputType
  }

  export type GetVerificationAggregateType<T extends VerificationAggregateArgs> = {
        [P in keyof T & keyof AggregateVerification]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateVerification[P]>
      : GetScalarType<T[P], AggregateVerification[P]>
  }




  export type VerificationGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: VerificationWhereInput
    orderBy?: VerificationOrderByWithAggregationInput | VerificationOrderByWithAggregationInput[]
    by: VerificationScalarFieldEnum[] | VerificationScalarFieldEnum
    having?: VerificationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: VerificationCountAggregateInputType | true
    _min?: VerificationMinAggregateInputType
    _max?: VerificationMaxAggregateInputType
  }

  export type VerificationGroupByOutputType = {
    id: string
    identifier: string
    value: string
    expiresAt: Date
    createdAt: Date | null
    updatedAt: Date | null
    _count: VerificationCountAggregateOutputType | null
    _min: VerificationMinAggregateOutputType | null
    _max: VerificationMaxAggregateOutputType | null
  }

  type GetVerificationGroupByPayload<T extends VerificationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<VerificationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof VerificationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], VerificationGroupByOutputType[P]>
            : GetScalarType<T[P], VerificationGroupByOutputType[P]>
        }
      >
    >


  export type VerificationSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    identifier?: boolean
    value?: boolean
    expiresAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["verification"]>



  export type VerificationSelectScalar = {
    id?: boolean
    identifier?: boolean
    value?: boolean
    expiresAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type VerificationOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "identifier" | "value" | "expiresAt" | "createdAt" | "updatedAt", ExtArgs["result"]["verification"]>

  export type $VerificationPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Verification"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      identifier: string
      value: string
      expiresAt: Date
      createdAt: Date | null
      updatedAt: Date | null
    }, ExtArgs["result"]["verification"]>
    composites: {}
  }

  type VerificationGetPayload<S extends boolean | null | undefined | VerificationDefaultArgs> = $Result.GetResult<Prisma.$VerificationPayload, S>

  type VerificationCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<VerificationFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: VerificationCountAggregateInputType | true
    }

  export interface VerificationDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Verification'], meta: { name: 'Verification' } }
    /**
     * Find zero or one Verification that matches the filter.
     * @param {VerificationFindUniqueArgs} args - Arguments to find a Verification
     * @example
     * // Get one Verification
     * const verification = await prisma.verification.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends VerificationFindUniqueArgs>(args: SelectSubset<T, VerificationFindUniqueArgs<ExtArgs>>): Prisma__VerificationClient<$Result.GetResult<Prisma.$VerificationPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Verification that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {VerificationFindUniqueOrThrowArgs} args - Arguments to find a Verification
     * @example
     * // Get one Verification
     * const verification = await prisma.verification.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends VerificationFindUniqueOrThrowArgs>(args: SelectSubset<T, VerificationFindUniqueOrThrowArgs<ExtArgs>>): Prisma__VerificationClient<$Result.GetResult<Prisma.$VerificationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Verification that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VerificationFindFirstArgs} args - Arguments to find a Verification
     * @example
     * // Get one Verification
     * const verification = await prisma.verification.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends VerificationFindFirstArgs>(args?: SelectSubset<T, VerificationFindFirstArgs<ExtArgs>>): Prisma__VerificationClient<$Result.GetResult<Prisma.$VerificationPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Verification that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VerificationFindFirstOrThrowArgs} args - Arguments to find a Verification
     * @example
     * // Get one Verification
     * const verification = await prisma.verification.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends VerificationFindFirstOrThrowArgs>(args?: SelectSubset<T, VerificationFindFirstOrThrowArgs<ExtArgs>>): Prisma__VerificationClient<$Result.GetResult<Prisma.$VerificationPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Verifications that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VerificationFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Verifications
     * const verifications = await prisma.verification.findMany()
     * 
     * // Get first 10 Verifications
     * const verifications = await prisma.verification.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const verificationWithIdOnly = await prisma.verification.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends VerificationFindManyArgs>(args?: SelectSubset<T, VerificationFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VerificationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Verification.
     * @param {VerificationCreateArgs} args - Arguments to create a Verification.
     * @example
     * // Create one Verification
     * const Verification = await prisma.verification.create({
     *   data: {
     *     // ... data to create a Verification
     *   }
     * })
     * 
     */
    create<T extends VerificationCreateArgs>(args: SelectSubset<T, VerificationCreateArgs<ExtArgs>>): Prisma__VerificationClient<$Result.GetResult<Prisma.$VerificationPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Verifications.
     * @param {VerificationCreateManyArgs} args - Arguments to create many Verifications.
     * @example
     * // Create many Verifications
     * const verification = await prisma.verification.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends VerificationCreateManyArgs>(args?: SelectSubset<T, VerificationCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Verification.
     * @param {VerificationDeleteArgs} args - Arguments to delete one Verification.
     * @example
     * // Delete one Verification
     * const Verification = await prisma.verification.delete({
     *   where: {
     *     // ... filter to delete one Verification
     *   }
     * })
     * 
     */
    delete<T extends VerificationDeleteArgs>(args: SelectSubset<T, VerificationDeleteArgs<ExtArgs>>): Prisma__VerificationClient<$Result.GetResult<Prisma.$VerificationPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Verification.
     * @param {VerificationUpdateArgs} args - Arguments to update one Verification.
     * @example
     * // Update one Verification
     * const verification = await prisma.verification.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends VerificationUpdateArgs>(args: SelectSubset<T, VerificationUpdateArgs<ExtArgs>>): Prisma__VerificationClient<$Result.GetResult<Prisma.$VerificationPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Verifications.
     * @param {VerificationDeleteManyArgs} args - Arguments to filter Verifications to delete.
     * @example
     * // Delete a few Verifications
     * const { count } = await prisma.verification.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends VerificationDeleteManyArgs>(args?: SelectSubset<T, VerificationDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Verifications.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VerificationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Verifications
     * const verification = await prisma.verification.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends VerificationUpdateManyArgs>(args: SelectSubset<T, VerificationUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Verification.
     * @param {VerificationUpsertArgs} args - Arguments to update or create a Verification.
     * @example
     * // Update or create a Verification
     * const verification = await prisma.verification.upsert({
     *   create: {
     *     // ... data to create a Verification
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Verification we want to update
     *   }
     * })
     */
    upsert<T extends VerificationUpsertArgs>(args: SelectSubset<T, VerificationUpsertArgs<ExtArgs>>): Prisma__VerificationClient<$Result.GetResult<Prisma.$VerificationPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Verifications.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VerificationCountArgs} args - Arguments to filter Verifications to count.
     * @example
     * // Count the number of Verifications
     * const count = await prisma.verification.count({
     *   where: {
     *     // ... the filter for the Verifications we want to count
     *   }
     * })
    **/
    count<T extends VerificationCountArgs>(
      args?: Subset<T, VerificationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], VerificationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Verification.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VerificationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends VerificationAggregateArgs>(args: Subset<T, VerificationAggregateArgs>): Prisma.PrismaPromise<GetVerificationAggregateType<T>>

    /**
     * Group by Verification.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VerificationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends VerificationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: VerificationGroupByArgs['orderBy'] }
        : { orderBy?: VerificationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, VerificationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetVerificationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Verification model
   */
  readonly fields: VerificationFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Verification.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__VerificationClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Verification model
   */
  interface VerificationFieldRefs {
    readonly id: FieldRef<"Verification", 'String'>
    readonly identifier: FieldRef<"Verification", 'String'>
    readonly value: FieldRef<"Verification", 'String'>
    readonly expiresAt: FieldRef<"Verification", 'DateTime'>
    readonly createdAt: FieldRef<"Verification", 'DateTime'>
    readonly updatedAt: FieldRef<"Verification", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Verification findUnique
   */
  export type VerificationFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Verification
     */
    select?: VerificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Verification
     */
    omit?: VerificationOmit<ExtArgs> | null
    /**
     * Filter, which Verification to fetch.
     */
    where: VerificationWhereUniqueInput
  }

  /**
   * Verification findUniqueOrThrow
   */
  export type VerificationFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Verification
     */
    select?: VerificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Verification
     */
    omit?: VerificationOmit<ExtArgs> | null
    /**
     * Filter, which Verification to fetch.
     */
    where: VerificationWhereUniqueInput
  }

  /**
   * Verification findFirst
   */
  export type VerificationFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Verification
     */
    select?: VerificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Verification
     */
    omit?: VerificationOmit<ExtArgs> | null
    /**
     * Filter, which Verification to fetch.
     */
    where?: VerificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Verifications to fetch.
     */
    orderBy?: VerificationOrderByWithRelationInput | VerificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Verifications.
     */
    cursor?: VerificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Verifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Verifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Verifications.
     */
    distinct?: VerificationScalarFieldEnum | VerificationScalarFieldEnum[]
  }

  /**
   * Verification findFirstOrThrow
   */
  export type VerificationFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Verification
     */
    select?: VerificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Verification
     */
    omit?: VerificationOmit<ExtArgs> | null
    /**
     * Filter, which Verification to fetch.
     */
    where?: VerificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Verifications to fetch.
     */
    orderBy?: VerificationOrderByWithRelationInput | VerificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Verifications.
     */
    cursor?: VerificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Verifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Verifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Verifications.
     */
    distinct?: VerificationScalarFieldEnum | VerificationScalarFieldEnum[]
  }

  /**
   * Verification findMany
   */
  export type VerificationFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Verification
     */
    select?: VerificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Verification
     */
    omit?: VerificationOmit<ExtArgs> | null
    /**
     * Filter, which Verifications to fetch.
     */
    where?: VerificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Verifications to fetch.
     */
    orderBy?: VerificationOrderByWithRelationInput | VerificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Verifications.
     */
    cursor?: VerificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Verifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Verifications.
     */
    skip?: number
    distinct?: VerificationScalarFieldEnum | VerificationScalarFieldEnum[]
  }

  /**
   * Verification create
   */
  export type VerificationCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Verification
     */
    select?: VerificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Verification
     */
    omit?: VerificationOmit<ExtArgs> | null
    /**
     * The data needed to create a Verification.
     */
    data: XOR<VerificationCreateInput, VerificationUncheckedCreateInput>
  }

  /**
   * Verification createMany
   */
  export type VerificationCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Verifications.
     */
    data: VerificationCreateManyInput | VerificationCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Verification update
   */
  export type VerificationUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Verification
     */
    select?: VerificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Verification
     */
    omit?: VerificationOmit<ExtArgs> | null
    /**
     * The data needed to update a Verification.
     */
    data: XOR<VerificationUpdateInput, VerificationUncheckedUpdateInput>
    /**
     * Choose, which Verification to update.
     */
    where: VerificationWhereUniqueInput
  }

  /**
   * Verification updateMany
   */
  export type VerificationUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Verifications.
     */
    data: XOR<VerificationUpdateManyMutationInput, VerificationUncheckedUpdateManyInput>
    /**
     * Filter which Verifications to update
     */
    where?: VerificationWhereInput
    /**
     * Limit how many Verifications to update.
     */
    limit?: number
  }

  /**
   * Verification upsert
   */
  export type VerificationUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Verification
     */
    select?: VerificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Verification
     */
    omit?: VerificationOmit<ExtArgs> | null
    /**
     * The filter to search for the Verification to update in case it exists.
     */
    where: VerificationWhereUniqueInput
    /**
     * In case the Verification found by the `where` argument doesn't exist, create a new Verification with this data.
     */
    create: XOR<VerificationCreateInput, VerificationUncheckedCreateInput>
    /**
     * In case the Verification was found with the provided `where` argument, update it with this data.
     */
    update: XOR<VerificationUpdateInput, VerificationUncheckedUpdateInput>
  }

  /**
   * Verification delete
   */
  export type VerificationDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Verification
     */
    select?: VerificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Verification
     */
    omit?: VerificationOmit<ExtArgs> | null
    /**
     * Filter which Verification to delete.
     */
    where: VerificationWhereUniqueInput
  }

  /**
   * Verification deleteMany
   */
  export type VerificationDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Verifications to delete
     */
    where?: VerificationWhereInput
    /**
     * Limit how many Verifications to delete.
     */
    limit?: number
  }

  /**
   * Verification without action
   */
  export type VerificationDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Verification
     */
    select?: VerificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Verification
     */
    omit?: VerificationOmit<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const ArseScalarFieldEnum: {
    id: 'id',
    stamp: 'stamp',
    inGoal: 'inGoal',
    running: 'running',
    shooting: 'shooting',
    passing: 'passing',
    ballSkill: 'ballSkill',
    attacking: 'attacking',
    defending: 'defending',
    playerId: 'playerId',
    raterId: 'raterId'
  };

  export type ArseScalarFieldEnum = (typeof ArseScalarFieldEnum)[keyof typeof ArseScalarFieldEnum]


  export const ClubScalarFieldEnum: {
    id: 'id',
    soccerwayId: 'soccerwayId',
    clubName: 'clubName',
    uri: 'uri',
    country: 'country'
  };

  export type ClubScalarFieldEnum = (typeof ClubScalarFieldEnum)[keyof typeof ClubScalarFieldEnum]


  export const ClubSupporterScalarFieldEnum: {
    playerId: 'playerId',
    clubId: 'clubId'
  };

  export type ClubSupporterScalarFieldEnum = (typeof ClubSupporterScalarFieldEnum)[keyof typeof ClubSupporterScalarFieldEnum]


  export const CountryScalarFieldEnum: {
    isoCode: 'isoCode',
    name: 'name'
  };

  export type CountryScalarFieldEnum = (typeof CountryScalarFieldEnum)[keyof typeof CountryScalarFieldEnum]


  export const CountrySupporterScalarFieldEnum: {
    playerId: 'playerId',
    countryISOCode: 'countryISOCode'
  };

  export type CountrySupporterScalarFieldEnum = (typeof CountrySupporterScalarFieldEnum)[keyof typeof CountrySupporterScalarFieldEnum]


  export const DiffsScalarFieldEnum: {
    id: 'id',
    a: 'a',
    b: 'b',
    diffAge: 'diffAge',
    diffUnknownAge: 'diffUnknownAge',
    diffGoalies: 'diffGoalies',
    diffAverage: 'diffAverage',
    diffPlayed: 'diffPlayed'
  };

  export type DiffsScalarFieldEnum = (typeof DiffsScalarFieldEnum)[keyof typeof DiffsScalarFieldEnum]


  export const GameChatScalarFieldEnum: {
    id: 'id',
    gameDay: 'gameDay',
    stamp: 'stamp',
    player: 'player',
    body: 'body'
  };

  export type GameChatScalarFieldEnum = (typeof GameChatScalarFieldEnum)[keyof typeof GameChatScalarFieldEnum]


  export const GameDayScalarFieldEnum: {
    id: 'id',
    year: 'year',
    date: 'date',
    game: 'game',
    mailSent: 'mailSent',
    comment: 'comment',
    bibs: 'bibs',
    pickerGamesHistory: 'pickerGamesHistory'
  };

  export type GameDayScalarFieldEnum = (typeof GameDayScalarFieldEnum)[keyof typeof GameDayScalarFieldEnum]


  export const InvitationScalarFieldEnum: {
    uuid: 'uuid',
    playerId: 'playerId',
    gameDayId: 'gameDayId'
  };

  export type InvitationScalarFieldEnum = (typeof InvitationScalarFieldEnum)[keyof typeof InvitationScalarFieldEnum]


  export const OutcomeScalarFieldEnum: {
    id: 'id',
    response: 'response',
    responseInterval: 'responseInterval',
    points: 'points',
    team: 'team',
    comment: 'comment',
    pub: 'pub',
    paid: 'paid',
    goalie: 'goalie',
    gameDayId: 'gameDayId',
    playerId: 'playerId'
  };

  export type OutcomeScalarFieldEnum = (typeof OutcomeScalarFieldEnum)[keyof typeof OutcomeScalarFieldEnum]


  export const PickerScalarFieldEnum: {
    playerId: 'playerId',
    playerName: 'playerName',
    age: 'age',
    average: 'average',
    goalie: 'goalie',
    played: 'played'
  };

  export type PickerScalarFieldEnum = (typeof PickerScalarFieldEnum)[keyof typeof PickerScalarFieldEnum]


  export const PickerTeamsScalarFieldEnum: {
    playerId: 'playerId',
    team: 'team'
  };

  export type PickerTeamsScalarFieldEnum = (typeof PickerTeamsScalarFieldEnum)[keyof typeof PickerTeamsScalarFieldEnum]


  export const PlayerScalarFieldEnum: {
    id: 'id',
    login: 'login',
    isAdmin: 'isAdmin',
    name: 'name',
    anonymous: 'anonymous',
    email: 'email',
    joined: 'joined',
    finished: 'finished',
    born: 'born',
    comment: 'comment',
    introducedBy: 'introducedBy'
  };

  export type PlayerScalarFieldEnum = (typeof PlayerScalarFieldEnum)[keyof typeof PlayerScalarFieldEnum]


  export const PlayerRecordScalarFieldEnum: {
    id: 'id',
    year: 'year',
    responses: 'responses',
    played: 'played',
    won: 'won',
    drawn: 'drawn',
    lost: 'lost',
    points: 'points',
    averages: 'averages',
    stalwart: 'stalwart',
    pub: 'pub',
    rankPoints: 'rankPoints',
    rankAverages: 'rankAverages',
    rankAveragesUnqualified: 'rankAveragesUnqualified',
    rankStalwart: 'rankStalwart',
    rankSpeedy: 'rankSpeedy',
    rankSpeedyUnqualified: 'rankSpeedyUnqualified',
    rankPub: 'rankPub',
    speedy: 'speedy',
    playerId: 'playerId',
    gameDayId: 'gameDayId'
  };

  export type PlayerRecordScalarFieldEnum = (typeof PlayerRecordScalarFieldEnum)[keyof typeof PlayerRecordScalarFieldEnum]


  export const UserScalarFieldEnum: {
    id: 'id',
    name: 'name',
    email: 'email',
    emailVerified: 'emailVerified',
    image: 'image',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    role: 'role',
    banned: 'banned',
    banReason: 'banReason',
    banExpires: 'banExpires'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const SessionScalarFieldEnum: {
    id: 'id',
    expiresAt: 'expiresAt',
    token: 'token',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    ipAddress: 'ipAddress',
    userAgent: 'userAgent',
    userId: 'userId',
    impersonatedBy: 'impersonatedBy'
  };

  export type SessionScalarFieldEnum = (typeof SessionScalarFieldEnum)[keyof typeof SessionScalarFieldEnum]


  export const AccountScalarFieldEnum: {
    id: 'id',
    accountId: 'accountId',
    providerId: 'providerId',
    userId: 'userId',
    accessToken: 'accessToken',
    refreshToken: 'refreshToken',
    idToken: 'idToken',
    accessTokenExpiresAt: 'accessTokenExpiresAt',
    refreshTokenExpiresAt: 'refreshTokenExpiresAt',
    scope: 'scope',
    password: 'password',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type AccountScalarFieldEnum = (typeof AccountScalarFieldEnum)[keyof typeof AccountScalarFieldEnum]


  export const VerificationScalarFieldEnum: {
    id: 'id',
    identifier: 'identifier',
    value: 'value',
    expiresAt: 'expiresAt',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type VerificationScalarFieldEnum = (typeof VerificationScalarFieldEnum)[keyof typeof VerificationScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  export const ClubOrderByRelevanceFieldEnum: {
    clubName: 'clubName',
    uri: 'uri',
    country: 'country'
  };

  export type ClubOrderByRelevanceFieldEnum = (typeof ClubOrderByRelevanceFieldEnum)[keyof typeof ClubOrderByRelevanceFieldEnum]


  export const CountryOrderByRelevanceFieldEnum: {
    isoCode: 'isoCode',
    name: 'name'
  };

  export type CountryOrderByRelevanceFieldEnum = (typeof CountryOrderByRelevanceFieldEnum)[keyof typeof CountryOrderByRelevanceFieldEnum]


  export const CountrySupporterOrderByRelevanceFieldEnum: {
    countryISOCode: 'countryISOCode'
  };

  export type CountrySupporterOrderByRelevanceFieldEnum = (typeof CountrySupporterOrderByRelevanceFieldEnum)[keyof typeof CountrySupporterOrderByRelevanceFieldEnum]


  export const DiffsOrderByRelevanceFieldEnum: {
    a: 'a',
    b: 'b'
  };

  export type DiffsOrderByRelevanceFieldEnum = (typeof DiffsOrderByRelevanceFieldEnum)[keyof typeof DiffsOrderByRelevanceFieldEnum]


  export const GameChatOrderByRelevanceFieldEnum: {
    body: 'body'
  };

  export type GameChatOrderByRelevanceFieldEnum = (typeof GameChatOrderByRelevanceFieldEnum)[keyof typeof GameChatOrderByRelevanceFieldEnum]


  export const GameDayOrderByRelevanceFieldEnum: {
    comment: 'comment'
  };

  export type GameDayOrderByRelevanceFieldEnum = (typeof GameDayOrderByRelevanceFieldEnum)[keyof typeof GameDayOrderByRelevanceFieldEnum]


  export const InvitationOrderByRelevanceFieldEnum: {
    uuid: 'uuid'
  };

  export type InvitationOrderByRelevanceFieldEnum = (typeof InvitationOrderByRelevanceFieldEnum)[keyof typeof InvitationOrderByRelevanceFieldEnum]


  export const OutcomeOrderByRelevanceFieldEnum: {
    comment: 'comment'
  };

  export type OutcomeOrderByRelevanceFieldEnum = (typeof OutcomeOrderByRelevanceFieldEnum)[keyof typeof OutcomeOrderByRelevanceFieldEnum]


  export const PickerOrderByRelevanceFieldEnum: {
    playerName: 'playerName'
  };

  export type PickerOrderByRelevanceFieldEnum = (typeof PickerOrderByRelevanceFieldEnum)[keyof typeof PickerOrderByRelevanceFieldEnum]


  export const PlayerOrderByRelevanceFieldEnum: {
    login: 'login',
    name: 'name',
    email: 'email',
    comment: 'comment'
  };

  export type PlayerOrderByRelevanceFieldEnum = (typeof PlayerOrderByRelevanceFieldEnum)[keyof typeof PlayerOrderByRelevanceFieldEnum]


  export const UserOrderByRelevanceFieldEnum: {
    id: 'id',
    name: 'name',
    email: 'email',
    image: 'image',
    role: 'role',
    banReason: 'banReason'
  };

  export type UserOrderByRelevanceFieldEnum = (typeof UserOrderByRelevanceFieldEnum)[keyof typeof UserOrderByRelevanceFieldEnum]


  export const SessionOrderByRelevanceFieldEnum: {
    id: 'id',
    token: 'token',
    ipAddress: 'ipAddress',
    userAgent: 'userAgent',
    userId: 'userId',
    impersonatedBy: 'impersonatedBy'
  };

  export type SessionOrderByRelevanceFieldEnum = (typeof SessionOrderByRelevanceFieldEnum)[keyof typeof SessionOrderByRelevanceFieldEnum]


  export const AccountOrderByRelevanceFieldEnum: {
    id: 'id',
    accountId: 'accountId',
    providerId: 'providerId',
    userId: 'userId',
    accessToken: 'accessToken',
    refreshToken: 'refreshToken',
    idToken: 'idToken',
    scope: 'scope',
    password: 'password'
  };

  export type AccountOrderByRelevanceFieldEnum = (typeof AccountOrderByRelevanceFieldEnum)[keyof typeof AccountOrderByRelevanceFieldEnum]


  export const VerificationOrderByRelevanceFieldEnum: {
    id: 'id',
    identifier: 'identifier',
    value: 'value'
  };

  export type VerificationOrderByRelevanceFieldEnum = (typeof VerificationOrderByRelevanceFieldEnum)[keyof typeof VerificationOrderByRelevanceFieldEnum]


  /**
   * Field references
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'TeamName'
   */
  export type EnumTeamNameFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'TeamName'>
    


  /**
   * Reference to a field of type 'PlayerResponse'
   */
  export type EnumPlayerResponseFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'PlayerResponse'>
    
  /**
   * Deep Input Types
   */


  export type ArseWhereInput = {
    AND?: ArseWhereInput | ArseWhereInput[]
    OR?: ArseWhereInput[]
    NOT?: ArseWhereInput | ArseWhereInput[]
    id?: IntFilter<"Arse"> | number
    stamp?: DateTimeFilter<"Arse"> | Date | string
    inGoal?: IntNullableFilter<"Arse"> | number | null
    running?: IntNullableFilter<"Arse"> | number | null
    shooting?: IntNullableFilter<"Arse"> | number | null
    passing?: IntNullableFilter<"Arse"> | number | null
    ballSkill?: IntNullableFilter<"Arse"> | number | null
    attacking?: IntNullableFilter<"Arse"> | number | null
    defending?: IntNullableFilter<"Arse"> | number | null
    playerId?: IntFilter<"Arse"> | number
    raterId?: IntFilter<"Arse"> | number
    player?: XOR<PlayerScalarRelationFilter, PlayerWhereInput>
    rater?: XOR<PlayerScalarRelationFilter, PlayerWhereInput>
  }

  export type ArseOrderByWithRelationInput = {
    id?: SortOrder
    stamp?: SortOrder
    inGoal?: SortOrderInput | SortOrder
    running?: SortOrderInput | SortOrder
    shooting?: SortOrderInput | SortOrder
    passing?: SortOrderInput | SortOrder
    ballSkill?: SortOrderInput | SortOrder
    attacking?: SortOrderInput | SortOrder
    defending?: SortOrderInput | SortOrder
    playerId?: SortOrder
    raterId?: SortOrder
    player?: PlayerOrderByWithRelationInput
    rater?: PlayerOrderByWithRelationInput
  }

  export type ArseWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    playerId_raterId?: ArsePlayerIdRaterIdCompoundUniqueInput
    AND?: ArseWhereInput | ArseWhereInput[]
    OR?: ArseWhereInput[]
    NOT?: ArseWhereInput | ArseWhereInput[]
    stamp?: DateTimeFilter<"Arse"> | Date | string
    inGoal?: IntNullableFilter<"Arse"> | number | null
    running?: IntNullableFilter<"Arse"> | number | null
    shooting?: IntNullableFilter<"Arse"> | number | null
    passing?: IntNullableFilter<"Arse"> | number | null
    ballSkill?: IntNullableFilter<"Arse"> | number | null
    attacking?: IntNullableFilter<"Arse"> | number | null
    defending?: IntNullableFilter<"Arse"> | number | null
    playerId?: IntFilter<"Arse"> | number
    raterId?: IntFilter<"Arse"> | number
    player?: XOR<PlayerScalarRelationFilter, PlayerWhereInput>
    rater?: XOR<PlayerScalarRelationFilter, PlayerWhereInput>
  }, "id" | "playerId_raterId">

  export type ArseOrderByWithAggregationInput = {
    id?: SortOrder
    stamp?: SortOrder
    inGoal?: SortOrderInput | SortOrder
    running?: SortOrderInput | SortOrder
    shooting?: SortOrderInput | SortOrder
    passing?: SortOrderInput | SortOrder
    ballSkill?: SortOrderInput | SortOrder
    attacking?: SortOrderInput | SortOrder
    defending?: SortOrderInput | SortOrder
    playerId?: SortOrder
    raterId?: SortOrder
    _count?: ArseCountOrderByAggregateInput
    _avg?: ArseAvgOrderByAggregateInput
    _max?: ArseMaxOrderByAggregateInput
    _min?: ArseMinOrderByAggregateInput
    _sum?: ArseSumOrderByAggregateInput
  }

  export type ArseScalarWhereWithAggregatesInput = {
    AND?: ArseScalarWhereWithAggregatesInput | ArseScalarWhereWithAggregatesInput[]
    OR?: ArseScalarWhereWithAggregatesInput[]
    NOT?: ArseScalarWhereWithAggregatesInput | ArseScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Arse"> | number
    stamp?: DateTimeWithAggregatesFilter<"Arse"> | Date | string
    inGoal?: IntNullableWithAggregatesFilter<"Arse"> | number | null
    running?: IntNullableWithAggregatesFilter<"Arse"> | number | null
    shooting?: IntNullableWithAggregatesFilter<"Arse"> | number | null
    passing?: IntNullableWithAggregatesFilter<"Arse"> | number | null
    ballSkill?: IntNullableWithAggregatesFilter<"Arse"> | number | null
    attacking?: IntNullableWithAggregatesFilter<"Arse"> | number | null
    defending?: IntNullableWithAggregatesFilter<"Arse"> | number | null
    playerId?: IntWithAggregatesFilter<"Arse"> | number
    raterId?: IntWithAggregatesFilter<"Arse"> | number
  }

  export type ClubWhereInput = {
    AND?: ClubWhereInput | ClubWhereInput[]
    OR?: ClubWhereInput[]
    NOT?: ClubWhereInput | ClubWhereInput[]
    id?: IntFilter<"Club"> | number
    soccerwayId?: IntNullableFilter<"Club"> | number | null
    clubName?: StringFilter<"Club"> | string
    uri?: StringNullableFilter<"Club"> | string | null
    country?: StringNullableFilter<"Club"> | string | null
    supporters?: ClubSupporterListRelationFilter
  }

  export type ClubOrderByWithRelationInput = {
    id?: SortOrder
    soccerwayId?: SortOrderInput | SortOrder
    clubName?: SortOrder
    uri?: SortOrderInput | SortOrder
    country?: SortOrderInput | SortOrder
    supporters?: ClubSupporterOrderByRelationAggregateInput
    _relevance?: ClubOrderByRelevanceInput
  }

  export type ClubWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: ClubWhereInput | ClubWhereInput[]
    OR?: ClubWhereInput[]
    NOT?: ClubWhereInput | ClubWhereInput[]
    soccerwayId?: IntNullableFilter<"Club"> | number | null
    clubName?: StringFilter<"Club"> | string
    uri?: StringNullableFilter<"Club"> | string | null
    country?: StringNullableFilter<"Club"> | string | null
    supporters?: ClubSupporterListRelationFilter
  }, "id">

  export type ClubOrderByWithAggregationInput = {
    id?: SortOrder
    soccerwayId?: SortOrderInput | SortOrder
    clubName?: SortOrder
    uri?: SortOrderInput | SortOrder
    country?: SortOrderInput | SortOrder
    _count?: ClubCountOrderByAggregateInput
    _avg?: ClubAvgOrderByAggregateInput
    _max?: ClubMaxOrderByAggregateInput
    _min?: ClubMinOrderByAggregateInput
    _sum?: ClubSumOrderByAggregateInput
  }

  export type ClubScalarWhereWithAggregatesInput = {
    AND?: ClubScalarWhereWithAggregatesInput | ClubScalarWhereWithAggregatesInput[]
    OR?: ClubScalarWhereWithAggregatesInput[]
    NOT?: ClubScalarWhereWithAggregatesInput | ClubScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Club"> | number
    soccerwayId?: IntNullableWithAggregatesFilter<"Club"> | number | null
    clubName?: StringWithAggregatesFilter<"Club"> | string
    uri?: StringNullableWithAggregatesFilter<"Club"> | string | null
    country?: StringNullableWithAggregatesFilter<"Club"> | string | null
  }

  export type ClubSupporterWhereInput = {
    AND?: ClubSupporterWhereInput | ClubSupporterWhereInput[]
    OR?: ClubSupporterWhereInput[]
    NOT?: ClubSupporterWhereInput | ClubSupporterWhereInput[]
    playerId?: IntFilter<"ClubSupporter"> | number
    clubId?: IntFilter<"ClubSupporter"> | number
    player?: XOR<PlayerScalarRelationFilter, PlayerWhereInput>
    club?: XOR<ClubScalarRelationFilter, ClubWhereInput>
  }

  export type ClubSupporterOrderByWithRelationInput = {
    playerId?: SortOrder
    clubId?: SortOrder
    player?: PlayerOrderByWithRelationInput
    club?: ClubOrderByWithRelationInput
  }

  export type ClubSupporterWhereUniqueInput = Prisma.AtLeast<{
    playerId_clubId?: ClubSupporterPlayerIdClubIdCompoundUniqueInput
    AND?: ClubSupporterWhereInput | ClubSupporterWhereInput[]
    OR?: ClubSupporterWhereInput[]
    NOT?: ClubSupporterWhereInput | ClubSupporterWhereInput[]
    playerId?: IntFilter<"ClubSupporter"> | number
    clubId?: IntFilter<"ClubSupporter"> | number
    player?: XOR<PlayerScalarRelationFilter, PlayerWhereInput>
    club?: XOR<ClubScalarRelationFilter, ClubWhereInput>
  }, "playerId_clubId">

  export type ClubSupporterOrderByWithAggregationInput = {
    playerId?: SortOrder
    clubId?: SortOrder
    _count?: ClubSupporterCountOrderByAggregateInput
    _avg?: ClubSupporterAvgOrderByAggregateInput
    _max?: ClubSupporterMaxOrderByAggregateInput
    _min?: ClubSupporterMinOrderByAggregateInput
    _sum?: ClubSupporterSumOrderByAggregateInput
  }

  export type ClubSupporterScalarWhereWithAggregatesInput = {
    AND?: ClubSupporterScalarWhereWithAggregatesInput | ClubSupporterScalarWhereWithAggregatesInput[]
    OR?: ClubSupporterScalarWhereWithAggregatesInput[]
    NOT?: ClubSupporterScalarWhereWithAggregatesInput | ClubSupporterScalarWhereWithAggregatesInput[]
    playerId?: IntWithAggregatesFilter<"ClubSupporter"> | number
    clubId?: IntWithAggregatesFilter<"ClubSupporter"> | number
  }

  export type CountryWhereInput = {
    AND?: CountryWhereInput | CountryWhereInput[]
    OR?: CountryWhereInput[]
    NOT?: CountryWhereInput | CountryWhereInput[]
    isoCode?: StringFilter<"Country"> | string
    name?: StringFilter<"Country"> | string
    supporters?: CountrySupporterListRelationFilter
  }

  export type CountryOrderByWithRelationInput = {
    isoCode?: SortOrder
    name?: SortOrder
    supporters?: CountrySupporterOrderByRelationAggregateInput
    _relevance?: CountryOrderByRelevanceInput
  }

  export type CountryWhereUniqueInput = Prisma.AtLeast<{
    isoCode?: string
    name?: string
    AND?: CountryWhereInput | CountryWhereInput[]
    OR?: CountryWhereInput[]
    NOT?: CountryWhereInput | CountryWhereInput[]
    supporters?: CountrySupporterListRelationFilter
  }, "isoCode" | "name">

  export type CountryOrderByWithAggregationInput = {
    isoCode?: SortOrder
    name?: SortOrder
    _count?: CountryCountOrderByAggregateInput
    _max?: CountryMaxOrderByAggregateInput
    _min?: CountryMinOrderByAggregateInput
  }

  export type CountryScalarWhereWithAggregatesInput = {
    AND?: CountryScalarWhereWithAggregatesInput | CountryScalarWhereWithAggregatesInput[]
    OR?: CountryScalarWhereWithAggregatesInput[]
    NOT?: CountryScalarWhereWithAggregatesInput | CountryScalarWhereWithAggregatesInput[]
    isoCode?: StringWithAggregatesFilter<"Country"> | string
    name?: StringWithAggregatesFilter<"Country"> | string
  }

  export type CountrySupporterWhereInput = {
    AND?: CountrySupporterWhereInput | CountrySupporterWhereInput[]
    OR?: CountrySupporterWhereInput[]
    NOT?: CountrySupporterWhereInput | CountrySupporterWhereInput[]
    playerId?: IntFilter<"CountrySupporter"> | number
    countryISOCode?: StringFilter<"CountrySupporter"> | string
    country?: XOR<CountryScalarRelationFilter, CountryWhereInput>
    player?: XOR<PlayerScalarRelationFilter, PlayerWhereInput>
  }

  export type CountrySupporterOrderByWithRelationInput = {
    playerId?: SortOrder
    countryISOCode?: SortOrder
    country?: CountryOrderByWithRelationInput
    player?: PlayerOrderByWithRelationInput
    _relevance?: CountrySupporterOrderByRelevanceInput
  }

  export type CountrySupporterWhereUniqueInput = Prisma.AtLeast<{
    playerId_countryISOCode?: CountrySupporterPlayerIdCountryISOCodeCompoundUniqueInput
    AND?: CountrySupporterWhereInput | CountrySupporterWhereInput[]
    OR?: CountrySupporterWhereInput[]
    NOT?: CountrySupporterWhereInput | CountrySupporterWhereInput[]
    playerId?: IntFilter<"CountrySupporter"> | number
    countryISOCode?: StringFilter<"CountrySupporter"> | string
    country?: XOR<CountryScalarRelationFilter, CountryWhereInput>
    player?: XOR<PlayerScalarRelationFilter, PlayerWhereInput>
  }, "playerId_countryISOCode">

  export type CountrySupporterOrderByWithAggregationInput = {
    playerId?: SortOrder
    countryISOCode?: SortOrder
    _count?: CountrySupporterCountOrderByAggregateInput
    _avg?: CountrySupporterAvgOrderByAggregateInput
    _max?: CountrySupporterMaxOrderByAggregateInput
    _min?: CountrySupporterMinOrderByAggregateInput
    _sum?: CountrySupporterSumOrderByAggregateInput
  }

  export type CountrySupporterScalarWhereWithAggregatesInput = {
    AND?: CountrySupporterScalarWhereWithAggregatesInput | CountrySupporterScalarWhereWithAggregatesInput[]
    OR?: CountrySupporterScalarWhereWithAggregatesInput[]
    NOT?: CountrySupporterScalarWhereWithAggregatesInput | CountrySupporterScalarWhereWithAggregatesInput[]
    playerId?: IntWithAggregatesFilter<"CountrySupporter"> | number
    countryISOCode?: StringWithAggregatesFilter<"CountrySupporter"> | string
  }

  export type DiffsWhereInput = {
    AND?: DiffsWhereInput | DiffsWhereInput[]
    OR?: DiffsWhereInput[]
    NOT?: DiffsWhereInput | DiffsWhereInput[]
    id?: IntFilter<"Diffs"> | number
    a?: StringNullableFilter<"Diffs"> | string | null
    b?: StringNullableFilter<"Diffs"> | string | null
    diffAge?: FloatNullableFilter<"Diffs"> | number | null
    diffUnknownAge?: IntNullableFilter<"Diffs"> | number | null
    diffGoalies?: IntNullableFilter<"Diffs"> | number | null
    diffAverage?: FloatNullableFilter<"Diffs"> | number | null
    diffPlayed?: IntNullableFilter<"Diffs"> | number | null
  }

  export type DiffsOrderByWithRelationInput = {
    id?: SortOrder
    a?: SortOrderInput | SortOrder
    b?: SortOrderInput | SortOrder
    diffAge?: SortOrderInput | SortOrder
    diffUnknownAge?: SortOrderInput | SortOrder
    diffGoalies?: SortOrderInput | SortOrder
    diffAverage?: SortOrderInput | SortOrder
    diffPlayed?: SortOrderInput | SortOrder
    _relevance?: DiffsOrderByRelevanceInput
  }

  export type DiffsWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: DiffsWhereInput | DiffsWhereInput[]
    OR?: DiffsWhereInput[]
    NOT?: DiffsWhereInput | DiffsWhereInput[]
    a?: StringNullableFilter<"Diffs"> | string | null
    b?: StringNullableFilter<"Diffs"> | string | null
    diffAge?: FloatNullableFilter<"Diffs"> | number | null
    diffUnknownAge?: IntNullableFilter<"Diffs"> | number | null
    diffGoalies?: IntNullableFilter<"Diffs"> | number | null
    diffAverage?: FloatNullableFilter<"Diffs"> | number | null
    diffPlayed?: IntNullableFilter<"Diffs"> | number | null
  }, "id">

  export type DiffsOrderByWithAggregationInput = {
    id?: SortOrder
    a?: SortOrderInput | SortOrder
    b?: SortOrderInput | SortOrder
    diffAge?: SortOrderInput | SortOrder
    diffUnknownAge?: SortOrderInput | SortOrder
    diffGoalies?: SortOrderInput | SortOrder
    diffAverage?: SortOrderInput | SortOrder
    diffPlayed?: SortOrderInput | SortOrder
    _count?: DiffsCountOrderByAggregateInput
    _avg?: DiffsAvgOrderByAggregateInput
    _max?: DiffsMaxOrderByAggregateInput
    _min?: DiffsMinOrderByAggregateInput
    _sum?: DiffsSumOrderByAggregateInput
  }

  export type DiffsScalarWhereWithAggregatesInput = {
    AND?: DiffsScalarWhereWithAggregatesInput | DiffsScalarWhereWithAggregatesInput[]
    OR?: DiffsScalarWhereWithAggregatesInput[]
    NOT?: DiffsScalarWhereWithAggregatesInput | DiffsScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Diffs"> | number
    a?: StringNullableWithAggregatesFilter<"Diffs"> | string | null
    b?: StringNullableWithAggregatesFilter<"Diffs"> | string | null
    diffAge?: FloatNullableWithAggregatesFilter<"Diffs"> | number | null
    diffUnknownAge?: IntNullableWithAggregatesFilter<"Diffs"> | number | null
    diffGoalies?: IntNullableWithAggregatesFilter<"Diffs"> | number | null
    diffAverage?: FloatNullableWithAggregatesFilter<"Diffs"> | number | null
    diffPlayed?: IntNullableWithAggregatesFilter<"Diffs"> | number | null
  }

  export type GameChatWhereInput = {
    AND?: GameChatWhereInput | GameChatWhereInput[]
    OR?: GameChatWhereInput[]
    NOT?: GameChatWhereInput | GameChatWhereInput[]
    id?: IntFilter<"GameChat"> | number
    gameDay?: IntFilter<"GameChat"> | number
    stamp?: DateTimeFilter<"GameChat"> | Date | string
    player?: IntFilter<"GameChat"> | number
    body?: StringNullableFilter<"GameChat"> | string | null
  }

  export type GameChatOrderByWithRelationInput = {
    id?: SortOrder
    gameDay?: SortOrder
    stamp?: SortOrder
    player?: SortOrder
    body?: SortOrderInput | SortOrder
    _relevance?: GameChatOrderByRelevanceInput
  }

  export type GameChatWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: GameChatWhereInput | GameChatWhereInput[]
    OR?: GameChatWhereInput[]
    NOT?: GameChatWhereInput | GameChatWhereInput[]
    gameDay?: IntFilter<"GameChat"> | number
    stamp?: DateTimeFilter<"GameChat"> | Date | string
    player?: IntFilter<"GameChat"> | number
    body?: StringNullableFilter<"GameChat"> | string | null
  }, "id">

  export type GameChatOrderByWithAggregationInput = {
    id?: SortOrder
    gameDay?: SortOrder
    stamp?: SortOrder
    player?: SortOrder
    body?: SortOrderInput | SortOrder
    _count?: GameChatCountOrderByAggregateInput
    _avg?: GameChatAvgOrderByAggregateInput
    _max?: GameChatMaxOrderByAggregateInput
    _min?: GameChatMinOrderByAggregateInput
    _sum?: GameChatSumOrderByAggregateInput
  }

  export type GameChatScalarWhereWithAggregatesInput = {
    AND?: GameChatScalarWhereWithAggregatesInput | GameChatScalarWhereWithAggregatesInput[]
    OR?: GameChatScalarWhereWithAggregatesInput[]
    NOT?: GameChatScalarWhereWithAggregatesInput | GameChatScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"GameChat"> | number
    gameDay?: IntWithAggregatesFilter<"GameChat"> | number
    stamp?: DateTimeWithAggregatesFilter<"GameChat"> | Date | string
    player?: IntWithAggregatesFilter<"GameChat"> | number
    body?: StringNullableWithAggregatesFilter<"GameChat"> | string | null
  }

  export type GameDayWhereInput = {
    AND?: GameDayWhereInput | GameDayWhereInput[]
    OR?: GameDayWhereInput[]
    NOT?: GameDayWhereInput | GameDayWhereInput[]
    id?: IntFilter<"GameDay"> | number
    year?: IntFilter<"GameDay"> | number
    date?: DateTimeFilter<"GameDay"> | Date | string
    game?: BoolFilter<"GameDay"> | boolean
    mailSent?: DateTimeNullableFilter<"GameDay"> | Date | string | null
    comment?: StringNullableFilter<"GameDay"> | string | null
    bibs?: EnumTeamNameNullableFilter<"GameDay"> | $Enums.TeamName | null
    pickerGamesHistory?: IntNullableFilter<"GameDay"> | number | null
    outcomes?: OutcomeListRelationFilter
    playerRecords?: PlayerRecordListRelationFilter
  }

  export type GameDayOrderByWithRelationInput = {
    id?: SortOrder
    year?: SortOrder
    date?: SortOrder
    game?: SortOrder
    mailSent?: SortOrderInput | SortOrder
    comment?: SortOrderInput | SortOrder
    bibs?: SortOrderInput | SortOrder
    pickerGamesHistory?: SortOrderInput | SortOrder
    outcomes?: OutcomeOrderByRelationAggregateInput
    playerRecords?: PlayerRecordOrderByRelationAggregateInput
    _relevance?: GameDayOrderByRelevanceInput
  }

  export type GameDayWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: GameDayWhereInput | GameDayWhereInput[]
    OR?: GameDayWhereInput[]
    NOT?: GameDayWhereInput | GameDayWhereInput[]
    year?: IntFilter<"GameDay"> | number
    date?: DateTimeFilter<"GameDay"> | Date | string
    game?: BoolFilter<"GameDay"> | boolean
    mailSent?: DateTimeNullableFilter<"GameDay"> | Date | string | null
    comment?: StringNullableFilter<"GameDay"> | string | null
    bibs?: EnumTeamNameNullableFilter<"GameDay"> | $Enums.TeamName | null
    pickerGamesHistory?: IntNullableFilter<"GameDay"> | number | null
    outcomes?: OutcomeListRelationFilter
    playerRecords?: PlayerRecordListRelationFilter
  }, "id">

  export type GameDayOrderByWithAggregationInput = {
    id?: SortOrder
    year?: SortOrder
    date?: SortOrder
    game?: SortOrder
    mailSent?: SortOrderInput | SortOrder
    comment?: SortOrderInput | SortOrder
    bibs?: SortOrderInput | SortOrder
    pickerGamesHistory?: SortOrderInput | SortOrder
    _count?: GameDayCountOrderByAggregateInput
    _avg?: GameDayAvgOrderByAggregateInput
    _max?: GameDayMaxOrderByAggregateInput
    _min?: GameDayMinOrderByAggregateInput
    _sum?: GameDaySumOrderByAggregateInput
  }

  export type GameDayScalarWhereWithAggregatesInput = {
    AND?: GameDayScalarWhereWithAggregatesInput | GameDayScalarWhereWithAggregatesInput[]
    OR?: GameDayScalarWhereWithAggregatesInput[]
    NOT?: GameDayScalarWhereWithAggregatesInput | GameDayScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"GameDay"> | number
    year?: IntWithAggregatesFilter<"GameDay"> | number
    date?: DateTimeWithAggregatesFilter<"GameDay"> | Date | string
    game?: BoolWithAggregatesFilter<"GameDay"> | boolean
    mailSent?: DateTimeNullableWithAggregatesFilter<"GameDay"> | Date | string | null
    comment?: StringNullableWithAggregatesFilter<"GameDay"> | string | null
    bibs?: EnumTeamNameNullableWithAggregatesFilter<"GameDay"> | $Enums.TeamName | null
    pickerGamesHistory?: IntNullableWithAggregatesFilter<"GameDay"> | number | null
  }

  export type InvitationWhereInput = {
    AND?: InvitationWhereInput | InvitationWhereInput[]
    OR?: InvitationWhereInput[]
    NOT?: InvitationWhereInput | InvitationWhereInput[]
    uuid?: StringFilter<"Invitation"> | string
    playerId?: IntFilter<"Invitation"> | number
    gameDayId?: IntFilter<"Invitation"> | number
  }

  export type InvitationOrderByWithRelationInput = {
    uuid?: SortOrder
    playerId?: SortOrder
    gameDayId?: SortOrder
    _relevance?: InvitationOrderByRelevanceInput
  }

  export type InvitationWhereUniqueInput = Prisma.AtLeast<{
    uuid?: string
    AND?: InvitationWhereInput | InvitationWhereInput[]
    OR?: InvitationWhereInput[]
    NOT?: InvitationWhereInput | InvitationWhereInput[]
    playerId?: IntFilter<"Invitation"> | number
    gameDayId?: IntFilter<"Invitation"> | number
  }, "uuid">

  export type InvitationOrderByWithAggregationInput = {
    uuid?: SortOrder
    playerId?: SortOrder
    gameDayId?: SortOrder
    _count?: InvitationCountOrderByAggregateInput
    _avg?: InvitationAvgOrderByAggregateInput
    _max?: InvitationMaxOrderByAggregateInput
    _min?: InvitationMinOrderByAggregateInput
    _sum?: InvitationSumOrderByAggregateInput
  }

  export type InvitationScalarWhereWithAggregatesInput = {
    AND?: InvitationScalarWhereWithAggregatesInput | InvitationScalarWhereWithAggregatesInput[]
    OR?: InvitationScalarWhereWithAggregatesInput[]
    NOT?: InvitationScalarWhereWithAggregatesInput | InvitationScalarWhereWithAggregatesInput[]
    uuid?: StringWithAggregatesFilter<"Invitation"> | string
    playerId?: IntWithAggregatesFilter<"Invitation"> | number
    gameDayId?: IntWithAggregatesFilter<"Invitation"> | number
  }

  export type OutcomeWhereInput = {
    AND?: OutcomeWhereInput | OutcomeWhereInput[]
    OR?: OutcomeWhereInput[]
    NOT?: OutcomeWhereInput | OutcomeWhereInput[]
    id?: IntFilter<"Outcome"> | number
    response?: EnumPlayerResponseNullableFilter<"Outcome"> | $Enums.PlayerResponse | null
    responseInterval?: IntNullableFilter<"Outcome"> | number | null
    points?: IntNullableFilter<"Outcome"> | number | null
    team?: EnumTeamNameNullableFilter<"Outcome"> | $Enums.TeamName | null
    comment?: StringNullableFilter<"Outcome"> | string | null
    pub?: IntNullableFilter<"Outcome"> | number | null
    paid?: BoolNullableFilter<"Outcome"> | boolean | null
    goalie?: BoolNullableFilter<"Outcome"> | boolean | null
    gameDayId?: IntFilter<"Outcome"> | number
    playerId?: IntFilter<"Outcome"> | number
    gameDay?: XOR<GameDayScalarRelationFilter, GameDayWhereInput>
    player?: XOR<PlayerScalarRelationFilter, PlayerWhereInput>
  }

  export type OutcomeOrderByWithRelationInput = {
    id?: SortOrder
    response?: SortOrderInput | SortOrder
    responseInterval?: SortOrderInput | SortOrder
    points?: SortOrderInput | SortOrder
    team?: SortOrderInput | SortOrder
    comment?: SortOrderInput | SortOrder
    pub?: SortOrderInput | SortOrder
    paid?: SortOrderInput | SortOrder
    goalie?: SortOrderInput | SortOrder
    gameDayId?: SortOrder
    playerId?: SortOrder
    gameDay?: GameDayOrderByWithRelationInput
    player?: PlayerOrderByWithRelationInput
    _relevance?: OutcomeOrderByRelevanceInput
  }

  export type OutcomeWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    gameDayId_playerId?: OutcomeGameDayIdPlayerIdCompoundUniqueInput
    AND?: OutcomeWhereInput | OutcomeWhereInput[]
    OR?: OutcomeWhereInput[]
    NOT?: OutcomeWhereInput | OutcomeWhereInput[]
    response?: EnumPlayerResponseNullableFilter<"Outcome"> | $Enums.PlayerResponse | null
    responseInterval?: IntNullableFilter<"Outcome"> | number | null
    points?: IntNullableFilter<"Outcome"> | number | null
    team?: EnumTeamNameNullableFilter<"Outcome"> | $Enums.TeamName | null
    comment?: StringNullableFilter<"Outcome"> | string | null
    pub?: IntNullableFilter<"Outcome"> | number | null
    paid?: BoolNullableFilter<"Outcome"> | boolean | null
    goalie?: BoolNullableFilter<"Outcome"> | boolean | null
    gameDayId?: IntFilter<"Outcome"> | number
    playerId?: IntFilter<"Outcome"> | number
    gameDay?: XOR<GameDayScalarRelationFilter, GameDayWhereInput>
    player?: XOR<PlayerScalarRelationFilter, PlayerWhereInput>
  }, "id" | "gameDayId_playerId">

  export type OutcomeOrderByWithAggregationInput = {
    id?: SortOrder
    response?: SortOrderInput | SortOrder
    responseInterval?: SortOrderInput | SortOrder
    points?: SortOrderInput | SortOrder
    team?: SortOrderInput | SortOrder
    comment?: SortOrderInput | SortOrder
    pub?: SortOrderInput | SortOrder
    paid?: SortOrderInput | SortOrder
    goalie?: SortOrderInput | SortOrder
    gameDayId?: SortOrder
    playerId?: SortOrder
    _count?: OutcomeCountOrderByAggregateInput
    _avg?: OutcomeAvgOrderByAggregateInput
    _max?: OutcomeMaxOrderByAggregateInput
    _min?: OutcomeMinOrderByAggregateInput
    _sum?: OutcomeSumOrderByAggregateInput
  }

  export type OutcomeScalarWhereWithAggregatesInput = {
    AND?: OutcomeScalarWhereWithAggregatesInput | OutcomeScalarWhereWithAggregatesInput[]
    OR?: OutcomeScalarWhereWithAggregatesInput[]
    NOT?: OutcomeScalarWhereWithAggregatesInput | OutcomeScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Outcome"> | number
    response?: EnumPlayerResponseNullableWithAggregatesFilter<"Outcome"> | $Enums.PlayerResponse | null
    responseInterval?: IntNullableWithAggregatesFilter<"Outcome"> | number | null
    points?: IntNullableWithAggregatesFilter<"Outcome"> | number | null
    team?: EnumTeamNameNullableWithAggregatesFilter<"Outcome"> | $Enums.TeamName | null
    comment?: StringNullableWithAggregatesFilter<"Outcome"> | string | null
    pub?: IntNullableWithAggregatesFilter<"Outcome"> | number | null
    paid?: BoolNullableWithAggregatesFilter<"Outcome"> | boolean | null
    goalie?: BoolNullableWithAggregatesFilter<"Outcome"> | boolean | null
    gameDayId?: IntWithAggregatesFilter<"Outcome"> | number
    playerId?: IntWithAggregatesFilter<"Outcome"> | number
  }

  export type PickerWhereInput = {
    AND?: PickerWhereInput | PickerWhereInput[]
    OR?: PickerWhereInput[]
    NOT?: PickerWhereInput | PickerWhereInput[]
    playerId?: IntFilter<"Picker"> | number
    playerName?: StringNullableFilter<"Picker"> | string | null
    age?: IntNullableFilter<"Picker"> | number | null
    average?: FloatNullableFilter<"Picker"> | number | null
    goalie?: IntNullableFilter<"Picker"> | number | null
    played?: IntNullableFilter<"Picker"> | number | null
  }

  export type PickerOrderByWithRelationInput = {
    playerId?: SortOrder
    playerName?: SortOrderInput | SortOrder
    age?: SortOrderInput | SortOrder
    average?: SortOrderInput | SortOrder
    goalie?: SortOrderInput | SortOrder
    played?: SortOrderInput | SortOrder
    _relevance?: PickerOrderByRelevanceInput
  }

  export type PickerWhereUniqueInput = Prisma.AtLeast<{
    playerId?: number
    AND?: PickerWhereInput | PickerWhereInput[]
    OR?: PickerWhereInput[]
    NOT?: PickerWhereInput | PickerWhereInput[]
    playerName?: StringNullableFilter<"Picker"> | string | null
    age?: IntNullableFilter<"Picker"> | number | null
    average?: FloatNullableFilter<"Picker"> | number | null
    goalie?: IntNullableFilter<"Picker"> | number | null
    played?: IntNullableFilter<"Picker"> | number | null
  }, "playerId">

  export type PickerOrderByWithAggregationInput = {
    playerId?: SortOrder
    playerName?: SortOrderInput | SortOrder
    age?: SortOrderInput | SortOrder
    average?: SortOrderInput | SortOrder
    goalie?: SortOrderInput | SortOrder
    played?: SortOrderInput | SortOrder
    _count?: PickerCountOrderByAggregateInput
    _avg?: PickerAvgOrderByAggregateInput
    _max?: PickerMaxOrderByAggregateInput
    _min?: PickerMinOrderByAggregateInput
    _sum?: PickerSumOrderByAggregateInput
  }

  export type PickerScalarWhereWithAggregatesInput = {
    AND?: PickerScalarWhereWithAggregatesInput | PickerScalarWhereWithAggregatesInput[]
    OR?: PickerScalarWhereWithAggregatesInput[]
    NOT?: PickerScalarWhereWithAggregatesInput | PickerScalarWhereWithAggregatesInput[]
    playerId?: IntWithAggregatesFilter<"Picker"> | number
    playerName?: StringNullableWithAggregatesFilter<"Picker"> | string | null
    age?: IntNullableWithAggregatesFilter<"Picker"> | number | null
    average?: FloatNullableWithAggregatesFilter<"Picker"> | number | null
    goalie?: IntNullableWithAggregatesFilter<"Picker"> | number | null
    played?: IntNullableWithAggregatesFilter<"Picker"> | number | null
  }

  export type PickerTeamsWhereInput = {
    AND?: PickerTeamsWhereInput | PickerTeamsWhereInput[]
    OR?: PickerTeamsWhereInput[]
    NOT?: PickerTeamsWhereInput | PickerTeamsWhereInput[]
    playerId?: IntFilter<"PickerTeams"> | number
    team?: EnumTeamNameNullableFilter<"PickerTeams"> | $Enums.TeamName | null
  }

  export type PickerTeamsOrderByWithRelationInput = {
    playerId?: SortOrder
    team?: SortOrderInput | SortOrder
  }

  export type PickerTeamsWhereUniqueInput = Prisma.AtLeast<{
    playerId?: number
    AND?: PickerTeamsWhereInput | PickerTeamsWhereInput[]
    OR?: PickerTeamsWhereInput[]
    NOT?: PickerTeamsWhereInput | PickerTeamsWhereInput[]
    team?: EnumTeamNameNullableFilter<"PickerTeams"> | $Enums.TeamName | null
  }, "playerId">

  export type PickerTeamsOrderByWithAggregationInput = {
    playerId?: SortOrder
    team?: SortOrderInput | SortOrder
    _count?: PickerTeamsCountOrderByAggregateInput
    _avg?: PickerTeamsAvgOrderByAggregateInput
    _max?: PickerTeamsMaxOrderByAggregateInput
    _min?: PickerTeamsMinOrderByAggregateInput
    _sum?: PickerTeamsSumOrderByAggregateInput
  }

  export type PickerTeamsScalarWhereWithAggregatesInput = {
    AND?: PickerTeamsScalarWhereWithAggregatesInput | PickerTeamsScalarWhereWithAggregatesInput[]
    OR?: PickerTeamsScalarWhereWithAggregatesInput[]
    NOT?: PickerTeamsScalarWhereWithAggregatesInput | PickerTeamsScalarWhereWithAggregatesInput[]
    playerId?: IntWithAggregatesFilter<"PickerTeams"> | number
    team?: EnumTeamNameNullableWithAggregatesFilter<"PickerTeams"> | $Enums.TeamName | null
  }

  export type PlayerWhereInput = {
    AND?: PlayerWhereInput | PlayerWhereInput[]
    OR?: PlayerWhereInput[]
    NOT?: PlayerWhereInput | PlayerWhereInput[]
    id?: IntFilter<"Player"> | number
    login?: StringFilter<"Player"> | string
    isAdmin?: BoolNullableFilter<"Player"> | boolean | null
    name?: StringNullableFilter<"Player"> | string | null
    anonymous?: BoolNullableFilter<"Player"> | boolean | null
    email?: StringNullableFilter<"Player"> | string | null
    joined?: DateTimeNullableFilter<"Player"> | Date | string | null
    finished?: DateTimeNullableFilter<"Player"> | Date | string | null
    born?: DateTimeNullableFilter<"Player"> | Date | string | null
    comment?: StringNullableFilter<"Player"> | string | null
    introducedBy?: IntNullableFilter<"Player"> | number | null
    arsesOfPlayer?: ArseListRelationFilter
    arsesByPlayer?: ArseListRelationFilter
    clubs?: ClubSupporterListRelationFilter
    countries?: CountrySupporterListRelationFilter
    outcomes?: OutcomeListRelationFilter
    playerRecords?: PlayerRecordListRelationFilter
  }

  export type PlayerOrderByWithRelationInput = {
    id?: SortOrder
    login?: SortOrder
    isAdmin?: SortOrderInput | SortOrder
    name?: SortOrderInput | SortOrder
    anonymous?: SortOrderInput | SortOrder
    email?: SortOrderInput | SortOrder
    joined?: SortOrderInput | SortOrder
    finished?: SortOrderInput | SortOrder
    born?: SortOrderInput | SortOrder
    comment?: SortOrderInput | SortOrder
    introducedBy?: SortOrderInput | SortOrder
    arsesOfPlayer?: ArseOrderByRelationAggregateInput
    arsesByPlayer?: ArseOrderByRelationAggregateInput
    clubs?: ClubSupporterOrderByRelationAggregateInput
    countries?: CountrySupporterOrderByRelationAggregateInput
    outcomes?: OutcomeOrderByRelationAggregateInput
    playerRecords?: PlayerRecordOrderByRelationAggregateInput
    _relevance?: PlayerOrderByRelevanceInput
  }

  export type PlayerWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    login?: string
    AND?: PlayerWhereInput | PlayerWhereInput[]
    OR?: PlayerWhereInput[]
    NOT?: PlayerWhereInput | PlayerWhereInput[]
    isAdmin?: BoolNullableFilter<"Player"> | boolean | null
    name?: StringNullableFilter<"Player"> | string | null
    anonymous?: BoolNullableFilter<"Player"> | boolean | null
    email?: StringNullableFilter<"Player"> | string | null
    joined?: DateTimeNullableFilter<"Player"> | Date | string | null
    finished?: DateTimeNullableFilter<"Player"> | Date | string | null
    born?: DateTimeNullableFilter<"Player"> | Date | string | null
    comment?: StringNullableFilter<"Player"> | string | null
    introducedBy?: IntNullableFilter<"Player"> | number | null
    arsesOfPlayer?: ArseListRelationFilter
    arsesByPlayer?: ArseListRelationFilter
    clubs?: ClubSupporterListRelationFilter
    countries?: CountrySupporterListRelationFilter
    outcomes?: OutcomeListRelationFilter
    playerRecords?: PlayerRecordListRelationFilter
  }, "id" | "login">

  export type PlayerOrderByWithAggregationInput = {
    id?: SortOrder
    login?: SortOrder
    isAdmin?: SortOrderInput | SortOrder
    name?: SortOrderInput | SortOrder
    anonymous?: SortOrderInput | SortOrder
    email?: SortOrderInput | SortOrder
    joined?: SortOrderInput | SortOrder
    finished?: SortOrderInput | SortOrder
    born?: SortOrderInput | SortOrder
    comment?: SortOrderInput | SortOrder
    introducedBy?: SortOrderInput | SortOrder
    _count?: PlayerCountOrderByAggregateInput
    _avg?: PlayerAvgOrderByAggregateInput
    _max?: PlayerMaxOrderByAggregateInput
    _min?: PlayerMinOrderByAggregateInput
    _sum?: PlayerSumOrderByAggregateInput
  }

  export type PlayerScalarWhereWithAggregatesInput = {
    AND?: PlayerScalarWhereWithAggregatesInput | PlayerScalarWhereWithAggregatesInput[]
    OR?: PlayerScalarWhereWithAggregatesInput[]
    NOT?: PlayerScalarWhereWithAggregatesInput | PlayerScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Player"> | number
    login?: StringWithAggregatesFilter<"Player"> | string
    isAdmin?: BoolNullableWithAggregatesFilter<"Player"> | boolean | null
    name?: StringNullableWithAggregatesFilter<"Player"> | string | null
    anonymous?: BoolNullableWithAggregatesFilter<"Player"> | boolean | null
    email?: StringNullableWithAggregatesFilter<"Player"> | string | null
    joined?: DateTimeNullableWithAggregatesFilter<"Player"> | Date | string | null
    finished?: DateTimeNullableWithAggregatesFilter<"Player"> | Date | string | null
    born?: DateTimeNullableWithAggregatesFilter<"Player"> | Date | string | null
    comment?: StringNullableWithAggregatesFilter<"Player"> | string | null
    introducedBy?: IntNullableWithAggregatesFilter<"Player"> | number | null
  }

  export type PlayerRecordWhereInput = {
    AND?: PlayerRecordWhereInput | PlayerRecordWhereInput[]
    OR?: PlayerRecordWhereInput[]
    NOT?: PlayerRecordWhereInput | PlayerRecordWhereInput[]
    id?: IntFilter<"PlayerRecord"> | number
    year?: IntFilter<"PlayerRecord"> | number
    responses?: IntNullableFilter<"PlayerRecord"> | number | null
    played?: IntNullableFilter<"PlayerRecord"> | number | null
    won?: IntNullableFilter<"PlayerRecord"> | number | null
    drawn?: IntNullableFilter<"PlayerRecord"> | number | null
    lost?: IntNullableFilter<"PlayerRecord"> | number | null
    points?: IntNullableFilter<"PlayerRecord"> | number | null
    averages?: FloatNullableFilter<"PlayerRecord"> | number | null
    stalwart?: IntNullableFilter<"PlayerRecord"> | number | null
    pub?: IntNullableFilter<"PlayerRecord"> | number | null
    rankPoints?: IntNullableFilter<"PlayerRecord"> | number | null
    rankAverages?: IntNullableFilter<"PlayerRecord"> | number | null
    rankAveragesUnqualified?: IntNullableFilter<"PlayerRecord"> | number | null
    rankStalwart?: IntNullableFilter<"PlayerRecord"> | number | null
    rankSpeedy?: IntNullableFilter<"PlayerRecord"> | number | null
    rankSpeedyUnqualified?: IntNullableFilter<"PlayerRecord"> | number | null
    rankPub?: IntNullableFilter<"PlayerRecord"> | number | null
    speedy?: IntNullableFilter<"PlayerRecord"> | number | null
    playerId?: IntFilter<"PlayerRecord"> | number
    gameDayId?: IntFilter<"PlayerRecord"> | number
    player?: XOR<PlayerScalarRelationFilter, PlayerWhereInput>
    gameDay?: XOR<GameDayScalarRelationFilter, GameDayWhereInput>
  }

  export type PlayerRecordOrderByWithRelationInput = {
    id?: SortOrder
    year?: SortOrder
    responses?: SortOrderInput | SortOrder
    played?: SortOrderInput | SortOrder
    won?: SortOrderInput | SortOrder
    drawn?: SortOrderInput | SortOrder
    lost?: SortOrderInput | SortOrder
    points?: SortOrderInput | SortOrder
    averages?: SortOrderInput | SortOrder
    stalwart?: SortOrderInput | SortOrder
    pub?: SortOrderInput | SortOrder
    rankPoints?: SortOrderInput | SortOrder
    rankAverages?: SortOrderInput | SortOrder
    rankAveragesUnqualified?: SortOrderInput | SortOrder
    rankStalwart?: SortOrderInput | SortOrder
    rankSpeedy?: SortOrderInput | SortOrder
    rankSpeedyUnqualified?: SortOrderInput | SortOrder
    rankPub?: SortOrderInput | SortOrder
    speedy?: SortOrderInput | SortOrder
    playerId?: SortOrder
    gameDayId?: SortOrder
    player?: PlayerOrderByWithRelationInput
    gameDay?: GameDayOrderByWithRelationInput
  }

  export type PlayerRecordWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    playerId_year_gameDayId?: PlayerRecordPlayerIdYearGameDayIdCompoundUniqueInput
    AND?: PlayerRecordWhereInput | PlayerRecordWhereInput[]
    OR?: PlayerRecordWhereInput[]
    NOT?: PlayerRecordWhereInput | PlayerRecordWhereInput[]
    year?: IntFilter<"PlayerRecord"> | number
    responses?: IntNullableFilter<"PlayerRecord"> | number | null
    played?: IntNullableFilter<"PlayerRecord"> | number | null
    won?: IntNullableFilter<"PlayerRecord"> | number | null
    drawn?: IntNullableFilter<"PlayerRecord"> | number | null
    lost?: IntNullableFilter<"PlayerRecord"> | number | null
    points?: IntNullableFilter<"PlayerRecord"> | number | null
    averages?: FloatNullableFilter<"PlayerRecord"> | number | null
    stalwart?: IntNullableFilter<"PlayerRecord"> | number | null
    pub?: IntNullableFilter<"PlayerRecord"> | number | null
    rankPoints?: IntNullableFilter<"PlayerRecord"> | number | null
    rankAverages?: IntNullableFilter<"PlayerRecord"> | number | null
    rankAveragesUnqualified?: IntNullableFilter<"PlayerRecord"> | number | null
    rankStalwart?: IntNullableFilter<"PlayerRecord"> | number | null
    rankSpeedy?: IntNullableFilter<"PlayerRecord"> | number | null
    rankSpeedyUnqualified?: IntNullableFilter<"PlayerRecord"> | number | null
    rankPub?: IntNullableFilter<"PlayerRecord"> | number | null
    speedy?: IntNullableFilter<"PlayerRecord"> | number | null
    playerId?: IntFilter<"PlayerRecord"> | number
    gameDayId?: IntFilter<"PlayerRecord"> | number
    player?: XOR<PlayerScalarRelationFilter, PlayerWhereInput>
    gameDay?: XOR<GameDayScalarRelationFilter, GameDayWhereInput>
  }, "id" | "playerId_year_gameDayId">

  export type PlayerRecordOrderByWithAggregationInput = {
    id?: SortOrder
    year?: SortOrder
    responses?: SortOrderInput | SortOrder
    played?: SortOrderInput | SortOrder
    won?: SortOrderInput | SortOrder
    drawn?: SortOrderInput | SortOrder
    lost?: SortOrderInput | SortOrder
    points?: SortOrderInput | SortOrder
    averages?: SortOrderInput | SortOrder
    stalwart?: SortOrderInput | SortOrder
    pub?: SortOrderInput | SortOrder
    rankPoints?: SortOrderInput | SortOrder
    rankAverages?: SortOrderInput | SortOrder
    rankAveragesUnqualified?: SortOrderInput | SortOrder
    rankStalwart?: SortOrderInput | SortOrder
    rankSpeedy?: SortOrderInput | SortOrder
    rankSpeedyUnqualified?: SortOrderInput | SortOrder
    rankPub?: SortOrderInput | SortOrder
    speedy?: SortOrderInput | SortOrder
    playerId?: SortOrder
    gameDayId?: SortOrder
    _count?: PlayerRecordCountOrderByAggregateInput
    _avg?: PlayerRecordAvgOrderByAggregateInput
    _max?: PlayerRecordMaxOrderByAggregateInput
    _min?: PlayerRecordMinOrderByAggregateInput
    _sum?: PlayerRecordSumOrderByAggregateInput
  }

  export type PlayerRecordScalarWhereWithAggregatesInput = {
    AND?: PlayerRecordScalarWhereWithAggregatesInput | PlayerRecordScalarWhereWithAggregatesInput[]
    OR?: PlayerRecordScalarWhereWithAggregatesInput[]
    NOT?: PlayerRecordScalarWhereWithAggregatesInput | PlayerRecordScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"PlayerRecord"> | number
    year?: IntWithAggregatesFilter<"PlayerRecord"> | number
    responses?: IntNullableWithAggregatesFilter<"PlayerRecord"> | number | null
    played?: IntNullableWithAggregatesFilter<"PlayerRecord"> | number | null
    won?: IntNullableWithAggregatesFilter<"PlayerRecord"> | number | null
    drawn?: IntNullableWithAggregatesFilter<"PlayerRecord"> | number | null
    lost?: IntNullableWithAggregatesFilter<"PlayerRecord"> | number | null
    points?: IntNullableWithAggregatesFilter<"PlayerRecord"> | number | null
    averages?: FloatNullableWithAggregatesFilter<"PlayerRecord"> | number | null
    stalwart?: IntNullableWithAggregatesFilter<"PlayerRecord"> | number | null
    pub?: IntNullableWithAggregatesFilter<"PlayerRecord"> | number | null
    rankPoints?: IntNullableWithAggregatesFilter<"PlayerRecord"> | number | null
    rankAverages?: IntNullableWithAggregatesFilter<"PlayerRecord"> | number | null
    rankAveragesUnqualified?: IntNullableWithAggregatesFilter<"PlayerRecord"> | number | null
    rankStalwart?: IntNullableWithAggregatesFilter<"PlayerRecord"> | number | null
    rankSpeedy?: IntNullableWithAggregatesFilter<"PlayerRecord"> | number | null
    rankSpeedyUnqualified?: IntNullableWithAggregatesFilter<"PlayerRecord"> | number | null
    rankPub?: IntNullableWithAggregatesFilter<"PlayerRecord"> | number | null
    speedy?: IntNullableWithAggregatesFilter<"PlayerRecord"> | number | null
    playerId?: IntWithAggregatesFilter<"PlayerRecord"> | number
    gameDayId?: IntWithAggregatesFilter<"PlayerRecord"> | number
  }

  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: StringFilter<"User"> | string
    name?: StringFilter<"User"> | string
    email?: StringFilter<"User"> | string
    emailVerified?: BoolFilter<"User"> | boolean
    image?: StringNullableFilter<"User"> | string | null
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    role?: StringNullableFilter<"User"> | string | null
    banned?: BoolNullableFilter<"User"> | boolean | null
    banReason?: StringNullableFilter<"User"> | string | null
    banExpires?: DateTimeNullableFilter<"User"> | Date | string | null
    sessions?: SessionListRelationFilter
    accounts?: AccountListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    emailVerified?: SortOrder
    image?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    role?: SortOrderInput | SortOrder
    banned?: SortOrderInput | SortOrder
    banReason?: SortOrderInput | SortOrder
    banExpires?: SortOrderInput | SortOrder
    sessions?: SessionOrderByRelationAggregateInput
    accounts?: AccountOrderByRelationAggregateInput
    _relevance?: UserOrderByRelevanceInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    email?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    name?: StringFilter<"User"> | string
    emailVerified?: BoolFilter<"User"> | boolean
    image?: StringNullableFilter<"User"> | string | null
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    role?: StringNullableFilter<"User"> | string | null
    banned?: BoolNullableFilter<"User"> | boolean | null
    banReason?: StringNullableFilter<"User"> | string | null
    banExpires?: DateTimeNullableFilter<"User"> | Date | string | null
    sessions?: SessionListRelationFilter
    accounts?: AccountListRelationFilter
  }, "id" | "email">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    emailVerified?: SortOrder
    image?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    role?: SortOrderInput | SortOrder
    banned?: SortOrderInput | SortOrder
    banReason?: SortOrderInput | SortOrder
    banExpires?: SortOrderInput | SortOrder
    _count?: UserCountOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"User"> | string
    name?: StringWithAggregatesFilter<"User"> | string
    email?: StringWithAggregatesFilter<"User"> | string
    emailVerified?: BoolWithAggregatesFilter<"User"> | boolean
    image?: StringNullableWithAggregatesFilter<"User"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    role?: StringNullableWithAggregatesFilter<"User"> | string | null
    banned?: BoolNullableWithAggregatesFilter<"User"> | boolean | null
    banReason?: StringNullableWithAggregatesFilter<"User"> | string | null
    banExpires?: DateTimeNullableWithAggregatesFilter<"User"> | Date | string | null
  }

  export type SessionWhereInput = {
    AND?: SessionWhereInput | SessionWhereInput[]
    OR?: SessionWhereInput[]
    NOT?: SessionWhereInput | SessionWhereInput[]
    id?: StringFilter<"Session"> | string
    expiresAt?: DateTimeFilter<"Session"> | Date | string
    token?: StringFilter<"Session"> | string
    createdAt?: DateTimeFilter<"Session"> | Date | string
    updatedAt?: DateTimeFilter<"Session"> | Date | string
    ipAddress?: StringNullableFilter<"Session"> | string | null
    userAgent?: StringNullableFilter<"Session"> | string | null
    userId?: StringFilter<"Session"> | string
    impersonatedBy?: StringNullableFilter<"Session"> | string | null
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type SessionOrderByWithRelationInput = {
    id?: SortOrder
    expiresAt?: SortOrder
    token?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    ipAddress?: SortOrderInput | SortOrder
    userAgent?: SortOrderInput | SortOrder
    userId?: SortOrder
    impersonatedBy?: SortOrderInput | SortOrder
    user?: UserOrderByWithRelationInput
    _relevance?: SessionOrderByRelevanceInput
  }

  export type SessionWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    token?: string
    AND?: SessionWhereInput | SessionWhereInput[]
    OR?: SessionWhereInput[]
    NOT?: SessionWhereInput | SessionWhereInput[]
    expiresAt?: DateTimeFilter<"Session"> | Date | string
    createdAt?: DateTimeFilter<"Session"> | Date | string
    updatedAt?: DateTimeFilter<"Session"> | Date | string
    ipAddress?: StringNullableFilter<"Session"> | string | null
    userAgent?: StringNullableFilter<"Session"> | string | null
    userId?: StringFilter<"Session"> | string
    impersonatedBy?: StringNullableFilter<"Session"> | string | null
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id" | "token">

  export type SessionOrderByWithAggregationInput = {
    id?: SortOrder
    expiresAt?: SortOrder
    token?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    ipAddress?: SortOrderInput | SortOrder
    userAgent?: SortOrderInput | SortOrder
    userId?: SortOrder
    impersonatedBy?: SortOrderInput | SortOrder
    _count?: SessionCountOrderByAggregateInput
    _max?: SessionMaxOrderByAggregateInput
    _min?: SessionMinOrderByAggregateInput
  }

  export type SessionScalarWhereWithAggregatesInput = {
    AND?: SessionScalarWhereWithAggregatesInput | SessionScalarWhereWithAggregatesInput[]
    OR?: SessionScalarWhereWithAggregatesInput[]
    NOT?: SessionScalarWhereWithAggregatesInput | SessionScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Session"> | string
    expiresAt?: DateTimeWithAggregatesFilter<"Session"> | Date | string
    token?: StringWithAggregatesFilter<"Session"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Session"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Session"> | Date | string
    ipAddress?: StringNullableWithAggregatesFilter<"Session"> | string | null
    userAgent?: StringNullableWithAggregatesFilter<"Session"> | string | null
    userId?: StringWithAggregatesFilter<"Session"> | string
    impersonatedBy?: StringNullableWithAggregatesFilter<"Session"> | string | null
  }

  export type AccountWhereInput = {
    AND?: AccountWhereInput | AccountWhereInput[]
    OR?: AccountWhereInput[]
    NOT?: AccountWhereInput | AccountWhereInput[]
    id?: StringFilter<"Account"> | string
    accountId?: StringFilter<"Account"> | string
    providerId?: StringFilter<"Account"> | string
    userId?: StringFilter<"Account"> | string
    accessToken?: StringNullableFilter<"Account"> | string | null
    refreshToken?: StringNullableFilter<"Account"> | string | null
    idToken?: StringNullableFilter<"Account"> | string | null
    accessTokenExpiresAt?: DateTimeNullableFilter<"Account"> | Date | string | null
    refreshTokenExpiresAt?: DateTimeNullableFilter<"Account"> | Date | string | null
    scope?: StringNullableFilter<"Account"> | string | null
    password?: StringNullableFilter<"Account"> | string | null
    createdAt?: DateTimeFilter<"Account"> | Date | string
    updatedAt?: DateTimeFilter<"Account"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type AccountOrderByWithRelationInput = {
    id?: SortOrder
    accountId?: SortOrder
    providerId?: SortOrder
    userId?: SortOrder
    accessToken?: SortOrderInput | SortOrder
    refreshToken?: SortOrderInput | SortOrder
    idToken?: SortOrderInput | SortOrder
    accessTokenExpiresAt?: SortOrderInput | SortOrder
    refreshTokenExpiresAt?: SortOrderInput | SortOrder
    scope?: SortOrderInput | SortOrder
    password?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    user?: UserOrderByWithRelationInput
    _relevance?: AccountOrderByRelevanceInput
  }

  export type AccountWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: AccountWhereInput | AccountWhereInput[]
    OR?: AccountWhereInput[]
    NOT?: AccountWhereInput | AccountWhereInput[]
    accountId?: StringFilter<"Account"> | string
    providerId?: StringFilter<"Account"> | string
    userId?: StringFilter<"Account"> | string
    accessToken?: StringNullableFilter<"Account"> | string | null
    refreshToken?: StringNullableFilter<"Account"> | string | null
    idToken?: StringNullableFilter<"Account"> | string | null
    accessTokenExpiresAt?: DateTimeNullableFilter<"Account"> | Date | string | null
    refreshTokenExpiresAt?: DateTimeNullableFilter<"Account"> | Date | string | null
    scope?: StringNullableFilter<"Account"> | string | null
    password?: StringNullableFilter<"Account"> | string | null
    createdAt?: DateTimeFilter<"Account"> | Date | string
    updatedAt?: DateTimeFilter<"Account"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id">

  export type AccountOrderByWithAggregationInput = {
    id?: SortOrder
    accountId?: SortOrder
    providerId?: SortOrder
    userId?: SortOrder
    accessToken?: SortOrderInput | SortOrder
    refreshToken?: SortOrderInput | SortOrder
    idToken?: SortOrderInput | SortOrder
    accessTokenExpiresAt?: SortOrderInput | SortOrder
    refreshTokenExpiresAt?: SortOrderInput | SortOrder
    scope?: SortOrderInput | SortOrder
    password?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: AccountCountOrderByAggregateInput
    _max?: AccountMaxOrderByAggregateInput
    _min?: AccountMinOrderByAggregateInput
  }

  export type AccountScalarWhereWithAggregatesInput = {
    AND?: AccountScalarWhereWithAggregatesInput | AccountScalarWhereWithAggregatesInput[]
    OR?: AccountScalarWhereWithAggregatesInput[]
    NOT?: AccountScalarWhereWithAggregatesInput | AccountScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Account"> | string
    accountId?: StringWithAggregatesFilter<"Account"> | string
    providerId?: StringWithAggregatesFilter<"Account"> | string
    userId?: StringWithAggregatesFilter<"Account"> | string
    accessToken?: StringNullableWithAggregatesFilter<"Account"> | string | null
    refreshToken?: StringNullableWithAggregatesFilter<"Account"> | string | null
    idToken?: StringNullableWithAggregatesFilter<"Account"> | string | null
    accessTokenExpiresAt?: DateTimeNullableWithAggregatesFilter<"Account"> | Date | string | null
    refreshTokenExpiresAt?: DateTimeNullableWithAggregatesFilter<"Account"> | Date | string | null
    scope?: StringNullableWithAggregatesFilter<"Account"> | string | null
    password?: StringNullableWithAggregatesFilter<"Account"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Account"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Account"> | Date | string
  }

  export type VerificationWhereInput = {
    AND?: VerificationWhereInput | VerificationWhereInput[]
    OR?: VerificationWhereInput[]
    NOT?: VerificationWhereInput | VerificationWhereInput[]
    id?: StringFilter<"Verification"> | string
    identifier?: StringFilter<"Verification"> | string
    value?: StringFilter<"Verification"> | string
    expiresAt?: DateTimeFilter<"Verification"> | Date | string
    createdAt?: DateTimeNullableFilter<"Verification"> | Date | string | null
    updatedAt?: DateTimeNullableFilter<"Verification"> | Date | string | null
  }

  export type VerificationOrderByWithRelationInput = {
    id?: SortOrder
    identifier?: SortOrder
    value?: SortOrder
    expiresAt?: SortOrder
    createdAt?: SortOrderInput | SortOrder
    updatedAt?: SortOrderInput | SortOrder
    _relevance?: VerificationOrderByRelevanceInput
  }

  export type VerificationWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: VerificationWhereInput | VerificationWhereInput[]
    OR?: VerificationWhereInput[]
    NOT?: VerificationWhereInput | VerificationWhereInput[]
    identifier?: StringFilter<"Verification"> | string
    value?: StringFilter<"Verification"> | string
    expiresAt?: DateTimeFilter<"Verification"> | Date | string
    createdAt?: DateTimeNullableFilter<"Verification"> | Date | string | null
    updatedAt?: DateTimeNullableFilter<"Verification"> | Date | string | null
  }, "id">

  export type VerificationOrderByWithAggregationInput = {
    id?: SortOrder
    identifier?: SortOrder
    value?: SortOrder
    expiresAt?: SortOrder
    createdAt?: SortOrderInput | SortOrder
    updatedAt?: SortOrderInput | SortOrder
    _count?: VerificationCountOrderByAggregateInput
    _max?: VerificationMaxOrderByAggregateInput
    _min?: VerificationMinOrderByAggregateInput
  }

  export type VerificationScalarWhereWithAggregatesInput = {
    AND?: VerificationScalarWhereWithAggregatesInput | VerificationScalarWhereWithAggregatesInput[]
    OR?: VerificationScalarWhereWithAggregatesInput[]
    NOT?: VerificationScalarWhereWithAggregatesInput | VerificationScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Verification"> | string
    identifier?: StringWithAggregatesFilter<"Verification"> | string
    value?: StringWithAggregatesFilter<"Verification"> | string
    expiresAt?: DateTimeWithAggregatesFilter<"Verification"> | Date | string
    createdAt?: DateTimeNullableWithAggregatesFilter<"Verification"> | Date | string | null
    updatedAt?: DateTimeNullableWithAggregatesFilter<"Verification"> | Date | string | null
  }

  export type ArseCreateInput = {
    stamp?: Date | string
    inGoal?: number | null
    running?: number | null
    shooting?: number | null
    passing?: number | null
    ballSkill?: number | null
    attacking?: number | null
    defending?: number | null
    player: PlayerCreateNestedOneWithoutArsesOfPlayerInput
    rater: PlayerCreateNestedOneWithoutArsesByPlayerInput
  }

  export type ArseUncheckedCreateInput = {
    id?: number
    stamp?: Date | string
    inGoal?: number | null
    running?: number | null
    shooting?: number | null
    passing?: number | null
    ballSkill?: number | null
    attacking?: number | null
    defending?: number | null
    playerId: number
    raterId: number
  }

  export type ArseUpdateInput = {
    stamp?: DateTimeFieldUpdateOperationsInput | Date | string
    inGoal?: NullableIntFieldUpdateOperationsInput | number | null
    running?: NullableIntFieldUpdateOperationsInput | number | null
    shooting?: NullableIntFieldUpdateOperationsInput | number | null
    passing?: NullableIntFieldUpdateOperationsInput | number | null
    ballSkill?: NullableIntFieldUpdateOperationsInput | number | null
    attacking?: NullableIntFieldUpdateOperationsInput | number | null
    defending?: NullableIntFieldUpdateOperationsInput | number | null
    player?: PlayerUpdateOneRequiredWithoutArsesOfPlayerNestedInput
    rater?: PlayerUpdateOneRequiredWithoutArsesByPlayerNestedInput
  }

  export type ArseUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    stamp?: DateTimeFieldUpdateOperationsInput | Date | string
    inGoal?: NullableIntFieldUpdateOperationsInput | number | null
    running?: NullableIntFieldUpdateOperationsInput | number | null
    shooting?: NullableIntFieldUpdateOperationsInput | number | null
    passing?: NullableIntFieldUpdateOperationsInput | number | null
    ballSkill?: NullableIntFieldUpdateOperationsInput | number | null
    attacking?: NullableIntFieldUpdateOperationsInput | number | null
    defending?: NullableIntFieldUpdateOperationsInput | number | null
    playerId?: IntFieldUpdateOperationsInput | number
    raterId?: IntFieldUpdateOperationsInput | number
  }

  export type ArseCreateManyInput = {
    id?: number
    stamp?: Date | string
    inGoal?: number | null
    running?: number | null
    shooting?: number | null
    passing?: number | null
    ballSkill?: number | null
    attacking?: number | null
    defending?: number | null
    playerId: number
    raterId: number
  }

  export type ArseUpdateManyMutationInput = {
    stamp?: DateTimeFieldUpdateOperationsInput | Date | string
    inGoal?: NullableIntFieldUpdateOperationsInput | number | null
    running?: NullableIntFieldUpdateOperationsInput | number | null
    shooting?: NullableIntFieldUpdateOperationsInput | number | null
    passing?: NullableIntFieldUpdateOperationsInput | number | null
    ballSkill?: NullableIntFieldUpdateOperationsInput | number | null
    attacking?: NullableIntFieldUpdateOperationsInput | number | null
    defending?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type ArseUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    stamp?: DateTimeFieldUpdateOperationsInput | Date | string
    inGoal?: NullableIntFieldUpdateOperationsInput | number | null
    running?: NullableIntFieldUpdateOperationsInput | number | null
    shooting?: NullableIntFieldUpdateOperationsInput | number | null
    passing?: NullableIntFieldUpdateOperationsInput | number | null
    ballSkill?: NullableIntFieldUpdateOperationsInput | number | null
    attacking?: NullableIntFieldUpdateOperationsInput | number | null
    defending?: NullableIntFieldUpdateOperationsInput | number | null
    playerId?: IntFieldUpdateOperationsInput | number
    raterId?: IntFieldUpdateOperationsInput | number
  }

  export type ClubCreateInput = {
    soccerwayId?: number | null
    clubName: string
    uri?: string | null
    country?: string | null
    supporters?: ClubSupporterCreateNestedManyWithoutClubInput
  }

  export type ClubUncheckedCreateInput = {
    id?: number
    soccerwayId?: number | null
    clubName: string
    uri?: string | null
    country?: string | null
    supporters?: ClubSupporterUncheckedCreateNestedManyWithoutClubInput
  }

  export type ClubUpdateInput = {
    soccerwayId?: NullableIntFieldUpdateOperationsInput | number | null
    clubName?: StringFieldUpdateOperationsInput | string
    uri?: NullableStringFieldUpdateOperationsInput | string | null
    country?: NullableStringFieldUpdateOperationsInput | string | null
    supporters?: ClubSupporterUpdateManyWithoutClubNestedInput
  }

  export type ClubUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    soccerwayId?: NullableIntFieldUpdateOperationsInput | number | null
    clubName?: StringFieldUpdateOperationsInput | string
    uri?: NullableStringFieldUpdateOperationsInput | string | null
    country?: NullableStringFieldUpdateOperationsInput | string | null
    supporters?: ClubSupporterUncheckedUpdateManyWithoutClubNestedInput
  }

  export type ClubCreateManyInput = {
    id?: number
    soccerwayId?: number | null
    clubName: string
    uri?: string | null
    country?: string | null
  }

  export type ClubUpdateManyMutationInput = {
    soccerwayId?: NullableIntFieldUpdateOperationsInput | number | null
    clubName?: StringFieldUpdateOperationsInput | string
    uri?: NullableStringFieldUpdateOperationsInput | string | null
    country?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ClubUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    soccerwayId?: NullableIntFieldUpdateOperationsInput | number | null
    clubName?: StringFieldUpdateOperationsInput | string
    uri?: NullableStringFieldUpdateOperationsInput | string | null
    country?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ClubSupporterCreateInput = {
    player: PlayerCreateNestedOneWithoutClubsInput
    club: ClubCreateNestedOneWithoutSupportersInput
  }

  export type ClubSupporterUncheckedCreateInput = {
    playerId: number
    clubId: number
  }

  export type ClubSupporterUpdateInput = {
    player?: PlayerUpdateOneRequiredWithoutClubsNestedInput
    club?: ClubUpdateOneRequiredWithoutSupportersNestedInput
  }

  export type ClubSupporterUncheckedUpdateInput = {
    playerId?: IntFieldUpdateOperationsInput | number
    clubId?: IntFieldUpdateOperationsInput | number
  }

  export type ClubSupporterCreateManyInput = {
    playerId: number
    clubId: number
  }

  export type ClubSupporterUpdateManyMutationInput = {

  }

  export type ClubSupporterUncheckedUpdateManyInput = {
    playerId?: IntFieldUpdateOperationsInput | number
    clubId?: IntFieldUpdateOperationsInput | number
  }

  export type CountryCreateInput = {
    isoCode: string
    name: string
    supporters?: CountrySupporterCreateNestedManyWithoutCountryInput
  }

  export type CountryUncheckedCreateInput = {
    isoCode: string
    name: string
    supporters?: CountrySupporterUncheckedCreateNestedManyWithoutCountryInput
  }

  export type CountryUpdateInput = {
    isoCode?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    supporters?: CountrySupporterUpdateManyWithoutCountryNestedInput
  }

  export type CountryUncheckedUpdateInput = {
    isoCode?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    supporters?: CountrySupporterUncheckedUpdateManyWithoutCountryNestedInput
  }

  export type CountryCreateManyInput = {
    isoCode: string
    name: string
  }

  export type CountryUpdateManyMutationInput = {
    isoCode?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
  }

  export type CountryUncheckedUpdateManyInput = {
    isoCode?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
  }

  export type CountrySupporterCreateInput = {
    country: CountryCreateNestedOneWithoutSupportersInput
    player: PlayerCreateNestedOneWithoutCountriesInput
  }

  export type CountrySupporterUncheckedCreateInput = {
    playerId: number
    countryISOCode: string
  }

  export type CountrySupporterUpdateInput = {
    country?: CountryUpdateOneRequiredWithoutSupportersNestedInput
    player?: PlayerUpdateOneRequiredWithoutCountriesNestedInput
  }

  export type CountrySupporterUncheckedUpdateInput = {
    playerId?: IntFieldUpdateOperationsInput | number
    countryISOCode?: StringFieldUpdateOperationsInput | string
  }

  export type CountrySupporterCreateManyInput = {
    playerId: number
    countryISOCode: string
  }

  export type CountrySupporterUpdateManyMutationInput = {

  }

  export type CountrySupporterUncheckedUpdateManyInput = {
    playerId?: IntFieldUpdateOperationsInput | number
    countryISOCode?: StringFieldUpdateOperationsInput | string
  }

  export type DiffsCreateInput = {
    a?: string | null
    b?: string | null
    diffAge?: number | null
    diffUnknownAge?: number | null
    diffGoalies?: number | null
    diffAverage?: number | null
    diffPlayed?: number | null
  }

  export type DiffsUncheckedCreateInput = {
    id?: number
    a?: string | null
    b?: string | null
    diffAge?: number | null
    diffUnknownAge?: number | null
    diffGoalies?: number | null
    diffAverage?: number | null
    diffPlayed?: number | null
  }

  export type DiffsUpdateInput = {
    a?: NullableStringFieldUpdateOperationsInput | string | null
    b?: NullableStringFieldUpdateOperationsInput | string | null
    diffAge?: NullableFloatFieldUpdateOperationsInput | number | null
    diffUnknownAge?: NullableIntFieldUpdateOperationsInput | number | null
    diffGoalies?: NullableIntFieldUpdateOperationsInput | number | null
    diffAverage?: NullableFloatFieldUpdateOperationsInput | number | null
    diffPlayed?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type DiffsUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    a?: NullableStringFieldUpdateOperationsInput | string | null
    b?: NullableStringFieldUpdateOperationsInput | string | null
    diffAge?: NullableFloatFieldUpdateOperationsInput | number | null
    diffUnknownAge?: NullableIntFieldUpdateOperationsInput | number | null
    diffGoalies?: NullableIntFieldUpdateOperationsInput | number | null
    diffAverage?: NullableFloatFieldUpdateOperationsInput | number | null
    diffPlayed?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type DiffsCreateManyInput = {
    id?: number
    a?: string | null
    b?: string | null
    diffAge?: number | null
    diffUnknownAge?: number | null
    diffGoalies?: number | null
    diffAverage?: number | null
    diffPlayed?: number | null
  }

  export type DiffsUpdateManyMutationInput = {
    a?: NullableStringFieldUpdateOperationsInput | string | null
    b?: NullableStringFieldUpdateOperationsInput | string | null
    diffAge?: NullableFloatFieldUpdateOperationsInput | number | null
    diffUnknownAge?: NullableIntFieldUpdateOperationsInput | number | null
    diffGoalies?: NullableIntFieldUpdateOperationsInput | number | null
    diffAverage?: NullableFloatFieldUpdateOperationsInput | number | null
    diffPlayed?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type DiffsUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    a?: NullableStringFieldUpdateOperationsInput | string | null
    b?: NullableStringFieldUpdateOperationsInput | string | null
    diffAge?: NullableFloatFieldUpdateOperationsInput | number | null
    diffUnknownAge?: NullableIntFieldUpdateOperationsInput | number | null
    diffGoalies?: NullableIntFieldUpdateOperationsInput | number | null
    diffAverage?: NullableFloatFieldUpdateOperationsInput | number | null
    diffPlayed?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type GameChatCreateInput = {
    gameDay: number
    stamp?: Date | string
    player: number
    body?: string | null
  }

  export type GameChatUncheckedCreateInput = {
    id?: number
    gameDay: number
    stamp?: Date | string
    player: number
    body?: string | null
  }

  export type GameChatUpdateInput = {
    gameDay?: IntFieldUpdateOperationsInput | number
    stamp?: DateTimeFieldUpdateOperationsInput | Date | string
    player?: IntFieldUpdateOperationsInput | number
    body?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type GameChatUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    gameDay?: IntFieldUpdateOperationsInput | number
    stamp?: DateTimeFieldUpdateOperationsInput | Date | string
    player?: IntFieldUpdateOperationsInput | number
    body?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type GameChatCreateManyInput = {
    id?: number
    gameDay: number
    stamp?: Date | string
    player: number
    body?: string | null
  }

  export type GameChatUpdateManyMutationInput = {
    gameDay?: IntFieldUpdateOperationsInput | number
    stamp?: DateTimeFieldUpdateOperationsInput | Date | string
    player?: IntFieldUpdateOperationsInput | number
    body?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type GameChatUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    gameDay?: IntFieldUpdateOperationsInput | number
    stamp?: DateTimeFieldUpdateOperationsInput | Date | string
    player?: IntFieldUpdateOperationsInput | number
    body?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type GameDayCreateInput = {
    year: number
    date: Date | string
    game?: boolean
    mailSent?: Date | string | null
    comment?: string | null
    bibs?: $Enums.TeamName | null
    pickerGamesHistory?: number | null
    outcomes?: OutcomeCreateNestedManyWithoutGameDayInput
    playerRecords?: PlayerRecordCreateNestedManyWithoutGameDayInput
  }

  export type GameDayUncheckedCreateInput = {
    id?: number
    year: number
    date: Date | string
    game?: boolean
    mailSent?: Date | string | null
    comment?: string | null
    bibs?: $Enums.TeamName | null
    pickerGamesHistory?: number | null
    outcomes?: OutcomeUncheckedCreateNestedManyWithoutGameDayInput
    playerRecords?: PlayerRecordUncheckedCreateNestedManyWithoutGameDayInput
  }

  export type GameDayUpdateInput = {
    year?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    game?: BoolFieldUpdateOperationsInput | boolean
    mailSent?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    bibs?: NullableEnumTeamNameFieldUpdateOperationsInput | $Enums.TeamName | null
    pickerGamesHistory?: NullableIntFieldUpdateOperationsInput | number | null
    outcomes?: OutcomeUpdateManyWithoutGameDayNestedInput
    playerRecords?: PlayerRecordUpdateManyWithoutGameDayNestedInput
  }

  export type GameDayUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    year?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    game?: BoolFieldUpdateOperationsInput | boolean
    mailSent?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    bibs?: NullableEnumTeamNameFieldUpdateOperationsInput | $Enums.TeamName | null
    pickerGamesHistory?: NullableIntFieldUpdateOperationsInput | number | null
    outcomes?: OutcomeUncheckedUpdateManyWithoutGameDayNestedInput
    playerRecords?: PlayerRecordUncheckedUpdateManyWithoutGameDayNestedInput
  }

  export type GameDayCreateManyInput = {
    id?: number
    year: number
    date: Date | string
    game?: boolean
    mailSent?: Date | string | null
    comment?: string | null
    bibs?: $Enums.TeamName | null
    pickerGamesHistory?: number | null
  }

  export type GameDayUpdateManyMutationInput = {
    year?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    game?: BoolFieldUpdateOperationsInput | boolean
    mailSent?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    bibs?: NullableEnumTeamNameFieldUpdateOperationsInput | $Enums.TeamName | null
    pickerGamesHistory?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type GameDayUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    year?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    game?: BoolFieldUpdateOperationsInput | boolean
    mailSent?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    bibs?: NullableEnumTeamNameFieldUpdateOperationsInput | $Enums.TeamName | null
    pickerGamesHistory?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type InvitationCreateInput = {
    uuid: string
    playerId: number
    gameDayId: number
  }

  export type InvitationUncheckedCreateInput = {
    uuid: string
    playerId: number
    gameDayId: number
  }

  export type InvitationUpdateInput = {
    uuid?: StringFieldUpdateOperationsInput | string
    playerId?: IntFieldUpdateOperationsInput | number
    gameDayId?: IntFieldUpdateOperationsInput | number
  }

  export type InvitationUncheckedUpdateInput = {
    uuid?: StringFieldUpdateOperationsInput | string
    playerId?: IntFieldUpdateOperationsInput | number
    gameDayId?: IntFieldUpdateOperationsInput | number
  }

  export type InvitationCreateManyInput = {
    uuid: string
    playerId: number
    gameDayId: number
  }

  export type InvitationUpdateManyMutationInput = {
    uuid?: StringFieldUpdateOperationsInput | string
    playerId?: IntFieldUpdateOperationsInput | number
    gameDayId?: IntFieldUpdateOperationsInput | number
  }

  export type InvitationUncheckedUpdateManyInput = {
    uuid?: StringFieldUpdateOperationsInput | string
    playerId?: IntFieldUpdateOperationsInput | number
    gameDayId?: IntFieldUpdateOperationsInput | number
  }

  export type OutcomeCreateInput = {
    response?: $Enums.PlayerResponse | null
    responseInterval?: number | null
    points?: number | null
    team?: $Enums.TeamName | null
    comment?: string | null
    pub?: number | null
    paid?: boolean | null
    goalie?: boolean | null
    gameDay: GameDayCreateNestedOneWithoutOutcomesInput
    player: PlayerCreateNestedOneWithoutOutcomesInput
  }

  export type OutcomeUncheckedCreateInput = {
    id?: number
    response?: $Enums.PlayerResponse | null
    responseInterval?: number | null
    points?: number | null
    team?: $Enums.TeamName | null
    comment?: string | null
    pub?: number | null
    paid?: boolean | null
    goalie?: boolean | null
    gameDayId: number
    playerId: number
  }

  export type OutcomeUpdateInput = {
    response?: NullableEnumPlayerResponseFieldUpdateOperationsInput | $Enums.PlayerResponse | null
    responseInterval?: NullableIntFieldUpdateOperationsInput | number | null
    points?: NullableIntFieldUpdateOperationsInput | number | null
    team?: NullableEnumTeamNameFieldUpdateOperationsInput | $Enums.TeamName | null
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    pub?: NullableIntFieldUpdateOperationsInput | number | null
    paid?: NullableBoolFieldUpdateOperationsInput | boolean | null
    goalie?: NullableBoolFieldUpdateOperationsInput | boolean | null
    gameDay?: GameDayUpdateOneRequiredWithoutOutcomesNestedInput
    player?: PlayerUpdateOneRequiredWithoutOutcomesNestedInput
  }

  export type OutcomeUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    response?: NullableEnumPlayerResponseFieldUpdateOperationsInput | $Enums.PlayerResponse | null
    responseInterval?: NullableIntFieldUpdateOperationsInput | number | null
    points?: NullableIntFieldUpdateOperationsInput | number | null
    team?: NullableEnumTeamNameFieldUpdateOperationsInput | $Enums.TeamName | null
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    pub?: NullableIntFieldUpdateOperationsInput | number | null
    paid?: NullableBoolFieldUpdateOperationsInput | boolean | null
    goalie?: NullableBoolFieldUpdateOperationsInput | boolean | null
    gameDayId?: IntFieldUpdateOperationsInput | number
    playerId?: IntFieldUpdateOperationsInput | number
  }

  export type OutcomeCreateManyInput = {
    id?: number
    response?: $Enums.PlayerResponse | null
    responseInterval?: number | null
    points?: number | null
    team?: $Enums.TeamName | null
    comment?: string | null
    pub?: number | null
    paid?: boolean | null
    goalie?: boolean | null
    gameDayId: number
    playerId: number
  }

  export type OutcomeUpdateManyMutationInput = {
    response?: NullableEnumPlayerResponseFieldUpdateOperationsInput | $Enums.PlayerResponse | null
    responseInterval?: NullableIntFieldUpdateOperationsInput | number | null
    points?: NullableIntFieldUpdateOperationsInput | number | null
    team?: NullableEnumTeamNameFieldUpdateOperationsInput | $Enums.TeamName | null
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    pub?: NullableIntFieldUpdateOperationsInput | number | null
    paid?: NullableBoolFieldUpdateOperationsInput | boolean | null
    goalie?: NullableBoolFieldUpdateOperationsInput | boolean | null
  }

  export type OutcomeUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    response?: NullableEnumPlayerResponseFieldUpdateOperationsInput | $Enums.PlayerResponse | null
    responseInterval?: NullableIntFieldUpdateOperationsInput | number | null
    points?: NullableIntFieldUpdateOperationsInput | number | null
    team?: NullableEnumTeamNameFieldUpdateOperationsInput | $Enums.TeamName | null
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    pub?: NullableIntFieldUpdateOperationsInput | number | null
    paid?: NullableBoolFieldUpdateOperationsInput | boolean | null
    goalie?: NullableBoolFieldUpdateOperationsInput | boolean | null
    gameDayId?: IntFieldUpdateOperationsInput | number
    playerId?: IntFieldUpdateOperationsInput | number
  }

  export type PickerCreateInput = {
    playerId: number
    playerName?: string | null
    age?: number | null
    average?: number | null
    goalie?: number | null
    played?: number | null
  }

  export type PickerUncheckedCreateInput = {
    playerId: number
    playerName?: string | null
    age?: number | null
    average?: number | null
    goalie?: number | null
    played?: number | null
  }

  export type PickerUpdateInput = {
    playerId?: IntFieldUpdateOperationsInput | number
    playerName?: NullableStringFieldUpdateOperationsInput | string | null
    age?: NullableIntFieldUpdateOperationsInput | number | null
    average?: NullableFloatFieldUpdateOperationsInput | number | null
    goalie?: NullableIntFieldUpdateOperationsInput | number | null
    played?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type PickerUncheckedUpdateInput = {
    playerId?: IntFieldUpdateOperationsInput | number
    playerName?: NullableStringFieldUpdateOperationsInput | string | null
    age?: NullableIntFieldUpdateOperationsInput | number | null
    average?: NullableFloatFieldUpdateOperationsInput | number | null
    goalie?: NullableIntFieldUpdateOperationsInput | number | null
    played?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type PickerCreateManyInput = {
    playerId: number
    playerName?: string | null
    age?: number | null
    average?: number | null
    goalie?: number | null
    played?: number | null
  }

  export type PickerUpdateManyMutationInput = {
    playerId?: IntFieldUpdateOperationsInput | number
    playerName?: NullableStringFieldUpdateOperationsInput | string | null
    age?: NullableIntFieldUpdateOperationsInput | number | null
    average?: NullableFloatFieldUpdateOperationsInput | number | null
    goalie?: NullableIntFieldUpdateOperationsInput | number | null
    played?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type PickerUncheckedUpdateManyInput = {
    playerId?: IntFieldUpdateOperationsInput | number
    playerName?: NullableStringFieldUpdateOperationsInput | string | null
    age?: NullableIntFieldUpdateOperationsInput | number | null
    average?: NullableFloatFieldUpdateOperationsInput | number | null
    goalie?: NullableIntFieldUpdateOperationsInput | number | null
    played?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type PickerTeamsCreateInput = {
    playerId: number
    team?: $Enums.TeamName | null
  }

  export type PickerTeamsUncheckedCreateInput = {
    playerId: number
    team?: $Enums.TeamName | null
  }

  export type PickerTeamsUpdateInput = {
    playerId?: IntFieldUpdateOperationsInput | number
    team?: NullableEnumTeamNameFieldUpdateOperationsInput | $Enums.TeamName | null
  }

  export type PickerTeamsUncheckedUpdateInput = {
    playerId?: IntFieldUpdateOperationsInput | number
    team?: NullableEnumTeamNameFieldUpdateOperationsInput | $Enums.TeamName | null
  }

  export type PickerTeamsCreateManyInput = {
    playerId: number
    team?: $Enums.TeamName | null
  }

  export type PickerTeamsUpdateManyMutationInput = {
    playerId?: IntFieldUpdateOperationsInput | number
    team?: NullableEnumTeamNameFieldUpdateOperationsInput | $Enums.TeamName | null
  }

  export type PickerTeamsUncheckedUpdateManyInput = {
    playerId?: IntFieldUpdateOperationsInput | number
    team?: NullableEnumTeamNameFieldUpdateOperationsInput | $Enums.TeamName | null
  }

  export type PlayerCreateInput = {
    login: string
    isAdmin?: boolean | null
    name?: string | null
    anonymous?: boolean | null
    email?: string | null
    joined?: Date | string | null
    finished?: Date | string | null
    born?: Date | string | null
    comment?: string | null
    introducedBy?: number | null
    arsesOfPlayer?: ArseCreateNestedManyWithoutPlayerInput
    arsesByPlayer?: ArseCreateNestedManyWithoutRaterInput
    clubs?: ClubSupporterCreateNestedManyWithoutPlayerInput
    countries?: CountrySupporterCreateNestedManyWithoutPlayerInput
    outcomes?: OutcomeCreateNestedManyWithoutPlayerInput
    playerRecords?: PlayerRecordCreateNestedManyWithoutPlayerInput
  }

  export type PlayerUncheckedCreateInput = {
    id?: number
    login: string
    isAdmin?: boolean | null
    name?: string | null
    anonymous?: boolean | null
    email?: string | null
    joined?: Date | string | null
    finished?: Date | string | null
    born?: Date | string | null
    comment?: string | null
    introducedBy?: number | null
    arsesOfPlayer?: ArseUncheckedCreateNestedManyWithoutPlayerInput
    arsesByPlayer?: ArseUncheckedCreateNestedManyWithoutRaterInput
    clubs?: ClubSupporterUncheckedCreateNestedManyWithoutPlayerInput
    countries?: CountrySupporterUncheckedCreateNestedManyWithoutPlayerInput
    outcomes?: OutcomeUncheckedCreateNestedManyWithoutPlayerInput
    playerRecords?: PlayerRecordUncheckedCreateNestedManyWithoutPlayerInput
  }

  export type PlayerUpdateInput = {
    login?: StringFieldUpdateOperationsInput | string
    isAdmin?: NullableBoolFieldUpdateOperationsInput | boolean | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    anonymous?: NullableBoolFieldUpdateOperationsInput | boolean | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    joined?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    finished?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    born?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    introducedBy?: NullableIntFieldUpdateOperationsInput | number | null
    arsesOfPlayer?: ArseUpdateManyWithoutPlayerNestedInput
    arsesByPlayer?: ArseUpdateManyWithoutRaterNestedInput
    clubs?: ClubSupporterUpdateManyWithoutPlayerNestedInput
    countries?: CountrySupporterUpdateManyWithoutPlayerNestedInput
    outcomes?: OutcomeUpdateManyWithoutPlayerNestedInput
    playerRecords?: PlayerRecordUpdateManyWithoutPlayerNestedInput
  }

  export type PlayerUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    login?: StringFieldUpdateOperationsInput | string
    isAdmin?: NullableBoolFieldUpdateOperationsInput | boolean | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    anonymous?: NullableBoolFieldUpdateOperationsInput | boolean | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    joined?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    finished?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    born?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    introducedBy?: NullableIntFieldUpdateOperationsInput | number | null
    arsesOfPlayer?: ArseUncheckedUpdateManyWithoutPlayerNestedInput
    arsesByPlayer?: ArseUncheckedUpdateManyWithoutRaterNestedInput
    clubs?: ClubSupporterUncheckedUpdateManyWithoutPlayerNestedInput
    countries?: CountrySupporterUncheckedUpdateManyWithoutPlayerNestedInput
    outcomes?: OutcomeUncheckedUpdateManyWithoutPlayerNestedInput
    playerRecords?: PlayerRecordUncheckedUpdateManyWithoutPlayerNestedInput
  }

  export type PlayerCreateManyInput = {
    id?: number
    login: string
    isAdmin?: boolean | null
    name?: string | null
    anonymous?: boolean | null
    email?: string | null
    joined?: Date | string | null
    finished?: Date | string | null
    born?: Date | string | null
    comment?: string | null
    introducedBy?: number | null
  }

  export type PlayerUpdateManyMutationInput = {
    login?: StringFieldUpdateOperationsInput | string
    isAdmin?: NullableBoolFieldUpdateOperationsInput | boolean | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    anonymous?: NullableBoolFieldUpdateOperationsInput | boolean | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    joined?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    finished?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    born?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    introducedBy?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type PlayerUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    login?: StringFieldUpdateOperationsInput | string
    isAdmin?: NullableBoolFieldUpdateOperationsInput | boolean | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    anonymous?: NullableBoolFieldUpdateOperationsInput | boolean | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    joined?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    finished?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    born?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    introducedBy?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type PlayerRecordCreateInput = {
    year: number
    responses?: number | null
    played?: number | null
    won?: number | null
    drawn?: number | null
    lost?: number | null
    points?: number | null
    averages?: number | null
    stalwart?: number | null
    pub?: number | null
    rankPoints?: number | null
    rankAverages?: number | null
    rankAveragesUnqualified?: number | null
    rankStalwart?: number | null
    rankSpeedy?: number | null
    rankSpeedyUnqualified?: number | null
    rankPub?: number | null
    speedy?: number | null
    player: PlayerCreateNestedOneWithoutPlayerRecordsInput
    gameDay: GameDayCreateNestedOneWithoutPlayerRecordsInput
  }

  export type PlayerRecordUncheckedCreateInput = {
    id?: number
    year: number
    responses?: number | null
    played?: number | null
    won?: number | null
    drawn?: number | null
    lost?: number | null
    points?: number | null
    averages?: number | null
    stalwart?: number | null
    pub?: number | null
    rankPoints?: number | null
    rankAverages?: number | null
    rankAveragesUnqualified?: number | null
    rankStalwart?: number | null
    rankSpeedy?: number | null
    rankSpeedyUnqualified?: number | null
    rankPub?: number | null
    speedy?: number | null
    playerId: number
    gameDayId: number
  }

  export type PlayerRecordUpdateInput = {
    year?: IntFieldUpdateOperationsInput | number
    responses?: NullableIntFieldUpdateOperationsInput | number | null
    played?: NullableIntFieldUpdateOperationsInput | number | null
    won?: NullableIntFieldUpdateOperationsInput | number | null
    drawn?: NullableIntFieldUpdateOperationsInput | number | null
    lost?: NullableIntFieldUpdateOperationsInput | number | null
    points?: NullableIntFieldUpdateOperationsInput | number | null
    averages?: NullableFloatFieldUpdateOperationsInput | number | null
    stalwart?: NullableIntFieldUpdateOperationsInput | number | null
    pub?: NullableIntFieldUpdateOperationsInput | number | null
    rankPoints?: NullableIntFieldUpdateOperationsInput | number | null
    rankAverages?: NullableIntFieldUpdateOperationsInput | number | null
    rankAveragesUnqualified?: NullableIntFieldUpdateOperationsInput | number | null
    rankStalwart?: NullableIntFieldUpdateOperationsInput | number | null
    rankSpeedy?: NullableIntFieldUpdateOperationsInput | number | null
    rankSpeedyUnqualified?: NullableIntFieldUpdateOperationsInput | number | null
    rankPub?: NullableIntFieldUpdateOperationsInput | number | null
    speedy?: NullableIntFieldUpdateOperationsInput | number | null
    player?: PlayerUpdateOneRequiredWithoutPlayerRecordsNestedInput
    gameDay?: GameDayUpdateOneRequiredWithoutPlayerRecordsNestedInput
  }

  export type PlayerRecordUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    year?: IntFieldUpdateOperationsInput | number
    responses?: NullableIntFieldUpdateOperationsInput | number | null
    played?: NullableIntFieldUpdateOperationsInput | number | null
    won?: NullableIntFieldUpdateOperationsInput | number | null
    drawn?: NullableIntFieldUpdateOperationsInput | number | null
    lost?: NullableIntFieldUpdateOperationsInput | number | null
    points?: NullableIntFieldUpdateOperationsInput | number | null
    averages?: NullableFloatFieldUpdateOperationsInput | number | null
    stalwart?: NullableIntFieldUpdateOperationsInput | number | null
    pub?: NullableIntFieldUpdateOperationsInput | number | null
    rankPoints?: NullableIntFieldUpdateOperationsInput | number | null
    rankAverages?: NullableIntFieldUpdateOperationsInput | number | null
    rankAveragesUnqualified?: NullableIntFieldUpdateOperationsInput | number | null
    rankStalwart?: NullableIntFieldUpdateOperationsInput | number | null
    rankSpeedy?: NullableIntFieldUpdateOperationsInput | number | null
    rankSpeedyUnqualified?: NullableIntFieldUpdateOperationsInput | number | null
    rankPub?: NullableIntFieldUpdateOperationsInput | number | null
    speedy?: NullableIntFieldUpdateOperationsInput | number | null
    playerId?: IntFieldUpdateOperationsInput | number
    gameDayId?: IntFieldUpdateOperationsInput | number
  }

  export type PlayerRecordCreateManyInput = {
    id?: number
    year: number
    responses?: number | null
    played?: number | null
    won?: number | null
    drawn?: number | null
    lost?: number | null
    points?: number | null
    averages?: number | null
    stalwart?: number | null
    pub?: number | null
    rankPoints?: number | null
    rankAverages?: number | null
    rankAveragesUnqualified?: number | null
    rankStalwart?: number | null
    rankSpeedy?: number | null
    rankSpeedyUnqualified?: number | null
    rankPub?: number | null
    speedy?: number | null
    playerId: number
    gameDayId: number
  }

  export type PlayerRecordUpdateManyMutationInput = {
    year?: IntFieldUpdateOperationsInput | number
    responses?: NullableIntFieldUpdateOperationsInput | number | null
    played?: NullableIntFieldUpdateOperationsInput | number | null
    won?: NullableIntFieldUpdateOperationsInput | number | null
    drawn?: NullableIntFieldUpdateOperationsInput | number | null
    lost?: NullableIntFieldUpdateOperationsInput | number | null
    points?: NullableIntFieldUpdateOperationsInput | number | null
    averages?: NullableFloatFieldUpdateOperationsInput | number | null
    stalwart?: NullableIntFieldUpdateOperationsInput | number | null
    pub?: NullableIntFieldUpdateOperationsInput | number | null
    rankPoints?: NullableIntFieldUpdateOperationsInput | number | null
    rankAverages?: NullableIntFieldUpdateOperationsInput | number | null
    rankAveragesUnqualified?: NullableIntFieldUpdateOperationsInput | number | null
    rankStalwart?: NullableIntFieldUpdateOperationsInput | number | null
    rankSpeedy?: NullableIntFieldUpdateOperationsInput | number | null
    rankSpeedyUnqualified?: NullableIntFieldUpdateOperationsInput | number | null
    rankPub?: NullableIntFieldUpdateOperationsInput | number | null
    speedy?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type PlayerRecordUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    year?: IntFieldUpdateOperationsInput | number
    responses?: NullableIntFieldUpdateOperationsInput | number | null
    played?: NullableIntFieldUpdateOperationsInput | number | null
    won?: NullableIntFieldUpdateOperationsInput | number | null
    drawn?: NullableIntFieldUpdateOperationsInput | number | null
    lost?: NullableIntFieldUpdateOperationsInput | number | null
    points?: NullableIntFieldUpdateOperationsInput | number | null
    averages?: NullableFloatFieldUpdateOperationsInput | number | null
    stalwart?: NullableIntFieldUpdateOperationsInput | number | null
    pub?: NullableIntFieldUpdateOperationsInput | number | null
    rankPoints?: NullableIntFieldUpdateOperationsInput | number | null
    rankAverages?: NullableIntFieldUpdateOperationsInput | number | null
    rankAveragesUnqualified?: NullableIntFieldUpdateOperationsInput | number | null
    rankStalwart?: NullableIntFieldUpdateOperationsInput | number | null
    rankSpeedy?: NullableIntFieldUpdateOperationsInput | number | null
    rankSpeedyUnqualified?: NullableIntFieldUpdateOperationsInput | number | null
    rankPub?: NullableIntFieldUpdateOperationsInput | number | null
    speedy?: NullableIntFieldUpdateOperationsInput | number | null
    playerId?: IntFieldUpdateOperationsInput | number
    gameDayId?: IntFieldUpdateOperationsInput | number
  }

  export type UserCreateInput = {
    id: string
    name: string
    email: string
    emailVerified: boolean
    image?: string | null
    createdAt: Date | string
    updatedAt: Date | string
    role?: string | null
    banned?: boolean | null
    banReason?: string | null
    banExpires?: Date | string | null
    sessions?: SessionCreateNestedManyWithoutUserInput
    accounts?: AccountCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    id: string
    name: string
    email: string
    emailVerified: boolean
    image?: string | null
    createdAt: Date | string
    updatedAt: Date | string
    role?: string | null
    banned?: boolean | null
    banReason?: string | null
    banExpires?: Date | string | null
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    image?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    role?: NullableStringFieldUpdateOperationsInput | string | null
    banned?: NullableBoolFieldUpdateOperationsInput | boolean | null
    banReason?: NullableStringFieldUpdateOperationsInput | string | null
    banExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    sessions?: SessionUpdateManyWithoutUserNestedInput
    accounts?: AccountUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    image?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    role?: NullableStringFieldUpdateOperationsInput | string | null
    banned?: NullableBoolFieldUpdateOperationsInput | boolean | null
    banReason?: NullableStringFieldUpdateOperationsInput | string | null
    banExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateManyInput = {
    id: string
    name: string
    email: string
    emailVerified: boolean
    image?: string | null
    createdAt: Date | string
    updatedAt: Date | string
    role?: string | null
    banned?: boolean | null
    banReason?: string | null
    banExpires?: Date | string | null
  }

  export type UserUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    image?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    role?: NullableStringFieldUpdateOperationsInput | string | null
    banned?: NullableBoolFieldUpdateOperationsInput | boolean | null
    banReason?: NullableStringFieldUpdateOperationsInput | string | null
    banExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type UserUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    image?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    role?: NullableStringFieldUpdateOperationsInput | string | null
    banned?: NullableBoolFieldUpdateOperationsInput | boolean | null
    banReason?: NullableStringFieldUpdateOperationsInput | string | null
    banExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type SessionCreateInput = {
    id: string
    expiresAt: Date | string
    token: string
    createdAt: Date | string
    updatedAt: Date | string
    ipAddress?: string | null
    userAgent?: string | null
    impersonatedBy?: string | null
    user: UserCreateNestedOneWithoutSessionsInput
  }

  export type SessionUncheckedCreateInput = {
    id: string
    expiresAt: Date | string
    token: string
    createdAt: Date | string
    updatedAt: Date | string
    ipAddress?: string | null
    userAgent?: string | null
    userId: string
    impersonatedBy?: string | null
  }

  export type SessionUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    token?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    impersonatedBy?: NullableStringFieldUpdateOperationsInput | string | null
    user?: UserUpdateOneRequiredWithoutSessionsNestedInput
  }

  export type SessionUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    token?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: StringFieldUpdateOperationsInput | string
    impersonatedBy?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type SessionCreateManyInput = {
    id: string
    expiresAt: Date | string
    token: string
    createdAt: Date | string
    updatedAt: Date | string
    ipAddress?: string | null
    userAgent?: string | null
    userId: string
    impersonatedBy?: string | null
  }

  export type SessionUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    token?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    impersonatedBy?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type SessionUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    token?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: StringFieldUpdateOperationsInput | string
    impersonatedBy?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AccountCreateInput = {
    id: string
    accountId: string
    providerId: string
    accessToken?: string | null
    refreshToken?: string | null
    idToken?: string | null
    accessTokenExpiresAt?: Date | string | null
    refreshTokenExpiresAt?: Date | string | null
    scope?: string | null
    password?: string | null
    createdAt: Date | string
    updatedAt: Date | string
    user: UserCreateNestedOneWithoutAccountsInput
  }

  export type AccountUncheckedCreateInput = {
    id: string
    accountId: string
    providerId: string
    userId: string
    accessToken?: string | null
    refreshToken?: string | null
    idToken?: string | null
    accessTokenExpiresAt?: Date | string | null
    refreshTokenExpiresAt?: Date | string | null
    scope?: string | null
    password?: string | null
    createdAt: Date | string
    updatedAt: Date | string
  }

  export type AccountUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    accountId?: StringFieldUpdateOperationsInput | string
    providerId?: StringFieldUpdateOperationsInput | string
    accessToken?: NullableStringFieldUpdateOperationsInput | string | null
    refreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    idToken?: NullableStringFieldUpdateOperationsInput | string | null
    accessTokenExpiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    refreshTokenExpiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    scope?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutAccountsNestedInput
  }

  export type AccountUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    accountId?: StringFieldUpdateOperationsInput | string
    providerId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    accessToken?: NullableStringFieldUpdateOperationsInput | string | null
    refreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    idToken?: NullableStringFieldUpdateOperationsInput | string | null
    accessTokenExpiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    refreshTokenExpiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    scope?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AccountCreateManyInput = {
    id: string
    accountId: string
    providerId: string
    userId: string
    accessToken?: string | null
    refreshToken?: string | null
    idToken?: string | null
    accessTokenExpiresAt?: Date | string | null
    refreshTokenExpiresAt?: Date | string | null
    scope?: string | null
    password?: string | null
    createdAt: Date | string
    updatedAt: Date | string
  }

  export type AccountUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    accountId?: StringFieldUpdateOperationsInput | string
    providerId?: StringFieldUpdateOperationsInput | string
    accessToken?: NullableStringFieldUpdateOperationsInput | string | null
    refreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    idToken?: NullableStringFieldUpdateOperationsInput | string | null
    accessTokenExpiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    refreshTokenExpiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    scope?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AccountUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    accountId?: StringFieldUpdateOperationsInput | string
    providerId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    accessToken?: NullableStringFieldUpdateOperationsInput | string | null
    refreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    idToken?: NullableStringFieldUpdateOperationsInput | string | null
    accessTokenExpiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    refreshTokenExpiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    scope?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VerificationCreateInput = {
    id: string
    identifier: string
    value: string
    expiresAt: Date | string
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
  }

  export type VerificationUncheckedCreateInput = {
    id: string
    identifier: string
    value: string
    expiresAt: Date | string
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
  }

  export type VerificationUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    identifier?: StringFieldUpdateOperationsInput | string
    value?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type VerificationUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    identifier?: StringFieldUpdateOperationsInput | string
    value?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type VerificationCreateManyInput = {
    id: string
    identifier: string
    value: string
    expiresAt: Date | string
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
  }

  export type VerificationUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    identifier?: StringFieldUpdateOperationsInput | string
    value?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type VerificationUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    identifier?: StringFieldUpdateOperationsInput | string
    value?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type PlayerScalarRelationFilter = {
    is?: PlayerWhereInput
    isNot?: PlayerWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type ArsePlayerIdRaterIdCompoundUniqueInput = {
    playerId: number
    raterId: number
  }

  export type ArseCountOrderByAggregateInput = {
    id?: SortOrder
    stamp?: SortOrder
    inGoal?: SortOrder
    running?: SortOrder
    shooting?: SortOrder
    passing?: SortOrder
    ballSkill?: SortOrder
    attacking?: SortOrder
    defending?: SortOrder
    playerId?: SortOrder
    raterId?: SortOrder
  }

  export type ArseAvgOrderByAggregateInput = {
    id?: SortOrder
    inGoal?: SortOrder
    running?: SortOrder
    shooting?: SortOrder
    passing?: SortOrder
    ballSkill?: SortOrder
    attacking?: SortOrder
    defending?: SortOrder
    playerId?: SortOrder
    raterId?: SortOrder
  }

  export type ArseMaxOrderByAggregateInput = {
    id?: SortOrder
    stamp?: SortOrder
    inGoal?: SortOrder
    running?: SortOrder
    shooting?: SortOrder
    passing?: SortOrder
    ballSkill?: SortOrder
    attacking?: SortOrder
    defending?: SortOrder
    playerId?: SortOrder
    raterId?: SortOrder
  }

  export type ArseMinOrderByAggregateInput = {
    id?: SortOrder
    stamp?: SortOrder
    inGoal?: SortOrder
    running?: SortOrder
    shooting?: SortOrder
    passing?: SortOrder
    ballSkill?: SortOrder
    attacking?: SortOrder
    defending?: SortOrder
    playerId?: SortOrder
    raterId?: SortOrder
  }

  export type ArseSumOrderByAggregateInput = {
    id?: SortOrder
    inGoal?: SortOrder
    running?: SortOrder
    shooting?: SortOrder
    passing?: SortOrder
    ballSkill?: SortOrder
    attacking?: SortOrder
    defending?: SortOrder
    playerId?: SortOrder
    raterId?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type ClubSupporterListRelationFilter = {
    every?: ClubSupporterWhereInput
    some?: ClubSupporterWhereInput
    none?: ClubSupporterWhereInput
  }

  export type ClubSupporterOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ClubOrderByRelevanceInput = {
    fields: ClubOrderByRelevanceFieldEnum | ClubOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type ClubCountOrderByAggregateInput = {
    id?: SortOrder
    soccerwayId?: SortOrder
    clubName?: SortOrder
    uri?: SortOrder
    country?: SortOrder
  }

  export type ClubAvgOrderByAggregateInput = {
    id?: SortOrder
    soccerwayId?: SortOrder
  }

  export type ClubMaxOrderByAggregateInput = {
    id?: SortOrder
    soccerwayId?: SortOrder
    clubName?: SortOrder
    uri?: SortOrder
    country?: SortOrder
  }

  export type ClubMinOrderByAggregateInput = {
    id?: SortOrder
    soccerwayId?: SortOrder
    clubName?: SortOrder
    uri?: SortOrder
    country?: SortOrder
  }

  export type ClubSumOrderByAggregateInput = {
    id?: SortOrder
    soccerwayId?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type ClubScalarRelationFilter = {
    is?: ClubWhereInput
    isNot?: ClubWhereInput
  }

  export type ClubSupporterPlayerIdClubIdCompoundUniqueInput = {
    playerId: number
    clubId: number
  }

  export type ClubSupporterCountOrderByAggregateInput = {
    playerId?: SortOrder
    clubId?: SortOrder
  }

  export type ClubSupporterAvgOrderByAggregateInput = {
    playerId?: SortOrder
    clubId?: SortOrder
  }

  export type ClubSupporterMaxOrderByAggregateInput = {
    playerId?: SortOrder
    clubId?: SortOrder
  }

  export type ClubSupporterMinOrderByAggregateInput = {
    playerId?: SortOrder
    clubId?: SortOrder
  }

  export type ClubSupporterSumOrderByAggregateInput = {
    playerId?: SortOrder
    clubId?: SortOrder
  }

  export type CountrySupporterListRelationFilter = {
    every?: CountrySupporterWhereInput
    some?: CountrySupporterWhereInput
    none?: CountrySupporterWhereInput
  }

  export type CountrySupporterOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CountryOrderByRelevanceInput = {
    fields: CountryOrderByRelevanceFieldEnum | CountryOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type CountryCountOrderByAggregateInput = {
    isoCode?: SortOrder
    name?: SortOrder
  }

  export type CountryMaxOrderByAggregateInput = {
    isoCode?: SortOrder
    name?: SortOrder
  }

  export type CountryMinOrderByAggregateInput = {
    isoCode?: SortOrder
    name?: SortOrder
  }

  export type CountryScalarRelationFilter = {
    is?: CountryWhereInput
    isNot?: CountryWhereInput
  }

  export type CountrySupporterOrderByRelevanceInput = {
    fields: CountrySupporterOrderByRelevanceFieldEnum | CountrySupporterOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type CountrySupporterPlayerIdCountryISOCodeCompoundUniqueInput = {
    playerId: number
    countryISOCode: string
  }

  export type CountrySupporterCountOrderByAggregateInput = {
    playerId?: SortOrder
    countryISOCode?: SortOrder
  }

  export type CountrySupporterAvgOrderByAggregateInput = {
    playerId?: SortOrder
  }

  export type CountrySupporterMaxOrderByAggregateInput = {
    playerId?: SortOrder
    countryISOCode?: SortOrder
  }

  export type CountrySupporterMinOrderByAggregateInput = {
    playerId?: SortOrder
    countryISOCode?: SortOrder
  }

  export type CountrySupporterSumOrderByAggregateInput = {
    playerId?: SortOrder
  }

  export type FloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type DiffsOrderByRelevanceInput = {
    fields: DiffsOrderByRelevanceFieldEnum | DiffsOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type DiffsCountOrderByAggregateInput = {
    id?: SortOrder
    a?: SortOrder
    b?: SortOrder
    diffAge?: SortOrder
    diffUnknownAge?: SortOrder
    diffGoalies?: SortOrder
    diffAverage?: SortOrder
    diffPlayed?: SortOrder
  }

  export type DiffsAvgOrderByAggregateInput = {
    id?: SortOrder
    diffAge?: SortOrder
    diffUnknownAge?: SortOrder
    diffGoalies?: SortOrder
    diffAverage?: SortOrder
    diffPlayed?: SortOrder
  }

  export type DiffsMaxOrderByAggregateInput = {
    id?: SortOrder
    a?: SortOrder
    b?: SortOrder
    diffAge?: SortOrder
    diffUnknownAge?: SortOrder
    diffGoalies?: SortOrder
    diffAverage?: SortOrder
    diffPlayed?: SortOrder
  }

  export type DiffsMinOrderByAggregateInput = {
    id?: SortOrder
    a?: SortOrder
    b?: SortOrder
    diffAge?: SortOrder
    diffUnknownAge?: SortOrder
    diffGoalies?: SortOrder
    diffAverage?: SortOrder
    diffPlayed?: SortOrder
  }

  export type DiffsSumOrderByAggregateInput = {
    id?: SortOrder
    diffAge?: SortOrder
    diffUnknownAge?: SortOrder
    diffGoalies?: SortOrder
    diffAverage?: SortOrder
    diffPlayed?: SortOrder
  }

  export type FloatNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedFloatNullableFilter<$PrismaModel>
    _min?: NestedFloatNullableFilter<$PrismaModel>
    _max?: NestedFloatNullableFilter<$PrismaModel>
  }

  export type GameChatOrderByRelevanceInput = {
    fields: GameChatOrderByRelevanceFieldEnum | GameChatOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type GameChatCountOrderByAggregateInput = {
    id?: SortOrder
    gameDay?: SortOrder
    stamp?: SortOrder
    player?: SortOrder
    body?: SortOrder
  }

  export type GameChatAvgOrderByAggregateInput = {
    id?: SortOrder
    gameDay?: SortOrder
    player?: SortOrder
  }

  export type GameChatMaxOrderByAggregateInput = {
    id?: SortOrder
    gameDay?: SortOrder
    stamp?: SortOrder
    player?: SortOrder
    body?: SortOrder
  }

  export type GameChatMinOrderByAggregateInput = {
    id?: SortOrder
    gameDay?: SortOrder
    stamp?: SortOrder
    player?: SortOrder
    body?: SortOrder
  }

  export type GameChatSumOrderByAggregateInput = {
    id?: SortOrder
    gameDay?: SortOrder
    player?: SortOrder
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type EnumTeamNameNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.TeamName | EnumTeamNameFieldRefInput<$PrismaModel> | null
    in?: $Enums.TeamName[] | null
    notIn?: $Enums.TeamName[] | null
    not?: NestedEnumTeamNameNullableFilter<$PrismaModel> | $Enums.TeamName | null
  }

  export type OutcomeListRelationFilter = {
    every?: OutcomeWhereInput
    some?: OutcomeWhereInput
    none?: OutcomeWhereInput
  }

  export type PlayerRecordListRelationFilter = {
    every?: PlayerRecordWhereInput
    some?: PlayerRecordWhereInput
    none?: PlayerRecordWhereInput
  }

  export type OutcomeOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PlayerRecordOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type GameDayOrderByRelevanceInput = {
    fields: GameDayOrderByRelevanceFieldEnum | GameDayOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type GameDayCountOrderByAggregateInput = {
    id?: SortOrder
    year?: SortOrder
    date?: SortOrder
    game?: SortOrder
    mailSent?: SortOrder
    comment?: SortOrder
    bibs?: SortOrder
    pickerGamesHistory?: SortOrder
  }

  export type GameDayAvgOrderByAggregateInput = {
    id?: SortOrder
    year?: SortOrder
    pickerGamesHistory?: SortOrder
  }

  export type GameDayMaxOrderByAggregateInput = {
    id?: SortOrder
    year?: SortOrder
    date?: SortOrder
    game?: SortOrder
    mailSent?: SortOrder
    comment?: SortOrder
    bibs?: SortOrder
    pickerGamesHistory?: SortOrder
  }

  export type GameDayMinOrderByAggregateInput = {
    id?: SortOrder
    year?: SortOrder
    date?: SortOrder
    game?: SortOrder
    mailSent?: SortOrder
    comment?: SortOrder
    bibs?: SortOrder
    pickerGamesHistory?: SortOrder
  }

  export type GameDaySumOrderByAggregateInput = {
    id?: SortOrder
    year?: SortOrder
    pickerGamesHistory?: SortOrder
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type EnumTeamNameNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.TeamName | EnumTeamNameFieldRefInput<$PrismaModel> | null
    in?: $Enums.TeamName[] | null
    notIn?: $Enums.TeamName[] | null
    not?: NestedEnumTeamNameNullableWithAggregatesFilter<$PrismaModel> | $Enums.TeamName | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumTeamNameNullableFilter<$PrismaModel>
    _max?: NestedEnumTeamNameNullableFilter<$PrismaModel>
  }

  export type InvitationOrderByRelevanceInput = {
    fields: InvitationOrderByRelevanceFieldEnum | InvitationOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type InvitationCountOrderByAggregateInput = {
    uuid?: SortOrder
    playerId?: SortOrder
    gameDayId?: SortOrder
  }

  export type InvitationAvgOrderByAggregateInput = {
    playerId?: SortOrder
    gameDayId?: SortOrder
  }

  export type InvitationMaxOrderByAggregateInput = {
    uuid?: SortOrder
    playerId?: SortOrder
    gameDayId?: SortOrder
  }

  export type InvitationMinOrderByAggregateInput = {
    uuid?: SortOrder
    playerId?: SortOrder
    gameDayId?: SortOrder
  }

  export type InvitationSumOrderByAggregateInput = {
    playerId?: SortOrder
    gameDayId?: SortOrder
  }

  export type EnumPlayerResponseNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.PlayerResponse | EnumPlayerResponseFieldRefInput<$PrismaModel> | null
    in?: $Enums.PlayerResponse[] | null
    notIn?: $Enums.PlayerResponse[] | null
    not?: NestedEnumPlayerResponseNullableFilter<$PrismaModel> | $Enums.PlayerResponse | null
  }

  export type BoolNullableFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableFilter<$PrismaModel> | boolean | null
  }

  export type GameDayScalarRelationFilter = {
    is?: GameDayWhereInput
    isNot?: GameDayWhereInput
  }

  export type OutcomeOrderByRelevanceInput = {
    fields: OutcomeOrderByRelevanceFieldEnum | OutcomeOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type OutcomeGameDayIdPlayerIdCompoundUniqueInput = {
    gameDayId: number
    playerId: number
  }

  export type OutcomeCountOrderByAggregateInput = {
    id?: SortOrder
    response?: SortOrder
    responseInterval?: SortOrder
    points?: SortOrder
    team?: SortOrder
    comment?: SortOrder
    pub?: SortOrder
    paid?: SortOrder
    goalie?: SortOrder
    gameDayId?: SortOrder
    playerId?: SortOrder
  }

  export type OutcomeAvgOrderByAggregateInput = {
    id?: SortOrder
    responseInterval?: SortOrder
    points?: SortOrder
    pub?: SortOrder
    gameDayId?: SortOrder
    playerId?: SortOrder
  }

  export type OutcomeMaxOrderByAggregateInput = {
    id?: SortOrder
    response?: SortOrder
    responseInterval?: SortOrder
    points?: SortOrder
    team?: SortOrder
    comment?: SortOrder
    pub?: SortOrder
    paid?: SortOrder
    goalie?: SortOrder
    gameDayId?: SortOrder
    playerId?: SortOrder
  }

  export type OutcomeMinOrderByAggregateInput = {
    id?: SortOrder
    response?: SortOrder
    responseInterval?: SortOrder
    points?: SortOrder
    team?: SortOrder
    comment?: SortOrder
    pub?: SortOrder
    paid?: SortOrder
    goalie?: SortOrder
    gameDayId?: SortOrder
    playerId?: SortOrder
  }

  export type OutcomeSumOrderByAggregateInput = {
    id?: SortOrder
    responseInterval?: SortOrder
    points?: SortOrder
    pub?: SortOrder
    gameDayId?: SortOrder
    playerId?: SortOrder
  }

  export type EnumPlayerResponseNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.PlayerResponse | EnumPlayerResponseFieldRefInput<$PrismaModel> | null
    in?: $Enums.PlayerResponse[] | null
    notIn?: $Enums.PlayerResponse[] | null
    not?: NestedEnumPlayerResponseNullableWithAggregatesFilter<$PrismaModel> | $Enums.PlayerResponse | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumPlayerResponseNullableFilter<$PrismaModel>
    _max?: NestedEnumPlayerResponseNullableFilter<$PrismaModel>
  }

  export type BoolNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableWithAggregatesFilter<$PrismaModel> | boolean | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedBoolNullableFilter<$PrismaModel>
    _max?: NestedBoolNullableFilter<$PrismaModel>
  }

  export type PickerOrderByRelevanceInput = {
    fields: PickerOrderByRelevanceFieldEnum | PickerOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type PickerCountOrderByAggregateInput = {
    playerId?: SortOrder
    playerName?: SortOrder
    age?: SortOrder
    average?: SortOrder
    goalie?: SortOrder
    played?: SortOrder
  }

  export type PickerAvgOrderByAggregateInput = {
    playerId?: SortOrder
    age?: SortOrder
    average?: SortOrder
    goalie?: SortOrder
    played?: SortOrder
  }

  export type PickerMaxOrderByAggregateInput = {
    playerId?: SortOrder
    playerName?: SortOrder
    age?: SortOrder
    average?: SortOrder
    goalie?: SortOrder
    played?: SortOrder
  }

  export type PickerMinOrderByAggregateInput = {
    playerId?: SortOrder
    playerName?: SortOrder
    age?: SortOrder
    average?: SortOrder
    goalie?: SortOrder
    played?: SortOrder
  }

  export type PickerSumOrderByAggregateInput = {
    playerId?: SortOrder
    age?: SortOrder
    average?: SortOrder
    goalie?: SortOrder
    played?: SortOrder
  }

  export type PickerTeamsCountOrderByAggregateInput = {
    playerId?: SortOrder
    team?: SortOrder
  }

  export type PickerTeamsAvgOrderByAggregateInput = {
    playerId?: SortOrder
  }

  export type PickerTeamsMaxOrderByAggregateInput = {
    playerId?: SortOrder
    team?: SortOrder
  }

  export type PickerTeamsMinOrderByAggregateInput = {
    playerId?: SortOrder
    team?: SortOrder
  }

  export type PickerTeamsSumOrderByAggregateInput = {
    playerId?: SortOrder
  }

  export type ArseListRelationFilter = {
    every?: ArseWhereInput
    some?: ArseWhereInput
    none?: ArseWhereInput
  }

  export type ArseOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PlayerOrderByRelevanceInput = {
    fields: PlayerOrderByRelevanceFieldEnum | PlayerOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type PlayerCountOrderByAggregateInput = {
    id?: SortOrder
    login?: SortOrder
    isAdmin?: SortOrder
    name?: SortOrder
    anonymous?: SortOrder
    email?: SortOrder
    joined?: SortOrder
    finished?: SortOrder
    born?: SortOrder
    comment?: SortOrder
    introducedBy?: SortOrder
  }

  export type PlayerAvgOrderByAggregateInput = {
    id?: SortOrder
    introducedBy?: SortOrder
  }

  export type PlayerMaxOrderByAggregateInput = {
    id?: SortOrder
    login?: SortOrder
    isAdmin?: SortOrder
    name?: SortOrder
    anonymous?: SortOrder
    email?: SortOrder
    joined?: SortOrder
    finished?: SortOrder
    born?: SortOrder
    comment?: SortOrder
    introducedBy?: SortOrder
  }

  export type PlayerMinOrderByAggregateInput = {
    id?: SortOrder
    login?: SortOrder
    isAdmin?: SortOrder
    name?: SortOrder
    anonymous?: SortOrder
    email?: SortOrder
    joined?: SortOrder
    finished?: SortOrder
    born?: SortOrder
    comment?: SortOrder
    introducedBy?: SortOrder
  }

  export type PlayerSumOrderByAggregateInput = {
    id?: SortOrder
    introducedBy?: SortOrder
  }

  export type PlayerRecordPlayerIdYearGameDayIdCompoundUniqueInput = {
    playerId: number
    year: number
    gameDayId: number
  }

  export type PlayerRecordCountOrderByAggregateInput = {
    id?: SortOrder
    year?: SortOrder
    responses?: SortOrder
    played?: SortOrder
    won?: SortOrder
    drawn?: SortOrder
    lost?: SortOrder
    points?: SortOrder
    averages?: SortOrder
    stalwart?: SortOrder
    pub?: SortOrder
    rankPoints?: SortOrder
    rankAverages?: SortOrder
    rankAveragesUnqualified?: SortOrder
    rankStalwart?: SortOrder
    rankSpeedy?: SortOrder
    rankSpeedyUnqualified?: SortOrder
    rankPub?: SortOrder
    speedy?: SortOrder
    playerId?: SortOrder
    gameDayId?: SortOrder
  }

  export type PlayerRecordAvgOrderByAggregateInput = {
    id?: SortOrder
    year?: SortOrder
    responses?: SortOrder
    played?: SortOrder
    won?: SortOrder
    drawn?: SortOrder
    lost?: SortOrder
    points?: SortOrder
    averages?: SortOrder
    stalwart?: SortOrder
    pub?: SortOrder
    rankPoints?: SortOrder
    rankAverages?: SortOrder
    rankAveragesUnqualified?: SortOrder
    rankStalwart?: SortOrder
    rankSpeedy?: SortOrder
    rankSpeedyUnqualified?: SortOrder
    rankPub?: SortOrder
    speedy?: SortOrder
    playerId?: SortOrder
    gameDayId?: SortOrder
  }

  export type PlayerRecordMaxOrderByAggregateInput = {
    id?: SortOrder
    year?: SortOrder
    responses?: SortOrder
    played?: SortOrder
    won?: SortOrder
    drawn?: SortOrder
    lost?: SortOrder
    points?: SortOrder
    averages?: SortOrder
    stalwart?: SortOrder
    pub?: SortOrder
    rankPoints?: SortOrder
    rankAverages?: SortOrder
    rankAveragesUnqualified?: SortOrder
    rankStalwart?: SortOrder
    rankSpeedy?: SortOrder
    rankSpeedyUnqualified?: SortOrder
    rankPub?: SortOrder
    speedy?: SortOrder
    playerId?: SortOrder
    gameDayId?: SortOrder
  }

  export type PlayerRecordMinOrderByAggregateInput = {
    id?: SortOrder
    year?: SortOrder
    responses?: SortOrder
    played?: SortOrder
    won?: SortOrder
    drawn?: SortOrder
    lost?: SortOrder
    points?: SortOrder
    averages?: SortOrder
    stalwart?: SortOrder
    pub?: SortOrder
    rankPoints?: SortOrder
    rankAverages?: SortOrder
    rankAveragesUnqualified?: SortOrder
    rankStalwart?: SortOrder
    rankSpeedy?: SortOrder
    rankSpeedyUnqualified?: SortOrder
    rankPub?: SortOrder
    speedy?: SortOrder
    playerId?: SortOrder
    gameDayId?: SortOrder
  }

  export type PlayerRecordSumOrderByAggregateInput = {
    id?: SortOrder
    year?: SortOrder
    responses?: SortOrder
    played?: SortOrder
    won?: SortOrder
    drawn?: SortOrder
    lost?: SortOrder
    points?: SortOrder
    averages?: SortOrder
    stalwart?: SortOrder
    pub?: SortOrder
    rankPoints?: SortOrder
    rankAverages?: SortOrder
    rankAveragesUnqualified?: SortOrder
    rankStalwart?: SortOrder
    rankSpeedy?: SortOrder
    rankSpeedyUnqualified?: SortOrder
    rankPub?: SortOrder
    speedy?: SortOrder
    playerId?: SortOrder
    gameDayId?: SortOrder
  }

  export type SessionListRelationFilter = {
    every?: SessionWhereInput
    some?: SessionWhereInput
    none?: SessionWhereInput
  }

  export type AccountListRelationFilter = {
    every?: AccountWhereInput
    some?: AccountWhereInput
    none?: AccountWhereInput
  }

  export type SessionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type AccountOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserOrderByRelevanceInput = {
    fields: UserOrderByRelevanceFieldEnum | UserOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    emailVerified?: SortOrder
    image?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    role?: SortOrder
    banned?: SortOrder
    banReason?: SortOrder
    banExpires?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    emailVerified?: SortOrder
    image?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    role?: SortOrder
    banned?: SortOrder
    banReason?: SortOrder
    banExpires?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    emailVerified?: SortOrder
    image?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    role?: SortOrder
    banned?: SortOrder
    banReason?: SortOrder
    banExpires?: SortOrder
  }

  export type UserScalarRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type SessionOrderByRelevanceInput = {
    fields: SessionOrderByRelevanceFieldEnum | SessionOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type SessionCountOrderByAggregateInput = {
    id?: SortOrder
    expiresAt?: SortOrder
    token?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    ipAddress?: SortOrder
    userAgent?: SortOrder
    userId?: SortOrder
    impersonatedBy?: SortOrder
  }

  export type SessionMaxOrderByAggregateInput = {
    id?: SortOrder
    expiresAt?: SortOrder
    token?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    ipAddress?: SortOrder
    userAgent?: SortOrder
    userId?: SortOrder
    impersonatedBy?: SortOrder
  }

  export type SessionMinOrderByAggregateInput = {
    id?: SortOrder
    expiresAt?: SortOrder
    token?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    ipAddress?: SortOrder
    userAgent?: SortOrder
    userId?: SortOrder
    impersonatedBy?: SortOrder
  }

  export type AccountOrderByRelevanceInput = {
    fields: AccountOrderByRelevanceFieldEnum | AccountOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type AccountCountOrderByAggregateInput = {
    id?: SortOrder
    accountId?: SortOrder
    providerId?: SortOrder
    userId?: SortOrder
    accessToken?: SortOrder
    refreshToken?: SortOrder
    idToken?: SortOrder
    accessTokenExpiresAt?: SortOrder
    refreshTokenExpiresAt?: SortOrder
    scope?: SortOrder
    password?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AccountMaxOrderByAggregateInput = {
    id?: SortOrder
    accountId?: SortOrder
    providerId?: SortOrder
    userId?: SortOrder
    accessToken?: SortOrder
    refreshToken?: SortOrder
    idToken?: SortOrder
    accessTokenExpiresAt?: SortOrder
    refreshTokenExpiresAt?: SortOrder
    scope?: SortOrder
    password?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AccountMinOrderByAggregateInput = {
    id?: SortOrder
    accountId?: SortOrder
    providerId?: SortOrder
    userId?: SortOrder
    accessToken?: SortOrder
    refreshToken?: SortOrder
    idToken?: SortOrder
    accessTokenExpiresAt?: SortOrder
    refreshTokenExpiresAt?: SortOrder
    scope?: SortOrder
    password?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type VerificationOrderByRelevanceInput = {
    fields: VerificationOrderByRelevanceFieldEnum | VerificationOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type VerificationCountOrderByAggregateInput = {
    id?: SortOrder
    identifier?: SortOrder
    value?: SortOrder
    expiresAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type VerificationMaxOrderByAggregateInput = {
    id?: SortOrder
    identifier?: SortOrder
    value?: SortOrder
    expiresAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type VerificationMinOrderByAggregateInput = {
    id?: SortOrder
    identifier?: SortOrder
    value?: SortOrder
    expiresAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PlayerCreateNestedOneWithoutArsesOfPlayerInput = {
    create?: XOR<PlayerCreateWithoutArsesOfPlayerInput, PlayerUncheckedCreateWithoutArsesOfPlayerInput>
    connectOrCreate?: PlayerCreateOrConnectWithoutArsesOfPlayerInput
    connect?: PlayerWhereUniqueInput
  }

  export type PlayerCreateNestedOneWithoutArsesByPlayerInput = {
    create?: XOR<PlayerCreateWithoutArsesByPlayerInput, PlayerUncheckedCreateWithoutArsesByPlayerInput>
    connectOrCreate?: PlayerCreateOrConnectWithoutArsesByPlayerInput
    connect?: PlayerWhereUniqueInput
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type PlayerUpdateOneRequiredWithoutArsesOfPlayerNestedInput = {
    create?: XOR<PlayerCreateWithoutArsesOfPlayerInput, PlayerUncheckedCreateWithoutArsesOfPlayerInput>
    connectOrCreate?: PlayerCreateOrConnectWithoutArsesOfPlayerInput
    upsert?: PlayerUpsertWithoutArsesOfPlayerInput
    connect?: PlayerWhereUniqueInput
    update?: XOR<XOR<PlayerUpdateToOneWithWhereWithoutArsesOfPlayerInput, PlayerUpdateWithoutArsesOfPlayerInput>, PlayerUncheckedUpdateWithoutArsesOfPlayerInput>
  }

  export type PlayerUpdateOneRequiredWithoutArsesByPlayerNestedInput = {
    create?: XOR<PlayerCreateWithoutArsesByPlayerInput, PlayerUncheckedCreateWithoutArsesByPlayerInput>
    connectOrCreate?: PlayerCreateOrConnectWithoutArsesByPlayerInput
    upsert?: PlayerUpsertWithoutArsesByPlayerInput
    connect?: PlayerWhereUniqueInput
    update?: XOR<XOR<PlayerUpdateToOneWithWhereWithoutArsesByPlayerInput, PlayerUpdateWithoutArsesByPlayerInput>, PlayerUncheckedUpdateWithoutArsesByPlayerInput>
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type ClubSupporterCreateNestedManyWithoutClubInput = {
    create?: XOR<ClubSupporterCreateWithoutClubInput, ClubSupporterUncheckedCreateWithoutClubInput> | ClubSupporterCreateWithoutClubInput[] | ClubSupporterUncheckedCreateWithoutClubInput[]
    connectOrCreate?: ClubSupporterCreateOrConnectWithoutClubInput | ClubSupporterCreateOrConnectWithoutClubInput[]
    createMany?: ClubSupporterCreateManyClubInputEnvelope
    connect?: ClubSupporterWhereUniqueInput | ClubSupporterWhereUniqueInput[]
  }

  export type ClubSupporterUncheckedCreateNestedManyWithoutClubInput = {
    create?: XOR<ClubSupporterCreateWithoutClubInput, ClubSupporterUncheckedCreateWithoutClubInput> | ClubSupporterCreateWithoutClubInput[] | ClubSupporterUncheckedCreateWithoutClubInput[]
    connectOrCreate?: ClubSupporterCreateOrConnectWithoutClubInput | ClubSupporterCreateOrConnectWithoutClubInput[]
    createMany?: ClubSupporterCreateManyClubInputEnvelope
    connect?: ClubSupporterWhereUniqueInput | ClubSupporterWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type ClubSupporterUpdateManyWithoutClubNestedInput = {
    create?: XOR<ClubSupporterCreateWithoutClubInput, ClubSupporterUncheckedCreateWithoutClubInput> | ClubSupporterCreateWithoutClubInput[] | ClubSupporterUncheckedCreateWithoutClubInput[]
    connectOrCreate?: ClubSupporterCreateOrConnectWithoutClubInput | ClubSupporterCreateOrConnectWithoutClubInput[]
    upsert?: ClubSupporterUpsertWithWhereUniqueWithoutClubInput | ClubSupporterUpsertWithWhereUniqueWithoutClubInput[]
    createMany?: ClubSupporterCreateManyClubInputEnvelope
    set?: ClubSupporterWhereUniqueInput | ClubSupporterWhereUniqueInput[]
    disconnect?: ClubSupporterWhereUniqueInput | ClubSupporterWhereUniqueInput[]
    delete?: ClubSupporterWhereUniqueInput | ClubSupporterWhereUniqueInput[]
    connect?: ClubSupporterWhereUniqueInput | ClubSupporterWhereUniqueInput[]
    update?: ClubSupporterUpdateWithWhereUniqueWithoutClubInput | ClubSupporterUpdateWithWhereUniqueWithoutClubInput[]
    updateMany?: ClubSupporterUpdateManyWithWhereWithoutClubInput | ClubSupporterUpdateManyWithWhereWithoutClubInput[]
    deleteMany?: ClubSupporterScalarWhereInput | ClubSupporterScalarWhereInput[]
  }

  export type ClubSupporterUncheckedUpdateManyWithoutClubNestedInput = {
    create?: XOR<ClubSupporterCreateWithoutClubInput, ClubSupporterUncheckedCreateWithoutClubInput> | ClubSupporterCreateWithoutClubInput[] | ClubSupporterUncheckedCreateWithoutClubInput[]
    connectOrCreate?: ClubSupporterCreateOrConnectWithoutClubInput | ClubSupporterCreateOrConnectWithoutClubInput[]
    upsert?: ClubSupporterUpsertWithWhereUniqueWithoutClubInput | ClubSupporterUpsertWithWhereUniqueWithoutClubInput[]
    createMany?: ClubSupporterCreateManyClubInputEnvelope
    set?: ClubSupporterWhereUniqueInput | ClubSupporterWhereUniqueInput[]
    disconnect?: ClubSupporterWhereUniqueInput | ClubSupporterWhereUniqueInput[]
    delete?: ClubSupporterWhereUniqueInput | ClubSupporterWhereUniqueInput[]
    connect?: ClubSupporterWhereUniqueInput | ClubSupporterWhereUniqueInput[]
    update?: ClubSupporterUpdateWithWhereUniqueWithoutClubInput | ClubSupporterUpdateWithWhereUniqueWithoutClubInput[]
    updateMany?: ClubSupporterUpdateManyWithWhereWithoutClubInput | ClubSupporterUpdateManyWithWhereWithoutClubInput[]
    deleteMany?: ClubSupporterScalarWhereInput | ClubSupporterScalarWhereInput[]
  }

  export type PlayerCreateNestedOneWithoutClubsInput = {
    create?: XOR<PlayerCreateWithoutClubsInput, PlayerUncheckedCreateWithoutClubsInput>
    connectOrCreate?: PlayerCreateOrConnectWithoutClubsInput
    connect?: PlayerWhereUniqueInput
  }

  export type ClubCreateNestedOneWithoutSupportersInput = {
    create?: XOR<ClubCreateWithoutSupportersInput, ClubUncheckedCreateWithoutSupportersInput>
    connectOrCreate?: ClubCreateOrConnectWithoutSupportersInput
    connect?: ClubWhereUniqueInput
  }

  export type PlayerUpdateOneRequiredWithoutClubsNestedInput = {
    create?: XOR<PlayerCreateWithoutClubsInput, PlayerUncheckedCreateWithoutClubsInput>
    connectOrCreate?: PlayerCreateOrConnectWithoutClubsInput
    upsert?: PlayerUpsertWithoutClubsInput
    connect?: PlayerWhereUniqueInput
    update?: XOR<XOR<PlayerUpdateToOneWithWhereWithoutClubsInput, PlayerUpdateWithoutClubsInput>, PlayerUncheckedUpdateWithoutClubsInput>
  }

  export type ClubUpdateOneRequiredWithoutSupportersNestedInput = {
    create?: XOR<ClubCreateWithoutSupportersInput, ClubUncheckedCreateWithoutSupportersInput>
    connectOrCreate?: ClubCreateOrConnectWithoutSupportersInput
    upsert?: ClubUpsertWithoutSupportersInput
    connect?: ClubWhereUniqueInput
    update?: XOR<XOR<ClubUpdateToOneWithWhereWithoutSupportersInput, ClubUpdateWithoutSupportersInput>, ClubUncheckedUpdateWithoutSupportersInput>
  }

  export type CountrySupporterCreateNestedManyWithoutCountryInput = {
    create?: XOR<CountrySupporterCreateWithoutCountryInput, CountrySupporterUncheckedCreateWithoutCountryInput> | CountrySupporterCreateWithoutCountryInput[] | CountrySupporterUncheckedCreateWithoutCountryInput[]
    connectOrCreate?: CountrySupporterCreateOrConnectWithoutCountryInput | CountrySupporterCreateOrConnectWithoutCountryInput[]
    createMany?: CountrySupporterCreateManyCountryInputEnvelope
    connect?: CountrySupporterWhereUniqueInput | CountrySupporterWhereUniqueInput[]
  }

  export type CountrySupporterUncheckedCreateNestedManyWithoutCountryInput = {
    create?: XOR<CountrySupporterCreateWithoutCountryInput, CountrySupporterUncheckedCreateWithoutCountryInput> | CountrySupporterCreateWithoutCountryInput[] | CountrySupporterUncheckedCreateWithoutCountryInput[]
    connectOrCreate?: CountrySupporterCreateOrConnectWithoutCountryInput | CountrySupporterCreateOrConnectWithoutCountryInput[]
    createMany?: CountrySupporterCreateManyCountryInputEnvelope
    connect?: CountrySupporterWhereUniqueInput | CountrySupporterWhereUniqueInput[]
  }

  export type CountrySupporterUpdateManyWithoutCountryNestedInput = {
    create?: XOR<CountrySupporterCreateWithoutCountryInput, CountrySupporterUncheckedCreateWithoutCountryInput> | CountrySupporterCreateWithoutCountryInput[] | CountrySupporterUncheckedCreateWithoutCountryInput[]
    connectOrCreate?: CountrySupporterCreateOrConnectWithoutCountryInput | CountrySupporterCreateOrConnectWithoutCountryInput[]
    upsert?: CountrySupporterUpsertWithWhereUniqueWithoutCountryInput | CountrySupporterUpsertWithWhereUniqueWithoutCountryInput[]
    createMany?: CountrySupporterCreateManyCountryInputEnvelope
    set?: CountrySupporterWhereUniqueInput | CountrySupporterWhereUniqueInput[]
    disconnect?: CountrySupporterWhereUniqueInput | CountrySupporterWhereUniqueInput[]
    delete?: CountrySupporterWhereUniqueInput | CountrySupporterWhereUniqueInput[]
    connect?: CountrySupporterWhereUniqueInput | CountrySupporterWhereUniqueInput[]
    update?: CountrySupporterUpdateWithWhereUniqueWithoutCountryInput | CountrySupporterUpdateWithWhereUniqueWithoutCountryInput[]
    updateMany?: CountrySupporterUpdateManyWithWhereWithoutCountryInput | CountrySupporterUpdateManyWithWhereWithoutCountryInput[]
    deleteMany?: CountrySupporterScalarWhereInput | CountrySupporterScalarWhereInput[]
  }

  export type CountrySupporterUncheckedUpdateManyWithoutCountryNestedInput = {
    create?: XOR<CountrySupporterCreateWithoutCountryInput, CountrySupporterUncheckedCreateWithoutCountryInput> | CountrySupporterCreateWithoutCountryInput[] | CountrySupporterUncheckedCreateWithoutCountryInput[]
    connectOrCreate?: CountrySupporterCreateOrConnectWithoutCountryInput | CountrySupporterCreateOrConnectWithoutCountryInput[]
    upsert?: CountrySupporterUpsertWithWhereUniqueWithoutCountryInput | CountrySupporterUpsertWithWhereUniqueWithoutCountryInput[]
    createMany?: CountrySupporterCreateManyCountryInputEnvelope
    set?: CountrySupporterWhereUniqueInput | CountrySupporterWhereUniqueInput[]
    disconnect?: CountrySupporterWhereUniqueInput | CountrySupporterWhereUniqueInput[]
    delete?: CountrySupporterWhereUniqueInput | CountrySupporterWhereUniqueInput[]
    connect?: CountrySupporterWhereUniqueInput | CountrySupporterWhereUniqueInput[]
    update?: CountrySupporterUpdateWithWhereUniqueWithoutCountryInput | CountrySupporterUpdateWithWhereUniqueWithoutCountryInput[]
    updateMany?: CountrySupporterUpdateManyWithWhereWithoutCountryInput | CountrySupporterUpdateManyWithWhereWithoutCountryInput[]
    deleteMany?: CountrySupporterScalarWhereInput | CountrySupporterScalarWhereInput[]
  }

  export type CountryCreateNestedOneWithoutSupportersInput = {
    create?: XOR<CountryCreateWithoutSupportersInput, CountryUncheckedCreateWithoutSupportersInput>
    connectOrCreate?: CountryCreateOrConnectWithoutSupportersInput
    connect?: CountryWhereUniqueInput
  }

  export type PlayerCreateNestedOneWithoutCountriesInput = {
    create?: XOR<PlayerCreateWithoutCountriesInput, PlayerUncheckedCreateWithoutCountriesInput>
    connectOrCreate?: PlayerCreateOrConnectWithoutCountriesInput
    connect?: PlayerWhereUniqueInput
  }

  export type CountryUpdateOneRequiredWithoutSupportersNestedInput = {
    create?: XOR<CountryCreateWithoutSupportersInput, CountryUncheckedCreateWithoutSupportersInput>
    connectOrCreate?: CountryCreateOrConnectWithoutSupportersInput
    upsert?: CountryUpsertWithoutSupportersInput
    connect?: CountryWhereUniqueInput
    update?: XOR<XOR<CountryUpdateToOneWithWhereWithoutSupportersInput, CountryUpdateWithoutSupportersInput>, CountryUncheckedUpdateWithoutSupportersInput>
  }

  export type PlayerUpdateOneRequiredWithoutCountriesNestedInput = {
    create?: XOR<PlayerCreateWithoutCountriesInput, PlayerUncheckedCreateWithoutCountriesInput>
    connectOrCreate?: PlayerCreateOrConnectWithoutCountriesInput
    upsert?: PlayerUpsertWithoutCountriesInput
    connect?: PlayerWhereUniqueInput
    update?: XOR<XOR<PlayerUpdateToOneWithWhereWithoutCountriesInput, PlayerUpdateWithoutCountriesInput>, PlayerUncheckedUpdateWithoutCountriesInput>
  }

  export type NullableFloatFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type OutcomeCreateNestedManyWithoutGameDayInput = {
    create?: XOR<OutcomeCreateWithoutGameDayInput, OutcomeUncheckedCreateWithoutGameDayInput> | OutcomeCreateWithoutGameDayInput[] | OutcomeUncheckedCreateWithoutGameDayInput[]
    connectOrCreate?: OutcomeCreateOrConnectWithoutGameDayInput | OutcomeCreateOrConnectWithoutGameDayInput[]
    createMany?: OutcomeCreateManyGameDayInputEnvelope
    connect?: OutcomeWhereUniqueInput | OutcomeWhereUniqueInput[]
  }

  export type PlayerRecordCreateNestedManyWithoutGameDayInput = {
    create?: XOR<PlayerRecordCreateWithoutGameDayInput, PlayerRecordUncheckedCreateWithoutGameDayInput> | PlayerRecordCreateWithoutGameDayInput[] | PlayerRecordUncheckedCreateWithoutGameDayInput[]
    connectOrCreate?: PlayerRecordCreateOrConnectWithoutGameDayInput | PlayerRecordCreateOrConnectWithoutGameDayInput[]
    createMany?: PlayerRecordCreateManyGameDayInputEnvelope
    connect?: PlayerRecordWhereUniqueInput | PlayerRecordWhereUniqueInput[]
  }

  export type OutcomeUncheckedCreateNestedManyWithoutGameDayInput = {
    create?: XOR<OutcomeCreateWithoutGameDayInput, OutcomeUncheckedCreateWithoutGameDayInput> | OutcomeCreateWithoutGameDayInput[] | OutcomeUncheckedCreateWithoutGameDayInput[]
    connectOrCreate?: OutcomeCreateOrConnectWithoutGameDayInput | OutcomeCreateOrConnectWithoutGameDayInput[]
    createMany?: OutcomeCreateManyGameDayInputEnvelope
    connect?: OutcomeWhereUniqueInput | OutcomeWhereUniqueInput[]
  }

  export type PlayerRecordUncheckedCreateNestedManyWithoutGameDayInput = {
    create?: XOR<PlayerRecordCreateWithoutGameDayInput, PlayerRecordUncheckedCreateWithoutGameDayInput> | PlayerRecordCreateWithoutGameDayInput[] | PlayerRecordUncheckedCreateWithoutGameDayInput[]
    connectOrCreate?: PlayerRecordCreateOrConnectWithoutGameDayInput | PlayerRecordCreateOrConnectWithoutGameDayInput[]
    createMany?: PlayerRecordCreateManyGameDayInputEnvelope
    connect?: PlayerRecordWhereUniqueInput | PlayerRecordWhereUniqueInput[]
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type NullableEnumTeamNameFieldUpdateOperationsInput = {
    set?: $Enums.TeamName | null
  }

  export type OutcomeUpdateManyWithoutGameDayNestedInput = {
    create?: XOR<OutcomeCreateWithoutGameDayInput, OutcomeUncheckedCreateWithoutGameDayInput> | OutcomeCreateWithoutGameDayInput[] | OutcomeUncheckedCreateWithoutGameDayInput[]
    connectOrCreate?: OutcomeCreateOrConnectWithoutGameDayInput | OutcomeCreateOrConnectWithoutGameDayInput[]
    upsert?: OutcomeUpsertWithWhereUniqueWithoutGameDayInput | OutcomeUpsertWithWhereUniqueWithoutGameDayInput[]
    createMany?: OutcomeCreateManyGameDayInputEnvelope
    set?: OutcomeWhereUniqueInput | OutcomeWhereUniqueInput[]
    disconnect?: OutcomeWhereUniqueInput | OutcomeWhereUniqueInput[]
    delete?: OutcomeWhereUniqueInput | OutcomeWhereUniqueInput[]
    connect?: OutcomeWhereUniqueInput | OutcomeWhereUniqueInput[]
    update?: OutcomeUpdateWithWhereUniqueWithoutGameDayInput | OutcomeUpdateWithWhereUniqueWithoutGameDayInput[]
    updateMany?: OutcomeUpdateManyWithWhereWithoutGameDayInput | OutcomeUpdateManyWithWhereWithoutGameDayInput[]
    deleteMany?: OutcomeScalarWhereInput | OutcomeScalarWhereInput[]
  }

  export type PlayerRecordUpdateManyWithoutGameDayNestedInput = {
    create?: XOR<PlayerRecordCreateWithoutGameDayInput, PlayerRecordUncheckedCreateWithoutGameDayInput> | PlayerRecordCreateWithoutGameDayInput[] | PlayerRecordUncheckedCreateWithoutGameDayInput[]
    connectOrCreate?: PlayerRecordCreateOrConnectWithoutGameDayInput | PlayerRecordCreateOrConnectWithoutGameDayInput[]
    upsert?: PlayerRecordUpsertWithWhereUniqueWithoutGameDayInput | PlayerRecordUpsertWithWhereUniqueWithoutGameDayInput[]
    createMany?: PlayerRecordCreateManyGameDayInputEnvelope
    set?: PlayerRecordWhereUniqueInput | PlayerRecordWhereUniqueInput[]
    disconnect?: PlayerRecordWhereUniqueInput | PlayerRecordWhereUniqueInput[]
    delete?: PlayerRecordWhereUniqueInput | PlayerRecordWhereUniqueInput[]
    connect?: PlayerRecordWhereUniqueInput | PlayerRecordWhereUniqueInput[]
    update?: PlayerRecordUpdateWithWhereUniqueWithoutGameDayInput | PlayerRecordUpdateWithWhereUniqueWithoutGameDayInput[]
    updateMany?: PlayerRecordUpdateManyWithWhereWithoutGameDayInput | PlayerRecordUpdateManyWithWhereWithoutGameDayInput[]
    deleteMany?: PlayerRecordScalarWhereInput | PlayerRecordScalarWhereInput[]
  }

  export type OutcomeUncheckedUpdateManyWithoutGameDayNestedInput = {
    create?: XOR<OutcomeCreateWithoutGameDayInput, OutcomeUncheckedCreateWithoutGameDayInput> | OutcomeCreateWithoutGameDayInput[] | OutcomeUncheckedCreateWithoutGameDayInput[]
    connectOrCreate?: OutcomeCreateOrConnectWithoutGameDayInput | OutcomeCreateOrConnectWithoutGameDayInput[]
    upsert?: OutcomeUpsertWithWhereUniqueWithoutGameDayInput | OutcomeUpsertWithWhereUniqueWithoutGameDayInput[]
    createMany?: OutcomeCreateManyGameDayInputEnvelope
    set?: OutcomeWhereUniqueInput | OutcomeWhereUniqueInput[]
    disconnect?: OutcomeWhereUniqueInput | OutcomeWhereUniqueInput[]
    delete?: OutcomeWhereUniqueInput | OutcomeWhereUniqueInput[]
    connect?: OutcomeWhereUniqueInput | OutcomeWhereUniqueInput[]
    update?: OutcomeUpdateWithWhereUniqueWithoutGameDayInput | OutcomeUpdateWithWhereUniqueWithoutGameDayInput[]
    updateMany?: OutcomeUpdateManyWithWhereWithoutGameDayInput | OutcomeUpdateManyWithWhereWithoutGameDayInput[]
    deleteMany?: OutcomeScalarWhereInput | OutcomeScalarWhereInput[]
  }

  export type PlayerRecordUncheckedUpdateManyWithoutGameDayNestedInput = {
    create?: XOR<PlayerRecordCreateWithoutGameDayInput, PlayerRecordUncheckedCreateWithoutGameDayInput> | PlayerRecordCreateWithoutGameDayInput[] | PlayerRecordUncheckedCreateWithoutGameDayInput[]
    connectOrCreate?: PlayerRecordCreateOrConnectWithoutGameDayInput | PlayerRecordCreateOrConnectWithoutGameDayInput[]
    upsert?: PlayerRecordUpsertWithWhereUniqueWithoutGameDayInput | PlayerRecordUpsertWithWhereUniqueWithoutGameDayInput[]
    createMany?: PlayerRecordCreateManyGameDayInputEnvelope
    set?: PlayerRecordWhereUniqueInput | PlayerRecordWhereUniqueInput[]
    disconnect?: PlayerRecordWhereUniqueInput | PlayerRecordWhereUniqueInput[]
    delete?: PlayerRecordWhereUniqueInput | PlayerRecordWhereUniqueInput[]
    connect?: PlayerRecordWhereUniqueInput | PlayerRecordWhereUniqueInput[]
    update?: PlayerRecordUpdateWithWhereUniqueWithoutGameDayInput | PlayerRecordUpdateWithWhereUniqueWithoutGameDayInput[]
    updateMany?: PlayerRecordUpdateManyWithWhereWithoutGameDayInput | PlayerRecordUpdateManyWithWhereWithoutGameDayInput[]
    deleteMany?: PlayerRecordScalarWhereInput | PlayerRecordScalarWhereInput[]
  }

  export type GameDayCreateNestedOneWithoutOutcomesInput = {
    create?: XOR<GameDayCreateWithoutOutcomesInput, GameDayUncheckedCreateWithoutOutcomesInput>
    connectOrCreate?: GameDayCreateOrConnectWithoutOutcomesInput
    connect?: GameDayWhereUniqueInput
  }

  export type PlayerCreateNestedOneWithoutOutcomesInput = {
    create?: XOR<PlayerCreateWithoutOutcomesInput, PlayerUncheckedCreateWithoutOutcomesInput>
    connectOrCreate?: PlayerCreateOrConnectWithoutOutcomesInput
    connect?: PlayerWhereUniqueInput
  }

  export type NullableEnumPlayerResponseFieldUpdateOperationsInput = {
    set?: $Enums.PlayerResponse | null
  }

  export type NullableBoolFieldUpdateOperationsInput = {
    set?: boolean | null
  }

  export type GameDayUpdateOneRequiredWithoutOutcomesNestedInput = {
    create?: XOR<GameDayCreateWithoutOutcomesInput, GameDayUncheckedCreateWithoutOutcomesInput>
    connectOrCreate?: GameDayCreateOrConnectWithoutOutcomesInput
    upsert?: GameDayUpsertWithoutOutcomesInput
    connect?: GameDayWhereUniqueInput
    update?: XOR<XOR<GameDayUpdateToOneWithWhereWithoutOutcomesInput, GameDayUpdateWithoutOutcomesInput>, GameDayUncheckedUpdateWithoutOutcomesInput>
  }

  export type PlayerUpdateOneRequiredWithoutOutcomesNestedInput = {
    create?: XOR<PlayerCreateWithoutOutcomesInput, PlayerUncheckedCreateWithoutOutcomesInput>
    connectOrCreate?: PlayerCreateOrConnectWithoutOutcomesInput
    upsert?: PlayerUpsertWithoutOutcomesInput
    connect?: PlayerWhereUniqueInput
    update?: XOR<XOR<PlayerUpdateToOneWithWhereWithoutOutcomesInput, PlayerUpdateWithoutOutcomesInput>, PlayerUncheckedUpdateWithoutOutcomesInput>
  }

  export type ArseCreateNestedManyWithoutPlayerInput = {
    create?: XOR<ArseCreateWithoutPlayerInput, ArseUncheckedCreateWithoutPlayerInput> | ArseCreateWithoutPlayerInput[] | ArseUncheckedCreateWithoutPlayerInput[]
    connectOrCreate?: ArseCreateOrConnectWithoutPlayerInput | ArseCreateOrConnectWithoutPlayerInput[]
    createMany?: ArseCreateManyPlayerInputEnvelope
    connect?: ArseWhereUniqueInput | ArseWhereUniqueInput[]
  }

  export type ArseCreateNestedManyWithoutRaterInput = {
    create?: XOR<ArseCreateWithoutRaterInput, ArseUncheckedCreateWithoutRaterInput> | ArseCreateWithoutRaterInput[] | ArseUncheckedCreateWithoutRaterInput[]
    connectOrCreate?: ArseCreateOrConnectWithoutRaterInput | ArseCreateOrConnectWithoutRaterInput[]
    createMany?: ArseCreateManyRaterInputEnvelope
    connect?: ArseWhereUniqueInput | ArseWhereUniqueInput[]
  }

  export type ClubSupporterCreateNestedManyWithoutPlayerInput = {
    create?: XOR<ClubSupporterCreateWithoutPlayerInput, ClubSupporterUncheckedCreateWithoutPlayerInput> | ClubSupporterCreateWithoutPlayerInput[] | ClubSupporterUncheckedCreateWithoutPlayerInput[]
    connectOrCreate?: ClubSupporterCreateOrConnectWithoutPlayerInput | ClubSupporterCreateOrConnectWithoutPlayerInput[]
    createMany?: ClubSupporterCreateManyPlayerInputEnvelope
    connect?: ClubSupporterWhereUniqueInput | ClubSupporterWhereUniqueInput[]
  }

  export type CountrySupporterCreateNestedManyWithoutPlayerInput = {
    create?: XOR<CountrySupporterCreateWithoutPlayerInput, CountrySupporterUncheckedCreateWithoutPlayerInput> | CountrySupporterCreateWithoutPlayerInput[] | CountrySupporterUncheckedCreateWithoutPlayerInput[]
    connectOrCreate?: CountrySupporterCreateOrConnectWithoutPlayerInput | CountrySupporterCreateOrConnectWithoutPlayerInput[]
    createMany?: CountrySupporterCreateManyPlayerInputEnvelope
    connect?: CountrySupporterWhereUniqueInput | CountrySupporterWhereUniqueInput[]
  }

  export type OutcomeCreateNestedManyWithoutPlayerInput = {
    create?: XOR<OutcomeCreateWithoutPlayerInput, OutcomeUncheckedCreateWithoutPlayerInput> | OutcomeCreateWithoutPlayerInput[] | OutcomeUncheckedCreateWithoutPlayerInput[]
    connectOrCreate?: OutcomeCreateOrConnectWithoutPlayerInput | OutcomeCreateOrConnectWithoutPlayerInput[]
    createMany?: OutcomeCreateManyPlayerInputEnvelope
    connect?: OutcomeWhereUniqueInput | OutcomeWhereUniqueInput[]
  }

  export type PlayerRecordCreateNestedManyWithoutPlayerInput = {
    create?: XOR<PlayerRecordCreateWithoutPlayerInput, PlayerRecordUncheckedCreateWithoutPlayerInput> | PlayerRecordCreateWithoutPlayerInput[] | PlayerRecordUncheckedCreateWithoutPlayerInput[]
    connectOrCreate?: PlayerRecordCreateOrConnectWithoutPlayerInput | PlayerRecordCreateOrConnectWithoutPlayerInput[]
    createMany?: PlayerRecordCreateManyPlayerInputEnvelope
    connect?: PlayerRecordWhereUniqueInput | PlayerRecordWhereUniqueInput[]
  }

  export type ArseUncheckedCreateNestedManyWithoutPlayerInput = {
    create?: XOR<ArseCreateWithoutPlayerInput, ArseUncheckedCreateWithoutPlayerInput> | ArseCreateWithoutPlayerInput[] | ArseUncheckedCreateWithoutPlayerInput[]
    connectOrCreate?: ArseCreateOrConnectWithoutPlayerInput | ArseCreateOrConnectWithoutPlayerInput[]
    createMany?: ArseCreateManyPlayerInputEnvelope
    connect?: ArseWhereUniqueInput | ArseWhereUniqueInput[]
  }

  export type ArseUncheckedCreateNestedManyWithoutRaterInput = {
    create?: XOR<ArseCreateWithoutRaterInput, ArseUncheckedCreateWithoutRaterInput> | ArseCreateWithoutRaterInput[] | ArseUncheckedCreateWithoutRaterInput[]
    connectOrCreate?: ArseCreateOrConnectWithoutRaterInput | ArseCreateOrConnectWithoutRaterInput[]
    createMany?: ArseCreateManyRaterInputEnvelope
    connect?: ArseWhereUniqueInput | ArseWhereUniqueInput[]
  }

  export type ClubSupporterUncheckedCreateNestedManyWithoutPlayerInput = {
    create?: XOR<ClubSupporterCreateWithoutPlayerInput, ClubSupporterUncheckedCreateWithoutPlayerInput> | ClubSupporterCreateWithoutPlayerInput[] | ClubSupporterUncheckedCreateWithoutPlayerInput[]
    connectOrCreate?: ClubSupporterCreateOrConnectWithoutPlayerInput | ClubSupporterCreateOrConnectWithoutPlayerInput[]
    createMany?: ClubSupporterCreateManyPlayerInputEnvelope
    connect?: ClubSupporterWhereUniqueInput | ClubSupporterWhereUniqueInput[]
  }

  export type CountrySupporterUncheckedCreateNestedManyWithoutPlayerInput = {
    create?: XOR<CountrySupporterCreateWithoutPlayerInput, CountrySupporterUncheckedCreateWithoutPlayerInput> | CountrySupporterCreateWithoutPlayerInput[] | CountrySupporterUncheckedCreateWithoutPlayerInput[]
    connectOrCreate?: CountrySupporterCreateOrConnectWithoutPlayerInput | CountrySupporterCreateOrConnectWithoutPlayerInput[]
    createMany?: CountrySupporterCreateManyPlayerInputEnvelope
    connect?: CountrySupporterWhereUniqueInput | CountrySupporterWhereUniqueInput[]
  }

  export type OutcomeUncheckedCreateNestedManyWithoutPlayerInput = {
    create?: XOR<OutcomeCreateWithoutPlayerInput, OutcomeUncheckedCreateWithoutPlayerInput> | OutcomeCreateWithoutPlayerInput[] | OutcomeUncheckedCreateWithoutPlayerInput[]
    connectOrCreate?: OutcomeCreateOrConnectWithoutPlayerInput | OutcomeCreateOrConnectWithoutPlayerInput[]
    createMany?: OutcomeCreateManyPlayerInputEnvelope
    connect?: OutcomeWhereUniqueInput | OutcomeWhereUniqueInput[]
  }

  export type PlayerRecordUncheckedCreateNestedManyWithoutPlayerInput = {
    create?: XOR<PlayerRecordCreateWithoutPlayerInput, PlayerRecordUncheckedCreateWithoutPlayerInput> | PlayerRecordCreateWithoutPlayerInput[] | PlayerRecordUncheckedCreateWithoutPlayerInput[]
    connectOrCreate?: PlayerRecordCreateOrConnectWithoutPlayerInput | PlayerRecordCreateOrConnectWithoutPlayerInput[]
    createMany?: PlayerRecordCreateManyPlayerInputEnvelope
    connect?: PlayerRecordWhereUniqueInput | PlayerRecordWhereUniqueInput[]
  }

  export type ArseUpdateManyWithoutPlayerNestedInput = {
    create?: XOR<ArseCreateWithoutPlayerInput, ArseUncheckedCreateWithoutPlayerInput> | ArseCreateWithoutPlayerInput[] | ArseUncheckedCreateWithoutPlayerInput[]
    connectOrCreate?: ArseCreateOrConnectWithoutPlayerInput | ArseCreateOrConnectWithoutPlayerInput[]
    upsert?: ArseUpsertWithWhereUniqueWithoutPlayerInput | ArseUpsertWithWhereUniqueWithoutPlayerInput[]
    createMany?: ArseCreateManyPlayerInputEnvelope
    set?: ArseWhereUniqueInput | ArseWhereUniqueInput[]
    disconnect?: ArseWhereUniqueInput | ArseWhereUniqueInput[]
    delete?: ArseWhereUniqueInput | ArseWhereUniqueInput[]
    connect?: ArseWhereUniqueInput | ArseWhereUniqueInput[]
    update?: ArseUpdateWithWhereUniqueWithoutPlayerInput | ArseUpdateWithWhereUniqueWithoutPlayerInput[]
    updateMany?: ArseUpdateManyWithWhereWithoutPlayerInput | ArseUpdateManyWithWhereWithoutPlayerInput[]
    deleteMany?: ArseScalarWhereInput | ArseScalarWhereInput[]
  }

  export type ArseUpdateManyWithoutRaterNestedInput = {
    create?: XOR<ArseCreateWithoutRaterInput, ArseUncheckedCreateWithoutRaterInput> | ArseCreateWithoutRaterInput[] | ArseUncheckedCreateWithoutRaterInput[]
    connectOrCreate?: ArseCreateOrConnectWithoutRaterInput | ArseCreateOrConnectWithoutRaterInput[]
    upsert?: ArseUpsertWithWhereUniqueWithoutRaterInput | ArseUpsertWithWhereUniqueWithoutRaterInput[]
    createMany?: ArseCreateManyRaterInputEnvelope
    set?: ArseWhereUniqueInput | ArseWhereUniqueInput[]
    disconnect?: ArseWhereUniqueInput | ArseWhereUniqueInput[]
    delete?: ArseWhereUniqueInput | ArseWhereUniqueInput[]
    connect?: ArseWhereUniqueInput | ArseWhereUniqueInput[]
    update?: ArseUpdateWithWhereUniqueWithoutRaterInput | ArseUpdateWithWhereUniqueWithoutRaterInput[]
    updateMany?: ArseUpdateManyWithWhereWithoutRaterInput | ArseUpdateManyWithWhereWithoutRaterInput[]
    deleteMany?: ArseScalarWhereInput | ArseScalarWhereInput[]
  }

  export type ClubSupporterUpdateManyWithoutPlayerNestedInput = {
    create?: XOR<ClubSupporterCreateWithoutPlayerInput, ClubSupporterUncheckedCreateWithoutPlayerInput> | ClubSupporterCreateWithoutPlayerInput[] | ClubSupporterUncheckedCreateWithoutPlayerInput[]
    connectOrCreate?: ClubSupporterCreateOrConnectWithoutPlayerInput | ClubSupporterCreateOrConnectWithoutPlayerInput[]
    upsert?: ClubSupporterUpsertWithWhereUniqueWithoutPlayerInput | ClubSupporterUpsertWithWhereUniqueWithoutPlayerInput[]
    createMany?: ClubSupporterCreateManyPlayerInputEnvelope
    set?: ClubSupporterWhereUniqueInput | ClubSupporterWhereUniqueInput[]
    disconnect?: ClubSupporterWhereUniqueInput | ClubSupporterWhereUniqueInput[]
    delete?: ClubSupporterWhereUniqueInput | ClubSupporterWhereUniqueInput[]
    connect?: ClubSupporterWhereUniqueInput | ClubSupporterWhereUniqueInput[]
    update?: ClubSupporterUpdateWithWhereUniqueWithoutPlayerInput | ClubSupporterUpdateWithWhereUniqueWithoutPlayerInput[]
    updateMany?: ClubSupporterUpdateManyWithWhereWithoutPlayerInput | ClubSupporterUpdateManyWithWhereWithoutPlayerInput[]
    deleteMany?: ClubSupporterScalarWhereInput | ClubSupporterScalarWhereInput[]
  }

  export type CountrySupporterUpdateManyWithoutPlayerNestedInput = {
    create?: XOR<CountrySupporterCreateWithoutPlayerInput, CountrySupporterUncheckedCreateWithoutPlayerInput> | CountrySupporterCreateWithoutPlayerInput[] | CountrySupporterUncheckedCreateWithoutPlayerInput[]
    connectOrCreate?: CountrySupporterCreateOrConnectWithoutPlayerInput | CountrySupporterCreateOrConnectWithoutPlayerInput[]
    upsert?: CountrySupporterUpsertWithWhereUniqueWithoutPlayerInput | CountrySupporterUpsertWithWhereUniqueWithoutPlayerInput[]
    createMany?: CountrySupporterCreateManyPlayerInputEnvelope
    set?: CountrySupporterWhereUniqueInput | CountrySupporterWhereUniqueInput[]
    disconnect?: CountrySupporterWhereUniqueInput | CountrySupporterWhereUniqueInput[]
    delete?: CountrySupporterWhereUniqueInput | CountrySupporterWhereUniqueInput[]
    connect?: CountrySupporterWhereUniqueInput | CountrySupporterWhereUniqueInput[]
    update?: CountrySupporterUpdateWithWhereUniqueWithoutPlayerInput | CountrySupporterUpdateWithWhereUniqueWithoutPlayerInput[]
    updateMany?: CountrySupporterUpdateManyWithWhereWithoutPlayerInput | CountrySupporterUpdateManyWithWhereWithoutPlayerInput[]
    deleteMany?: CountrySupporterScalarWhereInput | CountrySupporterScalarWhereInput[]
  }

  export type OutcomeUpdateManyWithoutPlayerNestedInput = {
    create?: XOR<OutcomeCreateWithoutPlayerInput, OutcomeUncheckedCreateWithoutPlayerInput> | OutcomeCreateWithoutPlayerInput[] | OutcomeUncheckedCreateWithoutPlayerInput[]
    connectOrCreate?: OutcomeCreateOrConnectWithoutPlayerInput | OutcomeCreateOrConnectWithoutPlayerInput[]
    upsert?: OutcomeUpsertWithWhereUniqueWithoutPlayerInput | OutcomeUpsertWithWhereUniqueWithoutPlayerInput[]
    createMany?: OutcomeCreateManyPlayerInputEnvelope
    set?: OutcomeWhereUniqueInput | OutcomeWhereUniqueInput[]
    disconnect?: OutcomeWhereUniqueInput | OutcomeWhereUniqueInput[]
    delete?: OutcomeWhereUniqueInput | OutcomeWhereUniqueInput[]
    connect?: OutcomeWhereUniqueInput | OutcomeWhereUniqueInput[]
    update?: OutcomeUpdateWithWhereUniqueWithoutPlayerInput | OutcomeUpdateWithWhereUniqueWithoutPlayerInput[]
    updateMany?: OutcomeUpdateManyWithWhereWithoutPlayerInput | OutcomeUpdateManyWithWhereWithoutPlayerInput[]
    deleteMany?: OutcomeScalarWhereInput | OutcomeScalarWhereInput[]
  }

  export type PlayerRecordUpdateManyWithoutPlayerNestedInput = {
    create?: XOR<PlayerRecordCreateWithoutPlayerInput, PlayerRecordUncheckedCreateWithoutPlayerInput> | PlayerRecordCreateWithoutPlayerInput[] | PlayerRecordUncheckedCreateWithoutPlayerInput[]
    connectOrCreate?: PlayerRecordCreateOrConnectWithoutPlayerInput | PlayerRecordCreateOrConnectWithoutPlayerInput[]
    upsert?: PlayerRecordUpsertWithWhereUniqueWithoutPlayerInput | PlayerRecordUpsertWithWhereUniqueWithoutPlayerInput[]
    createMany?: PlayerRecordCreateManyPlayerInputEnvelope
    set?: PlayerRecordWhereUniqueInput | PlayerRecordWhereUniqueInput[]
    disconnect?: PlayerRecordWhereUniqueInput | PlayerRecordWhereUniqueInput[]
    delete?: PlayerRecordWhereUniqueInput | PlayerRecordWhereUniqueInput[]
    connect?: PlayerRecordWhereUniqueInput | PlayerRecordWhereUniqueInput[]
    update?: PlayerRecordUpdateWithWhereUniqueWithoutPlayerInput | PlayerRecordUpdateWithWhereUniqueWithoutPlayerInput[]
    updateMany?: PlayerRecordUpdateManyWithWhereWithoutPlayerInput | PlayerRecordUpdateManyWithWhereWithoutPlayerInput[]
    deleteMany?: PlayerRecordScalarWhereInput | PlayerRecordScalarWhereInput[]
  }

  export type ArseUncheckedUpdateManyWithoutPlayerNestedInput = {
    create?: XOR<ArseCreateWithoutPlayerInput, ArseUncheckedCreateWithoutPlayerInput> | ArseCreateWithoutPlayerInput[] | ArseUncheckedCreateWithoutPlayerInput[]
    connectOrCreate?: ArseCreateOrConnectWithoutPlayerInput | ArseCreateOrConnectWithoutPlayerInput[]
    upsert?: ArseUpsertWithWhereUniqueWithoutPlayerInput | ArseUpsertWithWhereUniqueWithoutPlayerInput[]
    createMany?: ArseCreateManyPlayerInputEnvelope
    set?: ArseWhereUniqueInput | ArseWhereUniqueInput[]
    disconnect?: ArseWhereUniqueInput | ArseWhereUniqueInput[]
    delete?: ArseWhereUniqueInput | ArseWhereUniqueInput[]
    connect?: ArseWhereUniqueInput | ArseWhereUniqueInput[]
    update?: ArseUpdateWithWhereUniqueWithoutPlayerInput | ArseUpdateWithWhereUniqueWithoutPlayerInput[]
    updateMany?: ArseUpdateManyWithWhereWithoutPlayerInput | ArseUpdateManyWithWhereWithoutPlayerInput[]
    deleteMany?: ArseScalarWhereInput | ArseScalarWhereInput[]
  }

  export type ArseUncheckedUpdateManyWithoutRaterNestedInput = {
    create?: XOR<ArseCreateWithoutRaterInput, ArseUncheckedCreateWithoutRaterInput> | ArseCreateWithoutRaterInput[] | ArseUncheckedCreateWithoutRaterInput[]
    connectOrCreate?: ArseCreateOrConnectWithoutRaterInput | ArseCreateOrConnectWithoutRaterInput[]
    upsert?: ArseUpsertWithWhereUniqueWithoutRaterInput | ArseUpsertWithWhereUniqueWithoutRaterInput[]
    createMany?: ArseCreateManyRaterInputEnvelope
    set?: ArseWhereUniqueInput | ArseWhereUniqueInput[]
    disconnect?: ArseWhereUniqueInput | ArseWhereUniqueInput[]
    delete?: ArseWhereUniqueInput | ArseWhereUniqueInput[]
    connect?: ArseWhereUniqueInput | ArseWhereUniqueInput[]
    update?: ArseUpdateWithWhereUniqueWithoutRaterInput | ArseUpdateWithWhereUniqueWithoutRaterInput[]
    updateMany?: ArseUpdateManyWithWhereWithoutRaterInput | ArseUpdateManyWithWhereWithoutRaterInput[]
    deleteMany?: ArseScalarWhereInput | ArseScalarWhereInput[]
  }

  export type ClubSupporterUncheckedUpdateManyWithoutPlayerNestedInput = {
    create?: XOR<ClubSupporterCreateWithoutPlayerInput, ClubSupporterUncheckedCreateWithoutPlayerInput> | ClubSupporterCreateWithoutPlayerInput[] | ClubSupporterUncheckedCreateWithoutPlayerInput[]
    connectOrCreate?: ClubSupporterCreateOrConnectWithoutPlayerInput | ClubSupporterCreateOrConnectWithoutPlayerInput[]
    upsert?: ClubSupporterUpsertWithWhereUniqueWithoutPlayerInput | ClubSupporterUpsertWithWhereUniqueWithoutPlayerInput[]
    createMany?: ClubSupporterCreateManyPlayerInputEnvelope
    set?: ClubSupporterWhereUniqueInput | ClubSupporterWhereUniqueInput[]
    disconnect?: ClubSupporterWhereUniqueInput | ClubSupporterWhereUniqueInput[]
    delete?: ClubSupporterWhereUniqueInput | ClubSupporterWhereUniqueInput[]
    connect?: ClubSupporterWhereUniqueInput | ClubSupporterWhereUniqueInput[]
    update?: ClubSupporterUpdateWithWhereUniqueWithoutPlayerInput | ClubSupporterUpdateWithWhereUniqueWithoutPlayerInput[]
    updateMany?: ClubSupporterUpdateManyWithWhereWithoutPlayerInput | ClubSupporterUpdateManyWithWhereWithoutPlayerInput[]
    deleteMany?: ClubSupporterScalarWhereInput | ClubSupporterScalarWhereInput[]
  }

  export type CountrySupporterUncheckedUpdateManyWithoutPlayerNestedInput = {
    create?: XOR<CountrySupporterCreateWithoutPlayerInput, CountrySupporterUncheckedCreateWithoutPlayerInput> | CountrySupporterCreateWithoutPlayerInput[] | CountrySupporterUncheckedCreateWithoutPlayerInput[]
    connectOrCreate?: CountrySupporterCreateOrConnectWithoutPlayerInput | CountrySupporterCreateOrConnectWithoutPlayerInput[]
    upsert?: CountrySupporterUpsertWithWhereUniqueWithoutPlayerInput | CountrySupporterUpsertWithWhereUniqueWithoutPlayerInput[]
    createMany?: CountrySupporterCreateManyPlayerInputEnvelope
    set?: CountrySupporterWhereUniqueInput | CountrySupporterWhereUniqueInput[]
    disconnect?: CountrySupporterWhereUniqueInput | CountrySupporterWhereUniqueInput[]
    delete?: CountrySupporterWhereUniqueInput | CountrySupporterWhereUniqueInput[]
    connect?: CountrySupporterWhereUniqueInput | CountrySupporterWhereUniqueInput[]
    update?: CountrySupporterUpdateWithWhereUniqueWithoutPlayerInput | CountrySupporterUpdateWithWhereUniqueWithoutPlayerInput[]
    updateMany?: CountrySupporterUpdateManyWithWhereWithoutPlayerInput | CountrySupporterUpdateManyWithWhereWithoutPlayerInput[]
    deleteMany?: CountrySupporterScalarWhereInput | CountrySupporterScalarWhereInput[]
  }

  export type OutcomeUncheckedUpdateManyWithoutPlayerNestedInput = {
    create?: XOR<OutcomeCreateWithoutPlayerInput, OutcomeUncheckedCreateWithoutPlayerInput> | OutcomeCreateWithoutPlayerInput[] | OutcomeUncheckedCreateWithoutPlayerInput[]
    connectOrCreate?: OutcomeCreateOrConnectWithoutPlayerInput | OutcomeCreateOrConnectWithoutPlayerInput[]
    upsert?: OutcomeUpsertWithWhereUniqueWithoutPlayerInput | OutcomeUpsertWithWhereUniqueWithoutPlayerInput[]
    createMany?: OutcomeCreateManyPlayerInputEnvelope
    set?: OutcomeWhereUniqueInput | OutcomeWhereUniqueInput[]
    disconnect?: OutcomeWhereUniqueInput | OutcomeWhereUniqueInput[]
    delete?: OutcomeWhereUniqueInput | OutcomeWhereUniqueInput[]
    connect?: OutcomeWhereUniqueInput | OutcomeWhereUniqueInput[]
    update?: OutcomeUpdateWithWhereUniqueWithoutPlayerInput | OutcomeUpdateWithWhereUniqueWithoutPlayerInput[]
    updateMany?: OutcomeUpdateManyWithWhereWithoutPlayerInput | OutcomeUpdateManyWithWhereWithoutPlayerInput[]
    deleteMany?: OutcomeScalarWhereInput | OutcomeScalarWhereInput[]
  }

  export type PlayerRecordUncheckedUpdateManyWithoutPlayerNestedInput = {
    create?: XOR<PlayerRecordCreateWithoutPlayerInput, PlayerRecordUncheckedCreateWithoutPlayerInput> | PlayerRecordCreateWithoutPlayerInput[] | PlayerRecordUncheckedCreateWithoutPlayerInput[]
    connectOrCreate?: PlayerRecordCreateOrConnectWithoutPlayerInput | PlayerRecordCreateOrConnectWithoutPlayerInput[]
    upsert?: PlayerRecordUpsertWithWhereUniqueWithoutPlayerInput | PlayerRecordUpsertWithWhereUniqueWithoutPlayerInput[]
    createMany?: PlayerRecordCreateManyPlayerInputEnvelope
    set?: PlayerRecordWhereUniqueInput | PlayerRecordWhereUniqueInput[]
    disconnect?: PlayerRecordWhereUniqueInput | PlayerRecordWhereUniqueInput[]
    delete?: PlayerRecordWhereUniqueInput | PlayerRecordWhereUniqueInput[]
    connect?: PlayerRecordWhereUniqueInput | PlayerRecordWhereUniqueInput[]
    update?: PlayerRecordUpdateWithWhereUniqueWithoutPlayerInput | PlayerRecordUpdateWithWhereUniqueWithoutPlayerInput[]
    updateMany?: PlayerRecordUpdateManyWithWhereWithoutPlayerInput | PlayerRecordUpdateManyWithWhereWithoutPlayerInput[]
    deleteMany?: PlayerRecordScalarWhereInput | PlayerRecordScalarWhereInput[]
  }

  export type PlayerCreateNestedOneWithoutPlayerRecordsInput = {
    create?: XOR<PlayerCreateWithoutPlayerRecordsInput, PlayerUncheckedCreateWithoutPlayerRecordsInput>
    connectOrCreate?: PlayerCreateOrConnectWithoutPlayerRecordsInput
    connect?: PlayerWhereUniqueInput
  }

  export type GameDayCreateNestedOneWithoutPlayerRecordsInput = {
    create?: XOR<GameDayCreateWithoutPlayerRecordsInput, GameDayUncheckedCreateWithoutPlayerRecordsInput>
    connectOrCreate?: GameDayCreateOrConnectWithoutPlayerRecordsInput
    connect?: GameDayWhereUniqueInput
  }

  export type PlayerUpdateOneRequiredWithoutPlayerRecordsNestedInput = {
    create?: XOR<PlayerCreateWithoutPlayerRecordsInput, PlayerUncheckedCreateWithoutPlayerRecordsInput>
    connectOrCreate?: PlayerCreateOrConnectWithoutPlayerRecordsInput
    upsert?: PlayerUpsertWithoutPlayerRecordsInput
    connect?: PlayerWhereUniqueInput
    update?: XOR<XOR<PlayerUpdateToOneWithWhereWithoutPlayerRecordsInput, PlayerUpdateWithoutPlayerRecordsInput>, PlayerUncheckedUpdateWithoutPlayerRecordsInput>
  }

  export type GameDayUpdateOneRequiredWithoutPlayerRecordsNestedInput = {
    create?: XOR<GameDayCreateWithoutPlayerRecordsInput, GameDayUncheckedCreateWithoutPlayerRecordsInput>
    connectOrCreate?: GameDayCreateOrConnectWithoutPlayerRecordsInput
    upsert?: GameDayUpsertWithoutPlayerRecordsInput
    connect?: GameDayWhereUniqueInput
    update?: XOR<XOR<GameDayUpdateToOneWithWhereWithoutPlayerRecordsInput, GameDayUpdateWithoutPlayerRecordsInput>, GameDayUncheckedUpdateWithoutPlayerRecordsInput>
  }

  export type SessionCreateNestedManyWithoutUserInput = {
    create?: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput> | SessionCreateWithoutUserInput[] | SessionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SessionCreateOrConnectWithoutUserInput | SessionCreateOrConnectWithoutUserInput[]
    createMany?: SessionCreateManyUserInputEnvelope
    connect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
  }

  export type AccountCreateNestedManyWithoutUserInput = {
    create?: XOR<AccountCreateWithoutUserInput, AccountUncheckedCreateWithoutUserInput> | AccountCreateWithoutUserInput[] | AccountUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AccountCreateOrConnectWithoutUserInput | AccountCreateOrConnectWithoutUserInput[]
    createMany?: AccountCreateManyUserInputEnvelope
    connect?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
  }

  export type SessionUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput> | SessionCreateWithoutUserInput[] | SessionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SessionCreateOrConnectWithoutUserInput | SessionCreateOrConnectWithoutUserInput[]
    createMany?: SessionCreateManyUserInputEnvelope
    connect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
  }

  export type AccountUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<AccountCreateWithoutUserInput, AccountUncheckedCreateWithoutUserInput> | AccountCreateWithoutUserInput[] | AccountUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AccountCreateOrConnectWithoutUserInput | AccountCreateOrConnectWithoutUserInput[]
    createMany?: AccountCreateManyUserInputEnvelope
    connect?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
  }

  export type SessionUpdateManyWithoutUserNestedInput = {
    create?: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput> | SessionCreateWithoutUserInput[] | SessionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SessionCreateOrConnectWithoutUserInput | SessionCreateOrConnectWithoutUserInput[]
    upsert?: SessionUpsertWithWhereUniqueWithoutUserInput | SessionUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: SessionCreateManyUserInputEnvelope
    set?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    disconnect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    delete?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    connect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    update?: SessionUpdateWithWhereUniqueWithoutUserInput | SessionUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: SessionUpdateManyWithWhereWithoutUserInput | SessionUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: SessionScalarWhereInput | SessionScalarWhereInput[]
  }

  export type AccountUpdateManyWithoutUserNestedInput = {
    create?: XOR<AccountCreateWithoutUserInput, AccountUncheckedCreateWithoutUserInput> | AccountCreateWithoutUserInput[] | AccountUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AccountCreateOrConnectWithoutUserInput | AccountCreateOrConnectWithoutUserInput[]
    upsert?: AccountUpsertWithWhereUniqueWithoutUserInput | AccountUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: AccountCreateManyUserInputEnvelope
    set?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    disconnect?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    delete?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    connect?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    update?: AccountUpdateWithWhereUniqueWithoutUserInput | AccountUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: AccountUpdateManyWithWhereWithoutUserInput | AccountUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: AccountScalarWhereInput | AccountScalarWhereInput[]
  }

  export type SessionUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput> | SessionCreateWithoutUserInput[] | SessionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SessionCreateOrConnectWithoutUserInput | SessionCreateOrConnectWithoutUserInput[]
    upsert?: SessionUpsertWithWhereUniqueWithoutUserInput | SessionUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: SessionCreateManyUserInputEnvelope
    set?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    disconnect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    delete?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    connect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    update?: SessionUpdateWithWhereUniqueWithoutUserInput | SessionUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: SessionUpdateManyWithWhereWithoutUserInput | SessionUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: SessionScalarWhereInput | SessionScalarWhereInput[]
  }

  export type AccountUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<AccountCreateWithoutUserInput, AccountUncheckedCreateWithoutUserInput> | AccountCreateWithoutUserInput[] | AccountUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AccountCreateOrConnectWithoutUserInput | AccountCreateOrConnectWithoutUserInput[]
    upsert?: AccountUpsertWithWhereUniqueWithoutUserInput | AccountUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: AccountCreateManyUserInputEnvelope
    set?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    disconnect?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    delete?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    connect?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    update?: AccountUpdateWithWhereUniqueWithoutUserInput | AccountUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: AccountUpdateManyWithWhereWithoutUserInput | AccountUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: AccountScalarWhereInput | AccountScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutSessionsInput = {
    create?: XOR<UserCreateWithoutSessionsInput, UserUncheckedCreateWithoutSessionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutSessionsInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutSessionsNestedInput = {
    create?: XOR<UserCreateWithoutSessionsInput, UserUncheckedCreateWithoutSessionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutSessionsInput
    upsert?: UserUpsertWithoutSessionsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutSessionsInput, UserUpdateWithoutSessionsInput>, UserUncheckedUpdateWithoutSessionsInput>
  }

  export type UserCreateNestedOneWithoutAccountsInput = {
    create?: XOR<UserCreateWithoutAccountsInput, UserUncheckedCreateWithoutAccountsInput>
    connectOrCreate?: UserCreateOrConnectWithoutAccountsInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutAccountsNestedInput = {
    create?: XOR<UserCreateWithoutAccountsInput, UserUncheckedCreateWithoutAccountsInput>
    connectOrCreate?: UserCreateOrConnectWithoutAccountsInput
    upsert?: UserUpsertWithoutAccountsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutAccountsInput, UserUpdateWithoutAccountsInput>, UserUncheckedUpdateWithoutAccountsInput>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedFloatNullableFilter<$PrismaModel>
    _min?: NestedFloatNullableFilter<$PrismaModel>
    _max?: NestedFloatNullableFilter<$PrismaModel>
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedEnumTeamNameNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.TeamName | EnumTeamNameFieldRefInput<$PrismaModel> | null
    in?: $Enums.TeamName[] | null
    notIn?: $Enums.TeamName[] | null
    not?: NestedEnumTeamNameNullableFilter<$PrismaModel> | $Enums.TeamName | null
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type NestedEnumTeamNameNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.TeamName | EnumTeamNameFieldRefInput<$PrismaModel> | null
    in?: $Enums.TeamName[] | null
    notIn?: $Enums.TeamName[] | null
    not?: NestedEnumTeamNameNullableWithAggregatesFilter<$PrismaModel> | $Enums.TeamName | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumTeamNameNullableFilter<$PrismaModel>
    _max?: NestedEnumTeamNameNullableFilter<$PrismaModel>
  }

  export type NestedEnumPlayerResponseNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.PlayerResponse | EnumPlayerResponseFieldRefInput<$PrismaModel> | null
    in?: $Enums.PlayerResponse[] | null
    notIn?: $Enums.PlayerResponse[] | null
    not?: NestedEnumPlayerResponseNullableFilter<$PrismaModel> | $Enums.PlayerResponse | null
  }

  export type NestedBoolNullableFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableFilter<$PrismaModel> | boolean | null
  }

  export type NestedEnumPlayerResponseNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.PlayerResponse | EnumPlayerResponseFieldRefInput<$PrismaModel> | null
    in?: $Enums.PlayerResponse[] | null
    notIn?: $Enums.PlayerResponse[] | null
    not?: NestedEnumPlayerResponseNullableWithAggregatesFilter<$PrismaModel> | $Enums.PlayerResponse | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumPlayerResponseNullableFilter<$PrismaModel>
    _max?: NestedEnumPlayerResponseNullableFilter<$PrismaModel>
  }

  export type NestedBoolNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableWithAggregatesFilter<$PrismaModel> | boolean | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedBoolNullableFilter<$PrismaModel>
    _max?: NestedBoolNullableFilter<$PrismaModel>
  }

  export type PlayerCreateWithoutArsesOfPlayerInput = {
    login: string
    isAdmin?: boolean | null
    name?: string | null
    anonymous?: boolean | null
    email?: string | null
    joined?: Date | string | null
    finished?: Date | string | null
    born?: Date | string | null
    comment?: string | null
    introducedBy?: number | null
    arsesByPlayer?: ArseCreateNestedManyWithoutRaterInput
    clubs?: ClubSupporterCreateNestedManyWithoutPlayerInput
    countries?: CountrySupporterCreateNestedManyWithoutPlayerInput
    outcomes?: OutcomeCreateNestedManyWithoutPlayerInput
    playerRecords?: PlayerRecordCreateNestedManyWithoutPlayerInput
  }

  export type PlayerUncheckedCreateWithoutArsesOfPlayerInput = {
    id?: number
    login: string
    isAdmin?: boolean | null
    name?: string | null
    anonymous?: boolean | null
    email?: string | null
    joined?: Date | string | null
    finished?: Date | string | null
    born?: Date | string | null
    comment?: string | null
    introducedBy?: number | null
    arsesByPlayer?: ArseUncheckedCreateNestedManyWithoutRaterInput
    clubs?: ClubSupporterUncheckedCreateNestedManyWithoutPlayerInput
    countries?: CountrySupporterUncheckedCreateNestedManyWithoutPlayerInput
    outcomes?: OutcomeUncheckedCreateNestedManyWithoutPlayerInput
    playerRecords?: PlayerRecordUncheckedCreateNestedManyWithoutPlayerInput
  }

  export type PlayerCreateOrConnectWithoutArsesOfPlayerInput = {
    where: PlayerWhereUniqueInput
    create: XOR<PlayerCreateWithoutArsesOfPlayerInput, PlayerUncheckedCreateWithoutArsesOfPlayerInput>
  }

  export type PlayerCreateWithoutArsesByPlayerInput = {
    login: string
    isAdmin?: boolean | null
    name?: string | null
    anonymous?: boolean | null
    email?: string | null
    joined?: Date | string | null
    finished?: Date | string | null
    born?: Date | string | null
    comment?: string | null
    introducedBy?: number | null
    arsesOfPlayer?: ArseCreateNestedManyWithoutPlayerInput
    clubs?: ClubSupporterCreateNestedManyWithoutPlayerInput
    countries?: CountrySupporterCreateNestedManyWithoutPlayerInput
    outcomes?: OutcomeCreateNestedManyWithoutPlayerInput
    playerRecords?: PlayerRecordCreateNestedManyWithoutPlayerInput
  }

  export type PlayerUncheckedCreateWithoutArsesByPlayerInput = {
    id?: number
    login: string
    isAdmin?: boolean | null
    name?: string | null
    anonymous?: boolean | null
    email?: string | null
    joined?: Date | string | null
    finished?: Date | string | null
    born?: Date | string | null
    comment?: string | null
    introducedBy?: number | null
    arsesOfPlayer?: ArseUncheckedCreateNestedManyWithoutPlayerInput
    clubs?: ClubSupporterUncheckedCreateNestedManyWithoutPlayerInput
    countries?: CountrySupporterUncheckedCreateNestedManyWithoutPlayerInput
    outcomes?: OutcomeUncheckedCreateNestedManyWithoutPlayerInput
    playerRecords?: PlayerRecordUncheckedCreateNestedManyWithoutPlayerInput
  }

  export type PlayerCreateOrConnectWithoutArsesByPlayerInput = {
    where: PlayerWhereUniqueInput
    create: XOR<PlayerCreateWithoutArsesByPlayerInput, PlayerUncheckedCreateWithoutArsesByPlayerInput>
  }

  export type PlayerUpsertWithoutArsesOfPlayerInput = {
    update: XOR<PlayerUpdateWithoutArsesOfPlayerInput, PlayerUncheckedUpdateWithoutArsesOfPlayerInput>
    create: XOR<PlayerCreateWithoutArsesOfPlayerInput, PlayerUncheckedCreateWithoutArsesOfPlayerInput>
    where?: PlayerWhereInput
  }

  export type PlayerUpdateToOneWithWhereWithoutArsesOfPlayerInput = {
    where?: PlayerWhereInput
    data: XOR<PlayerUpdateWithoutArsesOfPlayerInput, PlayerUncheckedUpdateWithoutArsesOfPlayerInput>
  }

  export type PlayerUpdateWithoutArsesOfPlayerInput = {
    login?: StringFieldUpdateOperationsInput | string
    isAdmin?: NullableBoolFieldUpdateOperationsInput | boolean | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    anonymous?: NullableBoolFieldUpdateOperationsInput | boolean | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    joined?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    finished?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    born?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    introducedBy?: NullableIntFieldUpdateOperationsInput | number | null
    arsesByPlayer?: ArseUpdateManyWithoutRaterNestedInput
    clubs?: ClubSupporterUpdateManyWithoutPlayerNestedInput
    countries?: CountrySupporterUpdateManyWithoutPlayerNestedInput
    outcomes?: OutcomeUpdateManyWithoutPlayerNestedInput
    playerRecords?: PlayerRecordUpdateManyWithoutPlayerNestedInput
  }

  export type PlayerUncheckedUpdateWithoutArsesOfPlayerInput = {
    id?: IntFieldUpdateOperationsInput | number
    login?: StringFieldUpdateOperationsInput | string
    isAdmin?: NullableBoolFieldUpdateOperationsInput | boolean | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    anonymous?: NullableBoolFieldUpdateOperationsInput | boolean | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    joined?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    finished?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    born?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    introducedBy?: NullableIntFieldUpdateOperationsInput | number | null
    arsesByPlayer?: ArseUncheckedUpdateManyWithoutRaterNestedInput
    clubs?: ClubSupporterUncheckedUpdateManyWithoutPlayerNestedInput
    countries?: CountrySupporterUncheckedUpdateManyWithoutPlayerNestedInput
    outcomes?: OutcomeUncheckedUpdateManyWithoutPlayerNestedInput
    playerRecords?: PlayerRecordUncheckedUpdateManyWithoutPlayerNestedInput
  }

  export type PlayerUpsertWithoutArsesByPlayerInput = {
    update: XOR<PlayerUpdateWithoutArsesByPlayerInput, PlayerUncheckedUpdateWithoutArsesByPlayerInput>
    create: XOR<PlayerCreateWithoutArsesByPlayerInput, PlayerUncheckedCreateWithoutArsesByPlayerInput>
    where?: PlayerWhereInput
  }

  export type PlayerUpdateToOneWithWhereWithoutArsesByPlayerInput = {
    where?: PlayerWhereInput
    data: XOR<PlayerUpdateWithoutArsesByPlayerInput, PlayerUncheckedUpdateWithoutArsesByPlayerInput>
  }

  export type PlayerUpdateWithoutArsesByPlayerInput = {
    login?: StringFieldUpdateOperationsInput | string
    isAdmin?: NullableBoolFieldUpdateOperationsInput | boolean | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    anonymous?: NullableBoolFieldUpdateOperationsInput | boolean | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    joined?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    finished?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    born?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    introducedBy?: NullableIntFieldUpdateOperationsInput | number | null
    arsesOfPlayer?: ArseUpdateManyWithoutPlayerNestedInput
    clubs?: ClubSupporterUpdateManyWithoutPlayerNestedInput
    countries?: CountrySupporterUpdateManyWithoutPlayerNestedInput
    outcomes?: OutcomeUpdateManyWithoutPlayerNestedInput
    playerRecords?: PlayerRecordUpdateManyWithoutPlayerNestedInput
  }

  export type PlayerUncheckedUpdateWithoutArsesByPlayerInput = {
    id?: IntFieldUpdateOperationsInput | number
    login?: StringFieldUpdateOperationsInput | string
    isAdmin?: NullableBoolFieldUpdateOperationsInput | boolean | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    anonymous?: NullableBoolFieldUpdateOperationsInput | boolean | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    joined?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    finished?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    born?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    introducedBy?: NullableIntFieldUpdateOperationsInput | number | null
    arsesOfPlayer?: ArseUncheckedUpdateManyWithoutPlayerNestedInput
    clubs?: ClubSupporterUncheckedUpdateManyWithoutPlayerNestedInput
    countries?: CountrySupporterUncheckedUpdateManyWithoutPlayerNestedInput
    outcomes?: OutcomeUncheckedUpdateManyWithoutPlayerNestedInput
    playerRecords?: PlayerRecordUncheckedUpdateManyWithoutPlayerNestedInput
  }

  export type ClubSupporterCreateWithoutClubInput = {
    player: PlayerCreateNestedOneWithoutClubsInput
  }

  export type ClubSupporterUncheckedCreateWithoutClubInput = {
    playerId: number
  }

  export type ClubSupporterCreateOrConnectWithoutClubInput = {
    where: ClubSupporterWhereUniqueInput
    create: XOR<ClubSupporterCreateWithoutClubInput, ClubSupporterUncheckedCreateWithoutClubInput>
  }

  export type ClubSupporterCreateManyClubInputEnvelope = {
    data: ClubSupporterCreateManyClubInput | ClubSupporterCreateManyClubInput[]
    skipDuplicates?: boolean
  }

  export type ClubSupporterUpsertWithWhereUniqueWithoutClubInput = {
    where: ClubSupporterWhereUniqueInput
    update: XOR<ClubSupporterUpdateWithoutClubInput, ClubSupporterUncheckedUpdateWithoutClubInput>
    create: XOR<ClubSupporterCreateWithoutClubInput, ClubSupporterUncheckedCreateWithoutClubInput>
  }

  export type ClubSupporterUpdateWithWhereUniqueWithoutClubInput = {
    where: ClubSupporterWhereUniqueInput
    data: XOR<ClubSupporterUpdateWithoutClubInput, ClubSupporterUncheckedUpdateWithoutClubInput>
  }

  export type ClubSupporterUpdateManyWithWhereWithoutClubInput = {
    where: ClubSupporterScalarWhereInput
    data: XOR<ClubSupporterUpdateManyMutationInput, ClubSupporterUncheckedUpdateManyWithoutClubInput>
  }

  export type ClubSupporterScalarWhereInput = {
    AND?: ClubSupporterScalarWhereInput | ClubSupporterScalarWhereInput[]
    OR?: ClubSupporterScalarWhereInput[]
    NOT?: ClubSupporterScalarWhereInput | ClubSupporterScalarWhereInput[]
    playerId?: IntFilter<"ClubSupporter"> | number
    clubId?: IntFilter<"ClubSupporter"> | number
  }

  export type PlayerCreateWithoutClubsInput = {
    login: string
    isAdmin?: boolean | null
    name?: string | null
    anonymous?: boolean | null
    email?: string | null
    joined?: Date | string | null
    finished?: Date | string | null
    born?: Date | string | null
    comment?: string | null
    introducedBy?: number | null
    arsesOfPlayer?: ArseCreateNestedManyWithoutPlayerInput
    arsesByPlayer?: ArseCreateNestedManyWithoutRaterInput
    countries?: CountrySupporterCreateNestedManyWithoutPlayerInput
    outcomes?: OutcomeCreateNestedManyWithoutPlayerInput
    playerRecords?: PlayerRecordCreateNestedManyWithoutPlayerInput
  }

  export type PlayerUncheckedCreateWithoutClubsInput = {
    id?: number
    login: string
    isAdmin?: boolean | null
    name?: string | null
    anonymous?: boolean | null
    email?: string | null
    joined?: Date | string | null
    finished?: Date | string | null
    born?: Date | string | null
    comment?: string | null
    introducedBy?: number | null
    arsesOfPlayer?: ArseUncheckedCreateNestedManyWithoutPlayerInput
    arsesByPlayer?: ArseUncheckedCreateNestedManyWithoutRaterInput
    countries?: CountrySupporterUncheckedCreateNestedManyWithoutPlayerInput
    outcomes?: OutcomeUncheckedCreateNestedManyWithoutPlayerInput
    playerRecords?: PlayerRecordUncheckedCreateNestedManyWithoutPlayerInput
  }

  export type PlayerCreateOrConnectWithoutClubsInput = {
    where: PlayerWhereUniqueInput
    create: XOR<PlayerCreateWithoutClubsInput, PlayerUncheckedCreateWithoutClubsInput>
  }

  export type ClubCreateWithoutSupportersInput = {
    soccerwayId?: number | null
    clubName: string
    uri?: string | null
    country?: string | null
  }

  export type ClubUncheckedCreateWithoutSupportersInput = {
    id?: number
    soccerwayId?: number | null
    clubName: string
    uri?: string | null
    country?: string | null
  }

  export type ClubCreateOrConnectWithoutSupportersInput = {
    where: ClubWhereUniqueInput
    create: XOR<ClubCreateWithoutSupportersInput, ClubUncheckedCreateWithoutSupportersInput>
  }

  export type PlayerUpsertWithoutClubsInput = {
    update: XOR<PlayerUpdateWithoutClubsInput, PlayerUncheckedUpdateWithoutClubsInput>
    create: XOR<PlayerCreateWithoutClubsInput, PlayerUncheckedCreateWithoutClubsInput>
    where?: PlayerWhereInput
  }

  export type PlayerUpdateToOneWithWhereWithoutClubsInput = {
    where?: PlayerWhereInput
    data: XOR<PlayerUpdateWithoutClubsInput, PlayerUncheckedUpdateWithoutClubsInput>
  }

  export type PlayerUpdateWithoutClubsInput = {
    login?: StringFieldUpdateOperationsInput | string
    isAdmin?: NullableBoolFieldUpdateOperationsInput | boolean | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    anonymous?: NullableBoolFieldUpdateOperationsInput | boolean | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    joined?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    finished?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    born?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    introducedBy?: NullableIntFieldUpdateOperationsInput | number | null
    arsesOfPlayer?: ArseUpdateManyWithoutPlayerNestedInput
    arsesByPlayer?: ArseUpdateManyWithoutRaterNestedInput
    countries?: CountrySupporterUpdateManyWithoutPlayerNestedInput
    outcomes?: OutcomeUpdateManyWithoutPlayerNestedInput
    playerRecords?: PlayerRecordUpdateManyWithoutPlayerNestedInput
  }

  export type PlayerUncheckedUpdateWithoutClubsInput = {
    id?: IntFieldUpdateOperationsInput | number
    login?: StringFieldUpdateOperationsInput | string
    isAdmin?: NullableBoolFieldUpdateOperationsInput | boolean | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    anonymous?: NullableBoolFieldUpdateOperationsInput | boolean | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    joined?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    finished?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    born?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    introducedBy?: NullableIntFieldUpdateOperationsInput | number | null
    arsesOfPlayer?: ArseUncheckedUpdateManyWithoutPlayerNestedInput
    arsesByPlayer?: ArseUncheckedUpdateManyWithoutRaterNestedInput
    countries?: CountrySupporterUncheckedUpdateManyWithoutPlayerNestedInput
    outcomes?: OutcomeUncheckedUpdateManyWithoutPlayerNestedInput
    playerRecords?: PlayerRecordUncheckedUpdateManyWithoutPlayerNestedInput
  }

  export type ClubUpsertWithoutSupportersInput = {
    update: XOR<ClubUpdateWithoutSupportersInput, ClubUncheckedUpdateWithoutSupportersInput>
    create: XOR<ClubCreateWithoutSupportersInput, ClubUncheckedCreateWithoutSupportersInput>
    where?: ClubWhereInput
  }

  export type ClubUpdateToOneWithWhereWithoutSupportersInput = {
    where?: ClubWhereInput
    data: XOR<ClubUpdateWithoutSupportersInput, ClubUncheckedUpdateWithoutSupportersInput>
  }

  export type ClubUpdateWithoutSupportersInput = {
    soccerwayId?: NullableIntFieldUpdateOperationsInput | number | null
    clubName?: StringFieldUpdateOperationsInput | string
    uri?: NullableStringFieldUpdateOperationsInput | string | null
    country?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ClubUncheckedUpdateWithoutSupportersInput = {
    id?: IntFieldUpdateOperationsInput | number
    soccerwayId?: NullableIntFieldUpdateOperationsInput | number | null
    clubName?: StringFieldUpdateOperationsInput | string
    uri?: NullableStringFieldUpdateOperationsInput | string | null
    country?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type CountrySupporterCreateWithoutCountryInput = {
    player: PlayerCreateNestedOneWithoutCountriesInput
  }

  export type CountrySupporterUncheckedCreateWithoutCountryInput = {
    playerId: number
  }

  export type CountrySupporterCreateOrConnectWithoutCountryInput = {
    where: CountrySupporterWhereUniqueInput
    create: XOR<CountrySupporterCreateWithoutCountryInput, CountrySupporterUncheckedCreateWithoutCountryInput>
  }

  export type CountrySupporterCreateManyCountryInputEnvelope = {
    data: CountrySupporterCreateManyCountryInput | CountrySupporterCreateManyCountryInput[]
    skipDuplicates?: boolean
  }

  export type CountrySupporterUpsertWithWhereUniqueWithoutCountryInput = {
    where: CountrySupporterWhereUniqueInput
    update: XOR<CountrySupporterUpdateWithoutCountryInput, CountrySupporterUncheckedUpdateWithoutCountryInput>
    create: XOR<CountrySupporterCreateWithoutCountryInput, CountrySupporterUncheckedCreateWithoutCountryInput>
  }

  export type CountrySupporterUpdateWithWhereUniqueWithoutCountryInput = {
    where: CountrySupporterWhereUniqueInput
    data: XOR<CountrySupporterUpdateWithoutCountryInput, CountrySupporterUncheckedUpdateWithoutCountryInput>
  }

  export type CountrySupporterUpdateManyWithWhereWithoutCountryInput = {
    where: CountrySupporterScalarWhereInput
    data: XOR<CountrySupporterUpdateManyMutationInput, CountrySupporterUncheckedUpdateManyWithoutCountryInput>
  }

  export type CountrySupporterScalarWhereInput = {
    AND?: CountrySupporterScalarWhereInput | CountrySupporterScalarWhereInput[]
    OR?: CountrySupporterScalarWhereInput[]
    NOT?: CountrySupporterScalarWhereInput | CountrySupporterScalarWhereInput[]
    playerId?: IntFilter<"CountrySupporter"> | number
    countryISOCode?: StringFilter<"CountrySupporter"> | string
  }

  export type CountryCreateWithoutSupportersInput = {
    isoCode: string
    name: string
  }

  export type CountryUncheckedCreateWithoutSupportersInput = {
    isoCode: string
    name: string
  }

  export type CountryCreateOrConnectWithoutSupportersInput = {
    where: CountryWhereUniqueInput
    create: XOR<CountryCreateWithoutSupportersInput, CountryUncheckedCreateWithoutSupportersInput>
  }

  export type PlayerCreateWithoutCountriesInput = {
    login: string
    isAdmin?: boolean | null
    name?: string | null
    anonymous?: boolean | null
    email?: string | null
    joined?: Date | string | null
    finished?: Date | string | null
    born?: Date | string | null
    comment?: string | null
    introducedBy?: number | null
    arsesOfPlayer?: ArseCreateNestedManyWithoutPlayerInput
    arsesByPlayer?: ArseCreateNestedManyWithoutRaterInput
    clubs?: ClubSupporterCreateNestedManyWithoutPlayerInput
    outcomes?: OutcomeCreateNestedManyWithoutPlayerInput
    playerRecords?: PlayerRecordCreateNestedManyWithoutPlayerInput
  }

  export type PlayerUncheckedCreateWithoutCountriesInput = {
    id?: number
    login: string
    isAdmin?: boolean | null
    name?: string | null
    anonymous?: boolean | null
    email?: string | null
    joined?: Date | string | null
    finished?: Date | string | null
    born?: Date | string | null
    comment?: string | null
    introducedBy?: number | null
    arsesOfPlayer?: ArseUncheckedCreateNestedManyWithoutPlayerInput
    arsesByPlayer?: ArseUncheckedCreateNestedManyWithoutRaterInput
    clubs?: ClubSupporterUncheckedCreateNestedManyWithoutPlayerInput
    outcomes?: OutcomeUncheckedCreateNestedManyWithoutPlayerInput
    playerRecords?: PlayerRecordUncheckedCreateNestedManyWithoutPlayerInput
  }

  export type PlayerCreateOrConnectWithoutCountriesInput = {
    where: PlayerWhereUniqueInput
    create: XOR<PlayerCreateWithoutCountriesInput, PlayerUncheckedCreateWithoutCountriesInput>
  }

  export type CountryUpsertWithoutSupportersInput = {
    update: XOR<CountryUpdateWithoutSupportersInput, CountryUncheckedUpdateWithoutSupportersInput>
    create: XOR<CountryCreateWithoutSupportersInput, CountryUncheckedCreateWithoutSupportersInput>
    where?: CountryWhereInput
  }

  export type CountryUpdateToOneWithWhereWithoutSupportersInput = {
    where?: CountryWhereInput
    data: XOR<CountryUpdateWithoutSupportersInput, CountryUncheckedUpdateWithoutSupportersInput>
  }

  export type CountryUpdateWithoutSupportersInput = {
    isoCode?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
  }

  export type CountryUncheckedUpdateWithoutSupportersInput = {
    isoCode?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
  }

  export type PlayerUpsertWithoutCountriesInput = {
    update: XOR<PlayerUpdateWithoutCountriesInput, PlayerUncheckedUpdateWithoutCountriesInput>
    create: XOR<PlayerCreateWithoutCountriesInput, PlayerUncheckedCreateWithoutCountriesInput>
    where?: PlayerWhereInput
  }

  export type PlayerUpdateToOneWithWhereWithoutCountriesInput = {
    where?: PlayerWhereInput
    data: XOR<PlayerUpdateWithoutCountriesInput, PlayerUncheckedUpdateWithoutCountriesInput>
  }

  export type PlayerUpdateWithoutCountriesInput = {
    login?: StringFieldUpdateOperationsInput | string
    isAdmin?: NullableBoolFieldUpdateOperationsInput | boolean | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    anonymous?: NullableBoolFieldUpdateOperationsInput | boolean | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    joined?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    finished?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    born?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    introducedBy?: NullableIntFieldUpdateOperationsInput | number | null
    arsesOfPlayer?: ArseUpdateManyWithoutPlayerNestedInput
    arsesByPlayer?: ArseUpdateManyWithoutRaterNestedInput
    clubs?: ClubSupporterUpdateManyWithoutPlayerNestedInput
    outcomes?: OutcomeUpdateManyWithoutPlayerNestedInput
    playerRecords?: PlayerRecordUpdateManyWithoutPlayerNestedInput
  }

  export type PlayerUncheckedUpdateWithoutCountriesInput = {
    id?: IntFieldUpdateOperationsInput | number
    login?: StringFieldUpdateOperationsInput | string
    isAdmin?: NullableBoolFieldUpdateOperationsInput | boolean | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    anonymous?: NullableBoolFieldUpdateOperationsInput | boolean | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    joined?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    finished?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    born?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    introducedBy?: NullableIntFieldUpdateOperationsInput | number | null
    arsesOfPlayer?: ArseUncheckedUpdateManyWithoutPlayerNestedInput
    arsesByPlayer?: ArseUncheckedUpdateManyWithoutRaterNestedInput
    clubs?: ClubSupporterUncheckedUpdateManyWithoutPlayerNestedInput
    outcomes?: OutcomeUncheckedUpdateManyWithoutPlayerNestedInput
    playerRecords?: PlayerRecordUncheckedUpdateManyWithoutPlayerNestedInput
  }

  export type OutcomeCreateWithoutGameDayInput = {
    response?: $Enums.PlayerResponse | null
    responseInterval?: number | null
    points?: number | null
    team?: $Enums.TeamName | null
    comment?: string | null
    pub?: number | null
    paid?: boolean | null
    goalie?: boolean | null
    player: PlayerCreateNestedOneWithoutOutcomesInput
  }

  export type OutcomeUncheckedCreateWithoutGameDayInput = {
    id?: number
    response?: $Enums.PlayerResponse | null
    responseInterval?: number | null
    points?: number | null
    team?: $Enums.TeamName | null
    comment?: string | null
    pub?: number | null
    paid?: boolean | null
    goalie?: boolean | null
    playerId: number
  }

  export type OutcomeCreateOrConnectWithoutGameDayInput = {
    where: OutcomeWhereUniqueInput
    create: XOR<OutcomeCreateWithoutGameDayInput, OutcomeUncheckedCreateWithoutGameDayInput>
  }

  export type OutcomeCreateManyGameDayInputEnvelope = {
    data: OutcomeCreateManyGameDayInput | OutcomeCreateManyGameDayInput[]
    skipDuplicates?: boolean
  }

  export type PlayerRecordCreateWithoutGameDayInput = {
    year: number
    responses?: number | null
    played?: number | null
    won?: number | null
    drawn?: number | null
    lost?: number | null
    points?: number | null
    averages?: number | null
    stalwart?: number | null
    pub?: number | null
    rankPoints?: number | null
    rankAverages?: number | null
    rankAveragesUnqualified?: number | null
    rankStalwart?: number | null
    rankSpeedy?: number | null
    rankSpeedyUnqualified?: number | null
    rankPub?: number | null
    speedy?: number | null
    player: PlayerCreateNestedOneWithoutPlayerRecordsInput
  }

  export type PlayerRecordUncheckedCreateWithoutGameDayInput = {
    id?: number
    year: number
    responses?: number | null
    played?: number | null
    won?: number | null
    drawn?: number | null
    lost?: number | null
    points?: number | null
    averages?: number | null
    stalwart?: number | null
    pub?: number | null
    rankPoints?: number | null
    rankAverages?: number | null
    rankAveragesUnqualified?: number | null
    rankStalwart?: number | null
    rankSpeedy?: number | null
    rankSpeedyUnqualified?: number | null
    rankPub?: number | null
    speedy?: number | null
    playerId: number
  }

  export type PlayerRecordCreateOrConnectWithoutGameDayInput = {
    where: PlayerRecordWhereUniqueInput
    create: XOR<PlayerRecordCreateWithoutGameDayInput, PlayerRecordUncheckedCreateWithoutGameDayInput>
  }

  export type PlayerRecordCreateManyGameDayInputEnvelope = {
    data: PlayerRecordCreateManyGameDayInput | PlayerRecordCreateManyGameDayInput[]
    skipDuplicates?: boolean
  }

  export type OutcomeUpsertWithWhereUniqueWithoutGameDayInput = {
    where: OutcomeWhereUniqueInput
    update: XOR<OutcomeUpdateWithoutGameDayInput, OutcomeUncheckedUpdateWithoutGameDayInput>
    create: XOR<OutcomeCreateWithoutGameDayInput, OutcomeUncheckedCreateWithoutGameDayInput>
  }

  export type OutcomeUpdateWithWhereUniqueWithoutGameDayInput = {
    where: OutcomeWhereUniqueInput
    data: XOR<OutcomeUpdateWithoutGameDayInput, OutcomeUncheckedUpdateWithoutGameDayInput>
  }

  export type OutcomeUpdateManyWithWhereWithoutGameDayInput = {
    where: OutcomeScalarWhereInput
    data: XOR<OutcomeUpdateManyMutationInput, OutcomeUncheckedUpdateManyWithoutGameDayInput>
  }

  export type OutcomeScalarWhereInput = {
    AND?: OutcomeScalarWhereInput | OutcomeScalarWhereInput[]
    OR?: OutcomeScalarWhereInput[]
    NOT?: OutcomeScalarWhereInput | OutcomeScalarWhereInput[]
    id?: IntFilter<"Outcome"> | number
    response?: EnumPlayerResponseNullableFilter<"Outcome"> | $Enums.PlayerResponse | null
    responseInterval?: IntNullableFilter<"Outcome"> | number | null
    points?: IntNullableFilter<"Outcome"> | number | null
    team?: EnumTeamNameNullableFilter<"Outcome"> | $Enums.TeamName | null
    comment?: StringNullableFilter<"Outcome"> | string | null
    pub?: IntNullableFilter<"Outcome"> | number | null
    paid?: BoolNullableFilter<"Outcome"> | boolean | null
    goalie?: BoolNullableFilter<"Outcome"> | boolean | null
    gameDayId?: IntFilter<"Outcome"> | number
    playerId?: IntFilter<"Outcome"> | number
  }

  export type PlayerRecordUpsertWithWhereUniqueWithoutGameDayInput = {
    where: PlayerRecordWhereUniqueInput
    update: XOR<PlayerRecordUpdateWithoutGameDayInput, PlayerRecordUncheckedUpdateWithoutGameDayInput>
    create: XOR<PlayerRecordCreateWithoutGameDayInput, PlayerRecordUncheckedCreateWithoutGameDayInput>
  }

  export type PlayerRecordUpdateWithWhereUniqueWithoutGameDayInput = {
    where: PlayerRecordWhereUniqueInput
    data: XOR<PlayerRecordUpdateWithoutGameDayInput, PlayerRecordUncheckedUpdateWithoutGameDayInput>
  }

  export type PlayerRecordUpdateManyWithWhereWithoutGameDayInput = {
    where: PlayerRecordScalarWhereInput
    data: XOR<PlayerRecordUpdateManyMutationInput, PlayerRecordUncheckedUpdateManyWithoutGameDayInput>
  }

  export type PlayerRecordScalarWhereInput = {
    AND?: PlayerRecordScalarWhereInput | PlayerRecordScalarWhereInput[]
    OR?: PlayerRecordScalarWhereInput[]
    NOT?: PlayerRecordScalarWhereInput | PlayerRecordScalarWhereInput[]
    id?: IntFilter<"PlayerRecord"> | number
    year?: IntFilter<"PlayerRecord"> | number
    responses?: IntNullableFilter<"PlayerRecord"> | number | null
    played?: IntNullableFilter<"PlayerRecord"> | number | null
    won?: IntNullableFilter<"PlayerRecord"> | number | null
    drawn?: IntNullableFilter<"PlayerRecord"> | number | null
    lost?: IntNullableFilter<"PlayerRecord"> | number | null
    points?: IntNullableFilter<"PlayerRecord"> | number | null
    averages?: FloatNullableFilter<"PlayerRecord"> | number | null
    stalwart?: IntNullableFilter<"PlayerRecord"> | number | null
    pub?: IntNullableFilter<"PlayerRecord"> | number | null
    rankPoints?: IntNullableFilter<"PlayerRecord"> | number | null
    rankAverages?: IntNullableFilter<"PlayerRecord"> | number | null
    rankAveragesUnqualified?: IntNullableFilter<"PlayerRecord"> | number | null
    rankStalwart?: IntNullableFilter<"PlayerRecord"> | number | null
    rankSpeedy?: IntNullableFilter<"PlayerRecord"> | number | null
    rankSpeedyUnqualified?: IntNullableFilter<"PlayerRecord"> | number | null
    rankPub?: IntNullableFilter<"PlayerRecord"> | number | null
    speedy?: IntNullableFilter<"PlayerRecord"> | number | null
    playerId?: IntFilter<"PlayerRecord"> | number
    gameDayId?: IntFilter<"PlayerRecord"> | number
  }

  export type GameDayCreateWithoutOutcomesInput = {
    year: number
    date: Date | string
    game?: boolean
    mailSent?: Date | string | null
    comment?: string | null
    bibs?: $Enums.TeamName | null
    pickerGamesHistory?: number | null
    playerRecords?: PlayerRecordCreateNestedManyWithoutGameDayInput
  }

  export type GameDayUncheckedCreateWithoutOutcomesInput = {
    id?: number
    year: number
    date: Date | string
    game?: boolean
    mailSent?: Date | string | null
    comment?: string | null
    bibs?: $Enums.TeamName | null
    pickerGamesHistory?: number | null
    playerRecords?: PlayerRecordUncheckedCreateNestedManyWithoutGameDayInput
  }

  export type GameDayCreateOrConnectWithoutOutcomesInput = {
    where: GameDayWhereUniqueInput
    create: XOR<GameDayCreateWithoutOutcomesInput, GameDayUncheckedCreateWithoutOutcomesInput>
  }

  export type PlayerCreateWithoutOutcomesInput = {
    login: string
    isAdmin?: boolean | null
    name?: string | null
    anonymous?: boolean | null
    email?: string | null
    joined?: Date | string | null
    finished?: Date | string | null
    born?: Date | string | null
    comment?: string | null
    introducedBy?: number | null
    arsesOfPlayer?: ArseCreateNestedManyWithoutPlayerInput
    arsesByPlayer?: ArseCreateNestedManyWithoutRaterInput
    clubs?: ClubSupporterCreateNestedManyWithoutPlayerInput
    countries?: CountrySupporterCreateNestedManyWithoutPlayerInput
    playerRecords?: PlayerRecordCreateNestedManyWithoutPlayerInput
  }

  export type PlayerUncheckedCreateWithoutOutcomesInput = {
    id?: number
    login: string
    isAdmin?: boolean | null
    name?: string | null
    anonymous?: boolean | null
    email?: string | null
    joined?: Date | string | null
    finished?: Date | string | null
    born?: Date | string | null
    comment?: string | null
    introducedBy?: number | null
    arsesOfPlayer?: ArseUncheckedCreateNestedManyWithoutPlayerInput
    arsesByPlayer?: ArseUncheckedCreateNestedManyWithoutRaterInput
    clubs?: ClubSupporterUncheckedCreateNestedManyWithoutPlayerInput
    countries?: CountrySupporterUncheckedCreateNestedManyWithoutPlayerInput
    playerRecords?: PlayerRecordUncheckedCreateNestedManyWithoutPlayerInput
  }

  export type PlayerCreateOrConnectWithoutOutcomesInput = {
    where: PlayerWhereUniqueInput
    create: XOR<PlayerCreateWithoutOutcomesInput, PlayerUncheckedCreateWithoutOutcomesInput>
  }

  export type GameDayUpsertWithoutOutcomesInput = {
    update: XOR<GameDayUpdateWithoutOutcomesInput, GameDayUncheckedUpdateWithoutOutcomesInput>
    create: XOR<GameDayCreateWithoutOutcomesInput, GameDayUncheckedCreateWithoutOutcomesInput>
    where?: GameDayWhereInput
  }

  export type GameDayUpdateToOneWithWhereWithoutOutcomesInput = {
    where?: GameDayWhereInput
    data: XOR<GameDayUpdateWithoutOutcomesInput, GameDayUncheckedUpdateWithoutOutcomesInput>
  }

  export type GameDayUpdateWithoutOutcomesInput = {
    year?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    game?: BoolFieldUpdateOperationsInput | boolean
    mailSent?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    bibs?: NullableEnumTeamNameFieldUpdateOperationsInput | $Enums.TeamName | null
    pickerGamesHistory?: NullableIntFieldUpdateOperationsInput | number | null
    playerRecords?: PlayerRecordUpdateManyWithoutGameDayNestedInput
  }

  export type GameDayUncheckedUpdateWithoutOutcomesInput = {
    id?: IntFieldUpdateOperationsInput | number
    year?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    game?: BoolFieldUpdateOperationsInput | boolean
    mailSent?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    bibs?: NullableEnumTeamNameFieldUpdateOperationsInput | $Enums.TeamName | null
    pickerGamesHistory?: NullableIntFieldUpdateOperationsInput | number | null
    playerRecords?: PlayerRecordUncheckedUpdateManyWithoutGameDayNestedInput
  }

  export type PlayerUpsertWithoutOutcomesInput = {
    update: XOR<PlayerUpdateWithoutOutcomesInput, PlayerUncheckedUpdateWithoutOutcomesInput>
    create: XOR<PlayerCreateWithoutOutcomesInput, PlayerUncheckedCreateWithoutOutcomesInput>
    where?: PlayerWhereInput
  }

  export type PlayerUpdateToOneWithWhereWithoutOutcomesInput = {
    where?: PlayerWhereInput
    data: XOR<PlayerUpdateWithoutOutcomesInput, PlayerUncheckedUpdateWithoutOutcomesInput>
  }

  export type PlayerUpdateWithoutOutcomesInput = {
    login?: StringFieldUpdateOperationsInput | string
    isAdmin?: NullableBoolFieldUpdateOperationsInput | boolean | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    anonymous?: NullableBoolFieldUpdateOperationsInput | boolean | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    joined?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    finished?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    born?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    introducedBy?: NullableIntFieldUpdateOperationsInput | number | null
    arsesOfPlayer?: ArseUpdateManyWithoutPlayerNestedInput
    arsesByPlayer?: ArseUpdateManyWithoutRaterNestedInput
    clubs?: ClubSupporterUpdateManyWithoutPlayerNestedInput
    countries?: CountrySupporterUpdateManyWithoutPlayerNestedInput
    playerRecords?: PlayerRecordUpdateManyWithoutPlayerNestedInput
  }

  export type PlayerUncheckedUpdateWithoutOutcomesInput = {
    id?: IntFieldUpdateOperationsInput | number
    login?: StringFieldUpdateOperationsInput | string
    isAdmin?: NullableBoolFieldUpdateOperationsInput | boolean | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    anonymous?: NullableBoolFieldUpdateOperationsInput | boolean | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    joined?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    finished?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    born?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    introducedBy?: NullableIntFieldUpdateOperationsInput | number | null
    arsesOfPlayer?: ArseUncheckedUpdateManyWithoutPlayerNestedInput
    arsesByPlayer?: ArseUncheckedUpdateManyWithoutRaterNestedInput
    clubs?: ClubSupporterUncheckedUpdateManyWithoutPlayerNestedInput
    countries?: CountrySupporterUncheckedUpdateManyWithoutPlayerNestedInput
    playerRecords?: PlayerRecordUncheckedUpdateManyWithoutPlayerNestedInput
  }

  export type ArseCreateWithoutPlayerInput = {
    stamp?: Date | string
    inGoal?: number | null
    running?: number | null
    shooting?: number | null
    passing?: number | null
    ballSkill?: number | null
    attacking?: number | null
    defending?: number | null
    rater: PlayerCreateNestedOneWithoutArsesByPlayerInput
  }

  export type ArseUncheckedCreateWithoutPlayerInput = {
    id?: number
    stamp?: Date | string
    inGoal?: number | null
    running?: number | null
    shooting?: number | null
    passing?: number | null
    ballSkill?: number | null
    attacking?: number | null
    defending?: number | null
    raterId: number
  }

  export type ArseCreateOrConnectWithoutPlayerInput = {
    where: ArseWhereUniqueInput
    create: XOR<ArseCreateWithoutPlayerInput, ArseUncheckedCreateWithoutPlayerInput>
  }

  export type ArseCreateManyPlayerInputEnvelope = {
    data: ArseCreateManyPlayerInput | ArseCreateManyPlayerInput[]
    skipDuplicates?: boolean
  }

  export type ArseCreateWithoutRaterInput = {
    stamp?: Date | string
    inGoal?: number | null
    running?: number | null
    shooting?: number | null
    passing?: number | null
    ballSkill?: number | null
    attacking?: number | null
    defending?: number | null
    player: PlayerCreateNestedOneWithoutArsesOfPlayerInput
  }

  export type ArseUncheckedCreateWithoutRaterInput = {
    id?: number
    stamp?: Date | string
    inGoal?: number | null
    running?: number | null
    shooting?: number | null
    passing?: number | null
    ballSkill?: number | null
    attacking?: number | null
    defending?: number | null
    playerId: number
  }

  export type ArseCreateOrConnectWithoutRaterInput = {
    where: ArseWhereUniqueInput
    create: XOR<ArseCreateWithoutRaterInput, ArseUncheckedCreateWithoutRaterInput>
  }

  export type ArseCreateManyRaterInputEnvelope = {
    data: ArseCreateManyRaterInput | ArseCreateManyRaterInput[]
    skipDuplicates?: boolean
  }

  export type ClubSupporterCreateWithoutPlayerInput = {
    club: ClubCreateNestedOneWithoutSupportersInput
  }

  export type ClubSupporterUncheckedCreateWithoutPlayerInput = {
    clubId: number
  }

  export type ClubSupporterCreateOrConnectWithoutPlayerInput = {
    where: ClubSupporterWhereUniqueInput
    create: XOR<ClubSupporterCreateWithoutPlayerInput, ClubSupporterUncheckedCreateWithoutPlayerInput>
  }

  export type ClubSupporterCreateManyPlayerInputEnvelope = {
    data: ClubSupporterCreateManyPlayerInput | ClubSupporterCreateManyPlayerInput[]
    skipDuplicates?: boolean
  }

  export type CountrySupporterCreateWithoutPlayerInput = {
    country: CountryCreateNestedOneWithoutSupportersInput
  }

  export type CountrySupporterUncheckedCreateWithoutPlayerInput = {
    countryISOCode: string
  }

  export type CountrySupporterCreateOrConnectWithoutPlayerInput = {
    where: CountrySupporterWhereUniqueInput
    create: XOR<CountrySupporterCreateWithoutPlayerInput, CountrySupporterUncheckedCreateWithoutPlayerInput>
  }

  export type CountrySupporterCreateManyPlayerInputEnvelope = {
    data: CountrySupporterCreateManyPlayerInput | CountrySupporterCreateManyPlayerInput[]
    skipDuplicates?: boolean
  }

  export type OutcomeCreateWithoutPlayerInput = {
    response?: $Enums.PlayerResponse | null
    responseInterval?: number | null
    points?: number | null
    team?: $Enums.TeamName | null
    comment?: string | null
    pub?: number | null
    paid?: boolean | null
    goalie?: boolean | null
    gameDay: GameDayCreateNestedOneWithoutOutcomesInput
  }

  export type OutcomeUncheckedCreateWithoutPlayerInput = {
    id?: number
    response?: $Enums.PlayerResponse | null
    responseInterval?: number | null
    points?: number | null
    team?: $Enums.TeamName | null
    comment?: string | null
    pub?: number | null
    paid?: boolean | null
    goalie?: boolean | null
    gameDayId: number
  }

  export type OutcomeCreateOrConnectWithoutPlayerInput = {
    where: OutcomeWhereUniqueInput
    create: XOR<OutcomeCreateWithoutPlayerInput, OutcomeUncheckedCreateWithoutPlayerInput>
  }

  export type OutcomeCreateManyPlayerInputEnvelope = {
    data: OutcomeCreateManyPlayerInput | OutcomeCreateManyPlayerInput[]
    skipDuplicates?: boolean
  }

  export type PlayerRecordCreateWithoutPlayerInput = {
    year: number
    responses?: number | null
    played?: number | null
    won?: number | null
    drawn?: number | null
    lost?: number | null
    points?: number | null
    averages?: number | null
    stalwart?: number | null
    pub?: number | null
    rankPoints?: number | null
    rankAverages?: number | null
    rankAveragesUnqualified?: number | null
    rankStalwart?: number | null
    rankSpeedy?: number | null
    rankSpeedyUnqualified?: number | null
    rankPub?: number | null
    speedy?: number | null
    gameDay: GameDayCreateNestedOneWithoutPlayerRecordsInput
  }

  export type PlayerRecordUncheckedCreateWithoutPlayerInput = {
    id?: number
    year: number
    responses?: number | null
    played?: number | null
    won?: number | null
    drawn?: number | null
    lost?: number | null
    points?: number | null
    averages?: number | null
    stalwart?: number | null
    pub?: number | null
    rankPoints?: number | null
    rankAverages?: number | null
    rankAveragesUnqualified?: number | null
    rankStalwart?: number | null
    rankSpeedy?: number | null
    rankSpeedyUnqualified?: number | null
    rankPub?: number | null
    speedy?: number | null
    gameDayId: number
  }

  export type PlayerRecordCreateOrConnectWithoutPlayerInput = {
    where: PlayerRecordWhereUniqueInput
    create: XOR<PlayerRecordCreateWithoutPlayerInput, PlayerRecordUncheckedCreateWithoutPlayerInput>
  }

  export type PlayerRecordCreateManyPlayerInputEnvelope = {
    data: PlayerRecordCreateManyPlayerInput | PlayerRecordCreateManyPlayerInput[]
    skipDuplicates?: boolean
  }

  export type ArseUpsertWithWhereUniqueWithoutPlayerInput = {
    where: ArseWhereUniqueInput
    update: XOR<ArseUpdateWithoutPlayerInput, ArseUncheckedUpdateWithoutPlayerInput>
    create: XOR<ArseCreateWithoutPlayerInput, ArseUncheckedCreateWithoutPlayerInput>
  }

  export type ArseUpdateWithWhereUniqueWithoutPlayerInput = {
    where: ArseWhereUniqueInput
    data: XOR<ArseUpdateWithoutPlayerInput, ArseUncheckedUpdateWithoutPlayerInput>
  }

  export type ArseUpdateManyWithWhereWithoutPlayerInput = {
    where: ArseScalarWhereInput
    data: XOR<ArseUpdateManyMutationInput, ArseUncheckedUpdateManyWithoutPlayerInput>
  }

  export type ArseScalarWhereInput = {
    AND?: ArseScalarWhereInput | ArseScalarWhereInput[]
    OR?: ArseScalarWhereInput[]
    NOT?: ArseScalarWhereInput | ArseScalarWhereInput[]
    id?: IntFilter<"Arse"> | number
    stamp?: DateTimeFilter<"Arse"> | Date | string
    inGoal?: IntNullableFilter<"Arse"> | number | null
    running?: IntNullableFilter<"Arse"> | number | null
    shooting?: IntNullableFilter<"Arse"> | number | null
    passing?: IntNullableFilter<"Arse"> | number | null
    ballSkill?: IntNullableFilter<"Arse"> | number | null
    attacking?: IntNullableFilter<"Arse"> | number | null
    defending?: IntNullableFilter<"Arse"> | number | null
    playerId?: IntFilter<"Arse"> | number
    raterId?: IntFilter<"Arse"> | number
  }

  export type ArseUpsertWithWhereUniqueWithoutRaterInput = {
    where: ArseWhereUniqueInput
    update: XOR<ArseUpdateWithoutRaterInput, ArseUncheckedUpdateWithoutRaterInput>
    create: XOR<ArseCreateWithoutRaterInput, ArseUncheckedCreateWithoutRaterInput>
  }

  export type ArseUpdateWithWhereUniqueWithoutRaterInput = {
    where: ArseWhereUniqueInput
    data: XOR<ArseUpdateWithoutRaterInput, ArseUncheckedUpdateWithoutRaterInput>
  }

  export type ArseUpdateManyWithWhereWithoutRaterInput = {
    where: ArseScalarWhereInput
    data: XOR<ArseUpdateManyMutationInput, ArseUncheckedUpdateManyWithoutRaterInput>
  }

  export type ClubSupporterUpsertWithWhereUniqueWithoutPlayerInput = {
    where: ClubSupporterWhereUniqueInput
    update: XOR<ClubSupporterUpdateWithoutPlayerInput, ClubSupporterUncheckedUpdateWithoutPlayerInput>
    create: XOR<ClubSupporterCreateWithoutPlayerInput, ClubSupporterUncheckedCreateWithoutPlayerInput>
  }

  export type ClubSupporterUpdateWithWhereUniqueWithoutPlayerInput = {
    where: ClubSupporterWhereUniqueInput
    data: XOR<ClubSupporterUpdateWithoutPlayerInput, ClubSupporterUncheckedUpdateWithoutPlayerInput>
  }

  export type ClubSupporterUpdateManyWithWhereWithoutPlayerInput = {
    where: ClubSupporterScalarWhereInput
    data: XOR<ClubSupporterUpdateManyMutationInput, ClubSupporterUncheckedUpdateManyWithoutPlayerInput>
  }

  export type CountrySupporterUpsertWithWhereUniqueWithoutPlayerInput = {
    where: CountrySupporterWhereUniqueInput
    update: XOR<CountrySupporterUpdateWithoutPlayerInput, CountrySupporterUncheckedUpdateWithoutPlayerInput>
    create: XOR<CountrySupporterCreateWithoutPlayerInput, CountrySupporterUncheckedCreateWithoutPlayerInput>
  }

  export type CountrySupporterUpdateWithWhereUniqueWithoutPlayerInput = {
    where: CountrySupporterWhereUniqueInput
    data: XOR<CountrySupporterUpdateWithoutPlayerInput, CountrySupporterUncheckedUpdateWithoutPlayerInput>
  }

  export type CountrySupporterUpdateManyWithWhereWithoutPlayerInput = {
    where: CountrySupporterScalarWhereInput
    data: XOR<CountrySupporterUpdateManyMutationInput, CountrySupporterUncheckedUpdateManyWithoutPlayerInput>
  }

  export type OutcomeUpsertWithWhereUniqueWithoutPlayerInput = {
    where: OutcomeWhereUniqueInput
    update: XOR<OutcomeUpdateWithoutPlayerInput, OutcomeUncheckedUpdateWithoutPlayerInput>
    create: XOR<OutcomeCreateWithoutPlayerInput, OutcomeUncheckedCreateWithoutPlayerInput>
  }

  export type OutcomeUpdateWithWhereUniqueWithoutPlayerInput = {
    where: OutcomeWhereUniqueInput
    data: XOR<OutcomeUpdateWithoutPlayerInput, OutcomeUncheckedUpdateWithoutPlayerInput>
  }

  export type OutcomeUpdateManyWithWhereWithoutPlayerInput = {
    where: OutcomeScalarWhereInput
    data: XOR<OutcomeUpdateManyMutationInput, OutcomeUncheckedUpdateManyWithoutPlayerInput>
  }

  export type PlayerRecordUpsertWithWhereUniqueWithoutPlayerInput = {
    where: PlayerRecordWhereUniqueInput
    update: XOR<PlayerRecordUpdateWithoutPlayerInput, PlayerRecordUncheckedUpdateWithoutPlayerInput>
    create: XOR<PlayerRecordCreateWithoutPlayerInput, PlayerRecordUncheckedCreateWithoutPlayerInput>
  }

  export type PlayerRecordUpdateWithWhereUniqueWithoutPlayerInput = {
    where: PlayerRecordWhereUniqueInput
    data: XOR<PlayerRecordUpdateWithoutPlayerInput, PlayerRecordUncheckedUpdateWithoutPlayerInput>
  }

  export type PlayerRecordUpdateManyWithWhereWithoutPlayerInput = {
    where: PlayerRecordScalarWhereInput
    data: XOR<PlayerRecordUpdateManyMutationInput, PlayerRecordUncheckedUpdateManyWithoutPlayerInput>
  }

  export type PlayerCreateWithoutPlayerRecordsInput = {
    login: string
    isAdmin?: boolean | null
    name?: string | null
    anonymous?: boolean | null
    email?: string | null
    joined?: Date | string | null
    finished?: Date | string | null
    born?: Date | string | null
    comment?: string | null
    introducedBy?: number | null
    arsesOfPlayer?: ArseCreateNestedManyWithoutPlayerInput
    arsesByPlayer?: ArseCreateNestedManyWithoutRaterInput
    clubs?: ClubSupporterCreateNestedManyWithoutPlayerInput
    countries?: CountrySupporterCreateNestedManyWithoutPlayerInput
    outcomes?: OutcomeCreateNestedManyWithoutPlayerInput
  }

  export type PlayerUncheckedCreateWithoutPlayerRecordsInput = {
    id?: number
    login: string
    isAdmin?: boolean | null
    name?: string | null
    anonymous?: boolean | null
    email?: string | null
    joined?: Date | string | null
    finished?: Date | string | null
    born?: Date | string | null
    comment?: string | null
    introducedBy?: number | null
    arsesOfPlayer?: ArseUncheckedCreateNestedManyWithoutPlayerInput
    arsesByPlayer?: ArseUncheckedCreateNestedManyWithoutRaterInput
    clubs?: ClubSupporterUncheckedCreateNestedManyWithoutPlayerInput
    countries?: CountrySupporterUncheckedCreateNestedManyWithoutPlayerInput
    outcomes?: OutcomeUncheckedCreateNestedManyWithoutPlayerInput
  }

  export type PlayerCreateOrConnectWithoutPlayerRecordsInput = {
    where: PlayerWhereUniqueInput
    create: XOR<PlayerCreateWithoutPlayerRecordsInput, PlayerUncheckedCreateWithoutPlayerRecordsInput>
  }

  export type GameDayCreateWithoutPlayerRecordsInput = {
    year: number
    date: Date | string
    game?: boolean
    mailSent?: Date | string | null
    comment?: string | null
    bibs?: $Enums.TeamName | null
    pickerGamesHistory?: number | null
    outcomes?: OutcomeCreateNestedManyWithoutGameDayInput
  }

  export type GameDayUncheckedCreateWithoutPlayerRecordsInput = {
    id?: number
    year: number
    date: Date | string
    game?: boolean
    mailSent?: Date | string | null
    comment?: string | null
    bibs?: $Enums.TeamName | null
    pickerGamesHistory?: number | null
    outcomes?: OutcomeUncheckedCreateNestedManyWithoutGameDayInput
  }

  export type GameDayCreateOrConnectWithoutPlayerRecordsInput = {
    where: GameDayWhereUniqueInput
    create: XOR<GameDayCreateWithoutPlayerRecordsInput, GameDayUncheckedCreateWithoutPlayerRecordsInput>
  }

  export type PlayerUpsertWithoutPlayerRecordsInput = {
    update: XOR<PlayerUpdateWithoutPlayerRecordsInput, PlayerUncheckedUpdateWithoutPlayerRecordsInput>
    create: XOR<PlayerCreateWithoutPlayerRecordsInput, PlayerUncheckedCreateWithoutPlayerRecordsInput>
    where?: PlayerWhereInput
  }

  export type PlayerUpdateToOneWithWhereWithoutPlayerRecordsInput = {
    where?: PlayerWhereInput
    data: XOR<PlayerUpdateWithoutPlayerRecordsInput, PlayerUncheckedUpdateWithoutPlayerRecordsInput>
  }

  export type PlayerUpdateWithoutPlayerRecordsInput = {
    login?: StringFieldUpdateOperationsInput | string
    isAdmin?: NullableBoolFieldUpdateOperationsInput | boolean | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    anonymous?: NullableBoolFieldUpdateOperationsInput | boolean | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    joined?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    finished?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    born?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    introducedBy?: NullableIntFieldUpdateOperationsInput | number | null
    arsesOfPlayer?: ArseUpdateManyWithoutPlayerNestedInput
    arsesByPlayer?: ArseUpdateManyWithoutRaterNestedInput
    clubs?: ClubSupporterUpdateManyWithoutPlayerNestedInput
    countries?: CountrySupporterUpdateManyWithoutPlayerNestedInput
    outcomes?: OutcomeUpdateManyWithoutPlayerNestedInput
  }

  export type PlayerUncheckedUpdateWithoutPlayerRecordsInput = {
    id?: IntFieldUpdateOperationsInput | number
    login?: StringFieldUpdateOperationsInput | string
    isAdmin?: NullableBoolFieldUpdateOperationsInput | boolean | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    anonymous?: NullableBoolFieldUpdateOperationsInput | boolean | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    joined?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    finished?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    born?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    introducedBy?: NullableIntFieldUpdateOperationsInput | number | null
    arsesOfPlayer?: ArseUncheckedUpdateManyWithoutPlayerNestedInput
    arsesByPlayer?: ArseUncheckedUpdateManyWithoutRaterNestedInput
    clubs?: ClubSupporterUncheckedUpdateManyWithoutPlayerNestedInput
    countries?: CountrySupporterUncheckedUpdateManyWithoutPlayerNestedInput
    outcomes?: OutcomeUncheckedUpdateManyWithoutPlayerNestedInput
  }

  export type GameDayUpsertWithoutPlayerRecordsInput = {
    update: XOR<GameDayUpdateWithoutPlayerRecordsInput, GameDayUncheckedUpdateWithoutPlayerRecordsInput>
    create: XOR<GameDayCreateWithoutPlayerRecordsInput, GameDayUncheckedCreateWithoutPlayerRecordsInput>
    where?: GameDayWhereInput
  }

  export type GameDayUpdateToOneWithWhereWithoutPlayerRecordsInput = {
    where?: GameDayWhereInput
    data: XOR<GameDayUpdateWithoutPlayerRecordsInput, GameDayUncheckedUpdateWithoutPlayerRecordsInput>
  }

  export type GameDayUpdateWithoutPlayerRecordsInput = {
    year?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    game?: BoolFieldUpdateOperationsInput | boolean
    mailSent?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    bibs?: NullableEnumTeamNameFieldUpdateOperationsInput | $Enums.TeamName | null
    pickerGamesHistory?: NullableIntFieldUpdateOperationsInput | number | null
    outcomes?: OutcomeUpdateManyWithoutGameDayNestedInput
  }

  export type GameDayUncheckedUpdateWithoutPlayerRecordsInput = {
    id?: IntFieldUpdateOperationsInput | number
    year?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    game?: BoolFieldUpdateOperationsInput | boolean
    mailSent?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    bibs?: NullableEnumTeamNameFieldUpdateOperationsInput | $Enums.TeamName | null
    pickerGamesHistory?: NullableIntFieldUpdateOperationsInput | number | null
    outcomes?: OutcomeUncheckedUpdateManyWithoutGameDayNestedInput
  }

  export type SessionCreateWithoutUserInput = {
    id: string
    expiresAt: Date | string
    token: string
    createdAt: Date | string
    updatedAt: Date | string
    ipAddress?: string | null
    userAgent?: string | null
    impersonatedBy?: string | null
  }

  export type SessionUncheckedCreateWithoutUserInput = {
    id: string
    expiresAt: Date | string
    token: string
    createdAt: Date | string
    updatedAt: Date | string
    ipAddress?: string | null
    userAgent?: string | null
    impersonatedBy?: string | null
  }

  export type SessionCreateOrConnectWithoutUserInput = {
    where: SessionWhereUniqueInput
    create: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput>
  }

  export type SessionCreateManyUserInputEnvelope = {
    data: SessionCreateManyUserInput | SessionCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type AccountCreateWithoutUserInput = {
    id: string
    accountId: string
    providerId: string
    accessToken?: string | null
    refreshToken?: string | null
    idToken?: string | null
    accessTokenExpiresAt?: Date | string | null
    refreshTokenExpiresAt?: Date | string | null
    scope?: string | null
    password?: string | null
    createdAt: Date | string
    updatedAt: Date | string
  }

  export type AccountUncheckedCreateWithoutUserInput = {
    id: string
    accountId: string
    providerId: string
    accessToken?: string | null
    refreshToken?: string | null
    idToken?: string | null
    accessTokenExpiresAt?: Date | string | null
    refreshTokenExpiresAt?: Date | string | null
    scope?: string | null
    password?: string | null
    createdAt: Date | string
    updatedAt: Date | string
  }

  export type AccountCreateOrConnectWithoutUserInput = {
    where: AccountWhereUniqueInput
    create: XOR<AccountCreateWithoutUserInput, AccountUncheckedCreateWithoutUserInput>
  }

  export type AccountCreateManyUserInputEnvelope = {
    data: AccountCreateManyUserInput | AccountCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type SessionUpsertWithWhereUniqueWithoutUserInput = {
    where: SessionWhereUniqueInput
    update: XOR<SessionUpdateWithoutUserInput, SessionUncheckedUpdateWithoutUserInput>
    create: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput>
  }

  export type SessionUpdateWithWhereUniqueWithoutUserInput = {
    where: SessionWhereUniqueInput
    data: XOR<SessionUpdateWithoutUserInput, SessionUncheckedUpdateWithoutUserInput>
  }

  export type SessionUpdateManyWithWhereWithoutUserInput = {
    where: SessionScalarWhereInput
    data: XOR<SessionUpdateManyMutationInput, SessionUncheckedUpdateManyWithoutUserInput>
  }

  export type SessionScalarWhereInput = {
    AND?: SessionScalarWhereInput | SessionScalarWhereInput[]
    OR?: SessionScalarWhereInput[]
    NOT?: SessionScalarWhereInput | SessionScalarWhereInput[]
    id?: StringFilter<"Session"> | string
    expiresAt?: DateTimeFilter<"Session"> | Date | string
    token?: StringFilter<"Session"> | string
    createdAt?: DateTimeFilter<"Session"> | Date | string
    updatedAt?: DateTimeFilter<"Session"> | Date | string
    ipAddress?: StringNullableFilter<"Session"> | string | null
    userAgent?: StringNullableFilter<"Session"> | string | null
    userId?: StringFilter<"Session"> | string
    impersonatedBy?: StringNullableFilter<"Session"> | string | null
  }

  export type AccountUpsertWithWhereUniqueWithoutUserInput = {
    where: AccountWhereUniqueInput
    update: XOR<AccountUpdateWithoutUserInput, AccountUncheckedUpdateWithoutUserInput>
    create: XOR<AccountCreateWithoutUserInput, AccountUncheckedCreateWithoutUserInput>
  }

  export type AccountUpdateWithWhereUniqueWithoutUserInput = {
    where: AccountWhereUniqueInput
    data: XOR<AccountUpdateWithoutUserInput, AccountUncheckedUpdateWithoutUserInput>
  }

  export type AccountUpdateManyWithWhereWithoutUserInput = {
    where: AccountScalarWhereInput
    data: XOR<AccountUpdateManyMutationInput, AccountUncheckedUpdateManyWithoutUserInput>
  }

  export type AccountScalarWhereInput = {
    AND?: AccountScalarWhereInput | AccountScalarWhereInput[]
    OR?: AccountScalarWhereInput[]
    NOT?: AccountScalarWhereInput | AccountScalarWhereInput[]
    id?: StringFilter<"Account"> | string
    accountId?: StringFilter<"Account"> | string
    providerId?: StringFilter<"Account"> | string
    userId?: StringFilter<"Account"> | string
    accessToken?: StringNullableFilter<"Account"> | string | null
    refreshToken?: StringNullableFilter<"Account"> | string | null
    idToken?: StringNullableFilter<"Account"> | string | null
    accessTokenExpiresAt?: DateTimeNullableFilter<"Account"> | Date | string | null
    refreshTokenExpiresAt?: DateTimeNullableFilter<"Account"> | Date | string | null
    scope?: StringNullableFilter<"Account"> | string | null
    password?: StringNullableFilter<"Account"> | string | null
    createdAt?: DateTimeFilter<"Account"> | Date | string
    updatedAt?: DateTimeFilter<"Account"> | Date | string
  }

  export type UserCreateWithoutSessionsInput = {
    id: string
    name: string
    email: string
    emailVerified: boolean
    image?: string | null
    createdAt: Date | string
    updatedAt: Date | string
    role?: string | null
    banned?: boolean | null
    banReason?: string | null
    banExpires?: Date | string | null
    accounts?: AccountCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutSessionsInput = {
    id: string
    name: string
    email: string
    emailVerified: boolean
    image?: string | null
    createdAt: Date | string
    updatedAt: Date | string
    role?: string | null
    banned?: boolean | null
    banReason?: string | null
    banExpires?: Date | string | null
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutSessionsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutSessionsInput, UserUncheckedCreateWithoutSessionsInput>
  }

  export type UserUpsertWithoutSessionsInput = {
    update: XOR<UserUpdateWithoutSessionsInput, UserUncheckedUpdateWithoutSessionsInput>
    create: XOR<UserCreateWithoutSessionsInput, UserUncheckedCreateWithoutSessionsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutSessionsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutSessionsInput, UserUncheckedUpdateWithoutSessionsInput>
  }

  export type UserUpdateWithoutSessionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    image?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    role?: NullableStringFieldUpdateOperationsInput | string | null
    banned?: NullableBoolFieldUpdateOperationsInput | boolean | null
    banReason?: NullableStringFieldUpdateOperationsInput | string | null
    banExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    accounts?: AccountUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutSessionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    image?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    role?: NullableStringFieldUpdateOperationsInput | string | null
    banned?: NullableBoolFieldUpdateOperationsInput | boolean | null
    banReason?: NullableStringFieldUpdateOperationsInput | string | null
    banExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateWithoutAccountsInput = {
    id: string
    name: string
    email: string
    emailVerified: boolean
    image?: string | null
    createdAt: Date | string
    updatedAt: Date | string
    role?: string | null
    banned?: boolean | null
    banReason?: string | null
    banExpires?: Date | string | null
    sessions?: SessionCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutAccountsInput = {
    id: string
    name: string
    email: string
    emailVerified: boolean
    image?: string | null
    createdAt: Date | string
    updatedAt: Date | string
    role?: string | null
    banned?: boolean | null
    banReason?: string | null
    banExpires?: Date | string | null
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutAccountsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutAccountsInput, UserUncheckedCreateWithoutAccountsInput>
  }

  export type UserUpsertWithoutAccountsInput = {
    update: XOR<UserUpdateWithoutAccountsInput, UserUncheckedUpdateWithoutAccountsInput>
    create: XOR<UserCreateWithoutAccountsInput, UserUncheckedCreateWithoutAccountsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutAccountsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutAccountsInput, UserUncheckedUpdateWithoutAccountsInput>
  }

  export type UserUpdateWithoutAccountsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    image?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    role?: NullableStringFieldUpdateOperationsInput | string | null
    banned?: NullableBoolFieldUpdateOperationsInput | boolean | null
    banReason?: NullableStringFieldUpdateOperationsInput | string | null
    banExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    sessions?: SessionUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutAccountsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    image?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    role?: NullableStringFieldUpdateOperationsInput | string | null
    banned?: NullableBoolFieldUpdateOperationsInput | boolean | null
    banReason?: NullableStringFieldUpdateOperationsInput | string | null
    banExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
  }

  export type ClubSupporterCreateManyClubInput = {
    playerId: number
  }

  export type ClubSupporterUpdateWithoutClubInput = {
    player?: PlayerUpdateOneRequiredWithoutClubsNestedInput
  }

  export type ClubSupporterUncheckedUpdateWithoutClubInput = {
    playerId?: IntFieldUpdateOperationsInput | number
  }

  export type ClubSupporterUncheckedUpdateManyWithoutClubInput = {
    playerId?: IntFieldUpdateOperationsInput | number
  }

  export type CountrySupporterCreateManyCountryInput = {
    playerId: number
  }

  export type CountrySupporterUpdateWithoutCountryInput = {
    player?: PlayerUpdateOneRequiredWithoutCountriesNestedInput
  }

  export type CountrySupporterUncheckedUpdateWithoutCountryInput = {
    playerId?: IntFieldUpdateOperationsInput | number
  }

  export type CountrySupporterUncheckedUpdateManyWithoutCountryInput = {
    playerId?: IntFieldUpdateOperationsInput | number
  }

  export type OutcomeCreateManyGameDayInput = {
    id?: number
    response?: $Enums.PlayerResponse | null
    responseInterval?: number | null
    points?: number | null
    team?: $Enums.TeamName | null
    comment?: string | null
    pub?: number | null
    paid?: boolean | null
    goalie?: boolean | null
    playerId: number
  }

  export type PlayerRecordCreateManyGameDayInput = {
    id?: number
    year: number
    responses?: number | null
    played?: number | null
    won?: number | null
    drawn?: number | null
    lost?: number | null
    points?: number | null
    averages?: number | null
    stalwart?: number | null
    pub?: number | null
    rankPoints?: number | null
    rankAverages?: number | null
    rankAveragesUnqualified?: number | null
    rankStalwart?: number | null
    rankSpeedy?: number | null
    rankSpeedyUnqualified?: number | null
    rankPub?: number | null
    speedy?: number | null
    playerId: number
  }

  export type OutcomeUpdateWithoutGameDayInput = {
    response?: NullableEnumPlayerResponseFieldUpdateOperationsInput | $Enums.PlayerResponse | null
    responseInterval?: NullableIntFieldUpdateOperationsInput | number | null
    points?: NullableIntFieldUpdateOperationsInput | number | null
    team?: NullableEnumTeamNameFieldUpdateOperationsInput | $Enums.TeamName | null
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    pub?: NullableIntFieldUpdateOperationsInput | number | null
    paid?: NullableBoolFieldUpdateOperationsInput | boolean | null
    goalie?: NullableBoolFieldUpdateOperationsInput | boolean | null
    player?: PlayerUpdateOneRequiredWithoutOutcomesNestedInput
  }

  export type OutcomeUncheckedUpdateWithoutGameDayInput = {
    id?: IntFieldUpdateOperationsInput | number
    response?: NullableEnumPlayerResponseFieldUpdateOperationsInput | $Enums.PlayerResponse | null
    responseInterval?: NullableIntFieldUpdateOperationsInput | number | null
    points?: NullableIntFieldUpdateOperationsInput | number | null
    team?: NullableEnumTeamNameFieldUpdateOperationsInput | $Enums.TeamName | null
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    pub?: NullableIntFieldUpdateOperationsInput | number | null
    paid?: NullableBoolFieldUpdateOperationsInput | boolean | null
    goalie?: NullableBoolFieldUpdateOperationsInput | boolean | null
    playerId?: IntFieldUpdateOperationsInput | number
  }

  export type OutcomeUncheckedUpdateManyWithoutGameDayInput = {
    id?: IntFieldUpdateOperationsInput | number
    response?: NullableEnumPlayerResponseFieldUpdateOperationsInput | $Enums.PlayerResponse | null
    responseInterval?: NullableIntFieldUpdateOperationsInput | number | null
    points?: NullableIntFieldUpdateOperationsInput | number | null
    team?: NullableEnumTeamNameFieldUpdateOperationsInput | $Enums.TeamName | null
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    pub?: NullableIntFieldUpdateOperationsInput | number | null
    paid?: NullableBoolFieldUpdateOperationsInput | boolean | null
    goalie?: NullableBoolFieldUpdateOperationsInput | boolean | null
    playerId?: IntFieldUpdateOperationsInput | number
  }

  export type PlayerRecordUpdateWithoutGameDayInput = {
    year?: IntFieldUpdateOperationsInput | number
    responses?: NullableIntFieldUpdateOperationsInput | number | null
    played?: NullableIntFieldUpdateOperationsInput | number | null
    won?: NullableIntFieldUpdateOperationsInput | number | null
    drawn?: NullableIntFieldUpdateOperationsInput | number | null
    lost?: NullableIntFieldUpdateOperationsInput | number | null
    points?: NullableIntFieldUpdateOperationsInput | number | null
    averages?: NullableFloatFieldUpdateOperationsInput | number | null
    stalwart?: NullableIntFieldUpdateOperationsInput | number | null
    pub?: NullableIntFieldUpdateOperationsInput | number | null
    rankPoints?: NullableIntFieldUpdateOperationsInput | number | null
    rankAverages?: NullableIntFieldUpdateOperationsInput | number | null
    rankAveragesUnqualified?: NullableIntFieldUpdateOperationsInput | number | null
    rankStalwart?: NullableIntFieldUpdateOperationsInput | number | null
    rankSpeedy?: NullableIntFieldUpdateOperationsInput | number | null
    rankSpeedyUnqualified?: NullableIntFieldUpdateOperationsInput | number | null
    rankPub?: NullableIntFieldUpdateOperationsInput | number | null
    speedy?: NullableIntFieldUpdateOperationsInput | number | null
    player?: PlayerUpdateOneRequiredWithoutPlayerRecordsNestedInput
  }

  export type PlayerRecordUncheckedUpdateWithoutGameDayInput = {
    id?: IntFieldUpdateOperationsInput | number
    year?: IntFieldUpdateOperationsInput | number
    responses?: NullableIntFieldUpdateOperationsInput | number | null
    played?: NullableIntFieldUpdateOperationsInput | number | null
    won?: NullableIntFieldUpdateOperationsInput | number | null
    drawn?: NullableIntFieldUpdateOperationsInput | number | null
    lost?: NullableIntFieldUpdateOperationsInput | number | null
    points?: NullableIntFieldUpdateOperationsInput | number | null
    averages?: NullableFloatFieldUpdateOperationsInput | number | null
    stalwart?: NullableIntFieldUpdateOperationsInput | number | null
    pub?: NullableIntFieldUpdateOperationsInput | number | null
    rankPoints?: NullableIntFieldUpdateOperationsInput | number | null
    rankAverages?: NullableIntFieldUpdateOperationsInput | number | null
    rankAveragesUnqualified?: NullableIntFieldUpdateOperationsInput | number | null
    rankStalwart?: NullableIntFieldUpdateOperationsInput | number | null
    rankSpeedy?: NullableIntFieldUpdateOperationsInput | number | null
    rankSpeedyUnqualified?: NullableIntFieldUpdateOperationsInput | number | null
    rankPub?: NullableIntFieldUpdateOperationsInput | number | null
    speedy?: NullableIntFieldUpdateOperationsInput | number | null
    playerId?: IntFieldUpdateOperationsInput | number
  }

  export type PlayerRecordUncheckedUpdateManyWithoutGameDayInput = {
    id?: IntFieldUpdateOperationsInput | number
    year?: IntFieldUpdateOperationsInput | number
    responses?: NullableIntFieldUpdateOperationsInput | number | null
    played?: NullableIntFieldUpdateOperationsInput | number | null
    won?: NullableIntFieldUpdateOperationsInput | number | null
    drawn?: NullableIntFieldUpdateOperationsInput | number | null
    lost?: NullableIntFieldUpdateOperationsInput | number | null
    points?: NullableIntFieldUpdateOperationsInput | number | null
    averages?: NullableFloatFieldUpdateOperationsInput | number | null
    stalwart?: NullableIntFieldUpdateOperationsInput | number | null
    pub?: NullableIntFieldUpdateOperationsInput | number | null
    rankPoints?: NullableIntFieldUpdateOperationsInput | number | null
    rankAverages?: NullableIntFieldUpdateOperationsInput | number | null
    rankAveragesUnqualified?: NullableIntFieldUpdateOperationsInput | number | null
    rankStalwart?: NullableIntFieldUpdateOperationsInput | number | null
    rankSpeedy?: NullableIntFieldUpdateOperationsInput | number | null
    rankSpeedyUnqualified?: NullableIntFieldUpdateOperationsInput | number | null
    rankPub?: NullableIntFieldUpdateOperationsInput | number | null
    speedy?: NullableIntFieldUpdateOperationsInput | number | null
    playerId?: IntFieldUpdateOperationsInput | number
  }

  export type ArseCreateManyPlayerInput = {
    id?: number
    stamp?: Date | string
    inGoal?: number | null
    running?: number | null
    shooting?: number | null
    passing?: number | null
    ballSkill?: number | null
    attacking?: number | null
    defending?: number | null
    raterId: number
  }

  export type ArseCreateManyRaterInput = {
    id?: number
    stamp?: Date | string
    inGoal?: number | null
    running?: number | null
    shooting?: number | null
    passing?: number | null
    ballSkill?: number | null
    attacking?: number | null
    defending?: number | null
    playerId: number
  }

  export type ClubSupporterCreateManyPlayerInput = {
    clubId: number
  }

  export type CountrySupporterCreateManyPlayerInput = {
    countryISOCode: string
  }

  export type OutcomeCreateManyPlayerInput = {
    id?: number
    response?: $Enums.PlayerResponse | null
    responseInterval?: number | null
    points?: number | null
    team?: $Enums.TeamName | null
    comment?: string | null
    pub?: number | null
    paid?: boolean | null
    goalie?: boolean | null
    gameDayId: number
  }

  export type PlayerRecordCreateManyPlayerInput = {
    id?: number
    year: number
    responses?: number | null
    played?: number | null
    won?: number | null
    drawn?: number | null
    lost?: number | null
    points?: number | null
    averages?: number | null
    stalwart?: number | null
    pub?: number | null
    rankPoints?: number | null
    rankAverages?: number | null
    rankAveragesUnqualified?: number | null
    rankStalwart?: number | null
    rankSpeedy?: number | null
    rankSpeedyUnqualified?: number | null
    rankPub?: number | null
    speedy?: number | null
    gameDayId: number
  }

  export type ArseUpdateWithoutPlayerInput = {
    stamp?: DateTimeFieldUpdateOperationsInput | Date | string
    inGoal?: NullableIntFieldUpdateOperationsInput | number | null
    running?: NullableIntFieldUpdateOperationsInput | number | null
    shooting?: NullableIntFieldUpdateOperationsInput | number | null
    passing?: NullableIntFieldUpdateOperationsInput | number | null
    ballSkill?: NullableIntFieldUpdateOperationsInput | number | null
    attacking?: NullableIntFieldUpdateOperationsInput | number | null
    defending?: NullableIntFieldUpdateOperationsInput | number | null
    rater?: PlayerUpdateOneRequiredWithoutArsesByPlayerNestedInput
  }

  export type ArseUncheckedUpdateWithoutPlayerInput = {
    id?: IntFieldUpdateOperationsInput | number
    stamp?: DateTimeFieldUpdateOperationsInput | Date | string
    inGoal?: NullableIntFieldUpdateOperationsInput | number | null
    running?: NullableIntFieldUpdateOperationsInput | number | null
    shooting?: NullableIntFieldUpdateOperationsInput | number | null
    passing?: NullableIntFieldUpdateOperationsInput | number | null
    ballSkill?: NullableIntFieldUpdateOperationsInput | number | null
    attacking?: NullableIntFieldUpdateOperationsInput | number | null
    defending?: NullableIntFieldUpdateOperationsInput | number | null
    raterId?: IntFieldUpdateOperationsInput | number
  }

  export type ArseUncheckedUpdateManyWithoutPlayerInput = {
    id?: IntFieldUpdateOperationsInput | number
    stamp?: DateTimeFieldUpdateOperationsInput | Date | string
    inGoal?: NullableIntFieldUpdateOperationsInput | number | null
    running?: NullableIntFieldUpdateOperationsInput | number | null
    shooting?: NullableIntFieldUpdateOperationsInput | number | null
    passing?: NullableIntFieldUpdateOperationsInput | number | null
    ballSkill?: NullableIntFieldUpdateOperationsInput | number | null
    attacking?: NullableIntFieldUpdateOperationsInput | number | null
    defending?: NullableIntFieldUpdateOperationsInput | number | null
    raterId?: IntFieldUpdateOperationsInput | number
  }

  export type ArseUpdateWithoutRaterInput = {
    stamp?: DateTimeFieldUpdateOperationsInput | Date | string
    inGoal?: NullableIntFieldUpdateOperationsInput | number | null
    running?: NullableIntFieldUpdateOperationsInput | number | null
    shooting?: NullableIntFieldUpdateOperationsInput | number | null
    passing?: NullableIntFieldUpdateOperationsInput | number | null
    ballSkill?: NullableIntFieldUpdateOperationsInput | number | null
    attacking?: NullableIntFieldUpdateOperationsInput | number | null
    defending?: NullableIntFieldUpdateOperationsInput | number | null
    player?: PlayerUpdateOneRequiredWithoutArsesOfPlayerNestedInput
  }

  export type ArseUncheckedUpdateWithoutRaterInput = {
    id?: IntFieldUpdateOperationsInput | number
    stamp?: DateTimeFieldUpdateOperationsInput | Date | string
    inGoal?: NullableIntFieldUpdateOperationsInput | number | null
    running?: NullableIntFieldUpdateOperationsInput | number | null
    shooting?: NullableIntFieldUpdateOperationsInput | number | null
    passing?: NullableIntFieldUpdateOperationsInput | number | null
    ballSkill?: NullableIntFieldUpdateOperationsInput | number | null
    attacking?: NullableIntFieldUpdateOperationsInput | number | null
    defending?: NullableIntFieldUpdateOperationsInput | number | null
    playerId?: IntFieldUpdateOperationsInput | number
  }

  export type ArseUncheckedUpdateManyWithoutRaterInput = {
    id?: IntFieldUpdateOperationsInput | number
    stamp?: DateTimeFieldUpdateOperationsInput | Date | string
    inGoal?: NullableIntFieldUpdateOperationsInput | number | null
    running?: NullableIntFieldUpdateOperationsInput | number | null
    shooting?: NullableIntFieldUpdateOperationsInput | number | null
    passing?: NullableIntFieldUpdateOperationsInput | number | null
    ballSkill?: NullableIntFieldUpdateOperationsInput | number | null
    attacking?: NullableIntFieldUpdateOperationsInput | number | null
    defending?: NullableIntFieldUpdateOperationsInput | number | null
    playerId?: IntFieldUpdateOperationsInput | number
  }

  export type ClubSupporterUpdateWithoutPlayerInput = {
    club?: ClubUpdateOneRequiredWithoutSupportersNestedInput
  }

  export type ClubSupporterUncheckedUpdateWithoutPlayerInput = {
    clubId?: IntFieldUpdateOperationsInput | number
  }

  export type ClubSupporterUncheckedUpdateManyWithoutPlayerInput = {
    clubId?: IntFieldUpdateOperationsInput | number
  }

  export type CountrySupporterUpdateWithoutPlayerInput = {
    country?: CountryUpdateOneRequiredWithoutSupportersNestedInput
  }

  export type CountrySupporterUncheckedUpdateWithoutPlayerInput = {
    countryISOCode?: StringFieldUpdateOperationsInput | string
  }

  export type CountrySupporterUncheckedUpdateManyWithoutPlayerInput = {
    countryISOCode?: StringFieldUpdateOperationsInput | string
  }

  export type OutcomeUpdateWithoutPlayerInput = {
    response?: NullableEnumPlayerResponseFieldUpdateOperationsInput | $Enums.PlayerResponse | null
    responseInterval?: NullableIntFieldUpdateOperationsInput | number | null
    points?: NullableIntFieldUpdateOperationsInput | number | null
    team?: NullableEnumTeamNameFieldUpdateOperationsInput | $Enums.TeamName | null
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    pub?: NullableIntFieldUpdateOperationsInput | number | null
    paid?: NullableBoolFieldUpdateOperationsInput | boolean | null
    goalie?: NullableBoolFieldUpdateOperationsInput | boolean | null
    gameDay?: GameDayUpdateOneRequiredWithoutOutcomesNestedInput
  }

  export type OutcomeUncheckedUpdateWithoutPlayerInput = {
    id?: IntFieldUpdateOperationsInput | number
    response?: NullableEnumPlayerResponseFieldUpdateOperationsInput | $Enums.PlayerResponse | null
    responseInterval?: NullableIntFieldUpdateOperationsInput | number | null
    points?: NullableIntFieldUpdateOperationsInput | number | null
    team?: NullableEnumTeamNameFieldUpdateOperationsInput | $Enums.TeamName | null
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    pub?: NullableIntFieldUpdateOperationsInput | number | null
    paid?: NullableBoolFieldUpdateOperationsInput | boolean | null
    goalie?: NullableBoolFieldUpdateOperationsInput | boolean | null
    gameDayId?: IntFieldUpdateOperationsInput | number
  }

  export type OutcomeUncheckedUpdateManyWithoutPlayerInput = {
    id?: IntFieldUpdateOperationsInput | number
    response?: NullableEnumPlayerResponseFieldUpdateOperationsInput | $Enums.PlayerResponse | null
    responseInterval?: NullableIntFieldUpdateOperationsInput | number | null
    points?: NullableIntFieldUpdateOperationsInput | number | null
    team?: NullableEnumTeamNameFieldUpdateOperationsInput | $Enums.TeamName | null
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    pub?: NullableIntFieldUpdateOperationsInput | number | null
    paid?: NullableBoolFieldUpdateOperationsInput | boolean | null
    goalie?: NullableBoolFieldUpdateOperationsInput | boolean | null
    gameDayId?: IntFieldUpdateOperationsInput | number
  }

  export type PlayerRecordUpdateWithoutPlayerInput = {
    year?: IntFieldUpdateOperationsInput | number
    responses?: NullableIntFieldUpdateOperationsInput | number | null
    played?: NullableIntFieldUpdateOperationsInput | number | null
    won?: NullableIntFieldUpdateOperationsInput | number | null
    drawn?: NullableIntFieldUpdateOperationsInput | number | null
    lost?: NullableIntFieldUpdateOperationsInput | number | null
    points?: NullableIntFieldUpdateOperationsInput | number | null
    averages?: NullableFloatFieldUpdateOperationsInput | number | null
    stalwart?: NullableIntFieldUpdateOperationsInput | number | null
    pub?: NullableIntFieldUpdateOperationsInput | number | null
    rankPoints?: NullableIntFieldUpdateOperationsInput | number | null
    rankAverages?: NullableIntFieldUpdateOperationsInput | number | null
    rankAveragesUnqualified?: NullableIntFieldUpdateOperationsInput | number | null
    rankStalwart?: NullableIntFieldUpdateOperationsInput | number | null
    rankSpeedy?: NullableIntFieldUpdateOperationsInput | number | null
    rankSpeedyUnqualified?: NullableIntFieldUpdateOperationsInput | number | null
    rankPub?: NullableIntFieldUpdateOperationsInput | number | null
    speedy?: NullableIntFieldUpdateOperationsInput | number | null
    gameDay?: GameDayUpdateOneRequiredWithoutPlayerRecordsNestedInput
  }

  export type PlayerRecordUncheckedUpdateWithoutPlayerInput = {
    id?: IntFieldUpdateOperationsInput | number
    year?: IntFieldUpdateOperationsInput | number
    responses?: NullableIntFieldUpdateOperationsInput | number | null
    played?: NullableIntFieldUpdateOperationsInput | number | null
    won?: NullableIntFieldUpdateOperationsInput | number | null
    drawn?: NullableIntFieldUpdateOperationsInput | number | null
    lost?: NullableIntFieldUpdateOperationsInput | number | null
    points?: NullableIntFieldUpdateOperationsInput | number | null
    averages?: NullableFloatFieldUpdateOperationsInput | number | null
    stalwart?: NullableIntFieldUpdateOperationsInput | number | null
    pub?: NullableIntFieldUpdateOperationsInput | number | null
    rankPoints?: NullableIntFieldUpdateOperationsInput | number | null
    rankAverages?: NullableIntFieldUpdateOperationsInput | number | null
    rankAveragesUnqualified?: NullableIntFieldUpdateOperationsInput | number | null
    rankStalwart?: NullableIntFieldUpdateOperationsInput | number | null
    rankSpeedy?: NullableIntFieldUpdateOperationsInput | number | null
    rankSpeedyUnqualified?: NullableIntFieldUpdateOperationsInput | number | null
    rankPub?: NullableIntFieldUpdateOperationsInput | number | null
    speedy?: NullableIntFieldUpdateOperationsInput | number | null
    gameDayId?: IntFieldUpdateOperationsInput | number
  }

  export type PlayerRecordUncheckedUpdateManyWithoutPlayerInput = {
    id?: IntFieldUpdateOperationsInput | number
    year?: IntFieldUpdateOperationsInput | number
    responses?: NullableIntFieldUpdateOperationsInput | number | null
    played?: NullableIntFieldUpdateOperationsInput | number | null
    won?: NullableIntFieldUpdateOperationsInput | number | null
    drawn?: NullableIntFieldUpdateOperationsInput | number | null
    lost?: NullableIntFieldUpdateOperationsInput | number | null
    points?: NullableIntFieldUpdateOperationsInput | number | null
    averages?: NullableFloatFieldUpdateOperationsInput | number | null
    stalwart?: NullableIntFieldUpdateOperationsInput | number | null
    pub?: NullableIntFieldUpdateOperationsInput | number | null
    rankPoints?: NullableIntFieldUpdateOperationsInput | number | null
    rankAverages?: NullableIntFieldUpdateOperationsInput | number | null
    rankAveragesUnqualified?: NullableIntFieldUpdateOperationsInput | number | null
    rankStalwart?: NullableIntFieldUpdateOperationsInput | number | null
    rankSpeedy?: NullableIntFieldUpdateOperationsInput | number | null
    rankSpeedyUnqualified?: NullableIntFieldUpdateOperationsInput | number | null
    rankPub?: NullableIntFieldUpdateOperationsInput | number | null
    speedy?: NullableIntFieldUpdateOperationsInput | number | null
    gameDayId?: IntFieldUpdateOperationsInput | number
  }

  export type SessionCreateManyUserInput = {
    id: string
    expiresAt: Date | string
    token: string
    createdAt: Date | string
    updatedAt: Date | string
    ipAddress?: string | null
    userAgent?: string | null
    impersonatedBy?: string | null
  }

  export type AccountCreateManyUserInput = {
    id: string
    accountId: string
    providerId: string
    accessToken?: string | null
    refreshToken?: string | null
    idToken?: string | null
    accessTokenExpiresAt?: Date | string | null
    refreshTokenExpiresAt?: Date | string | null
    scope?: string | null
    password?: string | null
    createdAt: Date | string
    updatedAt: Date | string
  }

  export type SessionUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    token?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    impersonatedBy?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type SessionUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    token?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    impersonatedBy?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type SessionUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    token?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    impersonatedBy?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AccountUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    accountId?: StringFieldUpdateOperationsInput | string
    providerId?: StringFieldUpdateOperationsInput | string
    accessToken?: NullableStringFieldUpdateOperationsInput | string | null
    refreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    idToken?: NullableStringFieldUpdateOperationsInput | string | null
    accessTokenExpiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    refreshTokenExpiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    scope?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AccountUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    accountId?: StringFieldUpdateOperationsInput | string
    providerId?: StringFieldUpdateOperationsInput | string
    accessToken?: NullableStringFieldUpdateOperationsInput | string | null
    refreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    idToken?: NullableStringFieldUpdateOperationsInput | string | null
    accessTokenExpiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    refreshTokenExpiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    scope?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AccountUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    accountId?: StringFieldUpdateOperationsInput | string
    providerId?: StringFieldUpdateOperationsInput | string
    accessToken?: NullableStringFieldUpdateOperationsInput | string | null
    refreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    idToken?: NullableStringFieldUpdateOperationsInput | string | null
    accessTokenExpiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    refreshTokenExpiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    scope?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}
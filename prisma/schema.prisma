generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Arse {
  id    Int      @id @default(autoincrement())
  stamp DateTime @default(now()) @db.Timestamp(0)

  inGoal    Int?
  running   Int?
  shooting  Int?
  passing   Int?
  ballSkill Int?
  attacking Int?
  defending Int?

  playerId Int
  raterId  Int

  player Player @relation(name: "PlayerArse", fields: [playerId], references: [id])
  rater  Player @relation(name: "RaterArse", fields: [raterId], references: [id])

  @@unique([playerId, raterId])
  @@index([playerId])
  @@index([raterId])
}

model Club {
  id          Int     @id @default(autoincrement())
  soccerwayId Int?
  clubName    String  @db.VarChar(255)
  uri         String? @db.VarChar(255)
  country     String? @db.VarChar(255)

  supporters ClubSupporter[]
}

model ClubSupporter {
  playerId Int
  clubId   Int

  player Player @relation(fields: [playerId], references: [id])
  club   Club   @relation(fields: [clubId], references: [id])

  @@unique([playerId, clubId])
  @@index([playerId])
  @@index([clubId])
}

model Country {
  isoCode String @id @db.VarChar(6)
  name    String @unique @db.VarChar(255)

  supporters CountrySupporter[]
}

model CountrySupporter {
  playerId       Int
  countryISOCode String @db.VarChar(6)

  country Country @relation(fields: [countryISOCode], references: [isoCode])
  player  Player  @relation(fields: [playerId], references: [id])

  @@unique([playerId, countryISOCode])
  @@index([playerId])
  @@index([countryISOCode])
}

model Diffs {
  id             Int     @id @default(autoincrement())
  a              String? @db.Text
  b              String? @db.Text
  diffAge        Float?
  diffUnknownAge Int?
  diffGoalies    Int?    @db.TinyInt
  diffAverage    Float?
  diffPlayed     Int?
}

model GameChat {
  id      Int      @id @default(autoincrement())
  gameDay Int
  stamp   DateTime @default(now()) @db.Timestamp(0)
  player  Int
  body    String?  @db.MediumText

  @@index([player])
}

model GameDay {
  id                 Int       @id @default(autoincrement())
  year               Int
  date               DateTime  @db.DateTime(0)
  game               Boolean   @default(true)
  mailSent           DateTime? @db.DateTime(0)
  comment            String?   @db.VarChar(255)
  bibs               TeamName?
  pickerGamesHistory Int?

  outcomes      Outcome[]
  playerRecords PlayerRecord[]
}

model Invitation {
  uuid      String @id @db.Char(38)
  playerId  Int
  gameDayId Int

  @@index([playerId])
  @@index([gameDayId])
}

model Outcome {
  id               Int             @id @default(autoincrement())
  response         PlayerResponse?
  responseInterval Int?
  points           Int?
  team             TeamName?
  comment          String?         @db.VarChar(127)
  pub              Int?
  paid             Boolean?
  goalie           Boolean?

  gameDayId Int
  playerId  Int

  gameDay GameDay @relation(fields: [gameDayId], references: [id])
  player  Player  @relation(fields: [playerId], references: [id])

  @@unique([gameDayId, playerId])
  @@index([gameDayId])
  @@index([playerId])
}

model Picker {
  playerId   Int     @id
  playerName String? @db.VarChar(255)
  age        Int?
  average    Float?
  goalie     Int?    @db.TinyInt
  played     Int?
}

model PickerTeams {
  playerId Int       @unique
  team     TeamName?
}

model Player {
  id    Int    @id @default(autoincrement())
  login String @unique @db.VarChar(16)

  isAdmin Boolean?

  firstName String?
  lastName  String?
  name      String?
  anonymous Boolean?

  email    String?
  joined   DateTime?
  finished DateTime?
  born     DateTime?
  comment  String?

  introducedBy Int?

  arsesOfPlayer Arse[]             @relation(name: "PlayerArse")
  arsesByPlayer Arse[]             @relation(name: "RaterArse")
  clubs         ClubSupporter[]
  countries     CountrySupporter[]
  outcomes      Outcome[]
  playerRecords PlayerRecord[]
}

model PlayerRecord {
  id                      Int    @id @default(autoincrement())
  year                    Int
  responses               Int?
  played                  Int?
  won                     Int?
  drawn                   Int?
  lost                    Int?
  points                  Int?
  averages                Float?
  stalwart                Int?
  pub                     Int?
  rankPoints              Int?
  rankAverages            Int?
  rankAveragesUnqualified Int?
  rankStalwart            Int?
  rankSpeedy              Int?
  rankSpeedyUnqualified   Int?
  rankPub                 Int?
  speedy                  Int?

  playerId  Int
  gameDayId Int

  player  Player  @relation(fields: [playerId], references: [id])
  gameDay GameDay @relation(fields: [gameDayId], references: [id])

  @@unique([playerId, year, gameDayId])
  @@index([playerId])
  @@index([year])
  @@index([gameDayId])
}

enum TeamName {
  A
  B
}

enum PlayerResponse {
  Yes
  No
  Dunno
  Excused
  Flaked
  Injured
}

enum TableName {
  points
  averages
  stalwart
  speedy
  pub
}

model User {
  id            String    @id
  name          String    @db.Text
  email         String
  emailVerified Boolean
  image         String?   @db.Text
  createdAt     DateTime
  updatedAt     DateTime
  sessions      Session[]
  accounts      Account[]

  role       String?   @db.Text
  banned     Boolean?
  banReason  String?   @db.Text
  banExpires DateTime?

  @@unique([email])
  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?  @db.Text
  userAgent String?  @db.Text
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  impersonatedBy String? @db.Text

  @@unique([token])
  @@index([userId])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String    @db.Text
  providerId            String    @db.Text
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?   @db.Text
  refreshToken          String?   @db.Text
  idToken               String?   @db.Text
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?   @db.Text
  password              String?   @db.Text
  createdAt             DateTime
  updatedAt             DateTime

  @@index([userId])
  @@map("account")
}

model Verification {
  id         String    @id
  identifier String    @db.Text
  value      String    @db.Text
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}
